
test005-Mission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee8  08007ee8  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef0  08007ef0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007ef8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08007f60  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007f60  0000936c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121c0  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287e  00000000  00000000  0001b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da0  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191fa  00000000  00000000  0001f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150fc  00000000  00000000  00038bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4e8  00000000  00000000  0004dcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec1a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  000ec1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f15cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007de8 	.word	0x08007de8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007de8 	.word	0x08007de8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_uldivmod>:
 800084c:	b953      	cbnz	r3, 8000864 <__aeabi_uldivmod+0x18>
 800084e:	b94a      	cbnz	r2, 8000864 <__aeabi_uldivmod+0x18>
 8000850:	2900      	cmp	r1, #0
 8000852:	bf08      	it	eq
 8000854:	2800      	cmpeq	r0, #0
 8000856:	bf1c      	itt	ne
 8000858:	f04f 31ff 	movne.w	r1, #4294967295
 800085c:	f04f 30ff 	movne.w	r0, #4294967295
 8000860:	f000 b96a 	b.w	8000b38 <__aeabi_idiv0>
 8000864:	f1ad 0c08 	sub.w	ip, sp, #8
 8000868:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086c:	f000 f806 	bl	800087c <__udivmoddi4>
 8000870:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000878:	b004      	add	sp, #16
 800087a:	4770      	bx	lr

0800087c <__udivmoddi4>:
 800087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000880:	9d08      	ldr	r5, [sp, #32]
 8000882:	460c      	mov	r4, r1
 8000884:	2b00      	cmp	r3, #0
 8000886:	d14e      	bne.n	8000926 <__udivmoddi4+0xaa>
 8000888:	4694      	mov	ip, r2
 800088a:	458c      	cmp	ip, r1
 800088c:	4686      	mov	lr, r0
 800088e:	fab2 f282 	clz	r2, r2
 8000892:	d962      	bls.n	800095a <__udivmoddi4+0xde>
 8000894:	b14a      	cbz	r2, 80008aa <__udivmoddi4+0x2e>
 8000896:	f1c2 0320 	rsb	r3, r2, #32
 800089a:	4091      	lsls	r1, r2
 800089c:	fa20 f303 	lsr.w	r3, r0, r3
 80008a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a4:	4319      	orrs	r1, r3
 80008a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ae:	fa1f f68c 	uxth.w	r6, ip
 80008b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ba:	fb07 1114 	mls	r1, r7, r4, r1
 80008be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c2:	fb04 f106 	mul.w	r1, r4, r6
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d90a      	bls.n	80008e0 <__udivmoddi4+0x64>
 80008ca:	eb1c 0303 	adds.w	r3, ip, r3
 80008ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80008d2:	f080 8112 	bcs.w	8000afa <__udivmoddi4+0x27e>
 80008d6:	4299      	cmp	r1, r3
 80008d8:	f240 810f 	bls.w	8000afa <__udivmoddi4+0x27e>
 80008dc:	3c02      	subs	r4, #2
 80008de:	4463      	add	r3, ip
 80008e0:	1a59      	subs	r1, r3, r1
 80008e2:	fa1f f38e 	uxth.w	r3, lr
 80008e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ea:	fb07 1110 	mls	r1, r7, r0, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb00 f606 	mul.w	r6, r0, r6
 80008f6:	429e      	cmp	r6, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x94>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000902:	f080 80fc 	bcs.w	8000afe <__udivmoddi4+0x282>
 8000906:	429e      	cmp	r6, r3
 8000908:	f240 80f9 	bls.w	8000afe <__udivmoddi4+0x282>
 800090c:	4463      	add	r3, ip
 800090e:	3802      	subs	r0, #2
 8000910:	1b9b      	subs	r3, r3, r6
 8000912:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000916:	2100      	movs	r1, #0
 8000918:	b11d      	cbz	r5, 8000922 <__udivmoddi4+0xa6>
 800091a:	40d3      	lsrs	r3, r2
 800091c:	2200      	movs	r2, #0
 800091e:	e9c5 3200 	strd	r3, r2, [r5]
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	428b      	cmp	r3, r1
 8000928:	d905      	bls.n	8000936 <__udivmoddi4+0xba>
 800092a:	b10d      	cbz	r5, 8000930 <__udivmoddi4+0xb4>
 800092c:	e9c5 0100 	strd	r0, r1, [r5]
 8000930:	2100      	movs	r1, #0
 8000932:	4608      	mov	r0, r1
 8000934:	e7f5      	b.n	8000922 <__udivmoddi4+0xa6>
 8000936:	fab3 f183 	clz	r1, r3
 800093a:	2900      	cmp	r1, #0
 800093c:	d146      	bne.n	80009cc <__udivmoddi4+0x150>
 800093e:	42a3      	cmp	r3, r4
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xcc>
 8000942:	4290      	cmp	r0, r2
 8000944:	f0c0 80f0 	bcc.w	8000b28 <__udivmoddi4+0x2ac>
 8000948:	1a86      	subs	r6, r0, r2
 800094a:	eb64 0303 	sbc.w	r3, r4, r3
 800094e:	2001      	movs	r0, #1
 8000950:	2d00      	cmp	r5, #0
 8000952:	d0e6      	beq.n	8000922 <__udivmoddi4+0xa6>
 8000954:	e9c5 6300 	strd	r6, r3, [r5]
 8000958:	e7e3      	b.n	8000922 <__udivmoddi4+0xa6>
 800095a:	2a00      	cmp	r2, #0
 800095c:	f040 8090 	bne.w	8000a80 <__udivmoddi4+0x204>
 8000960:	eba1 040c 	sub.w	r4, r1, ip
 8000964:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000968:	fa1f f78c 	uxth.w	r7, ip
 800096c:	2101      	movs	r1, #1
 800096e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000972:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000976:	fb08 4416 	mls	r4, r8, r6, r4
 800097a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800097e:	fb07 f006 	mul.w	r0, r7, r6
 8000982:	4298      	cmp	r0, r3
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x11c>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f106 34ff 	add.w	r4, r6, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x11a>
 8000990:	4298      	cmp	r0, r3
 8000992:	f200 80cd 	bhi.w	8000b30 <__udivmoddi4+0x2b4>
 8000996:	4626      	mov	r6, r4
 8000998:	1a1c      	subs	r4, r3, r0
 800099a:	fa1f f38e 	uxth.w	r3, lr
 800099e:	fbb4 f0f8 	udiv	r0, r4, r8
 80009a2:	fb08 4410 	mls	r4, r8, r0, r4
 80009a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009aa:	fb00 f707 	mul.w	r7, r0, r7
 80009ae:	429f      	cmp	r7, r3
 80009b0:	d908      	bls.n	80009c4 <__udivmoddi4+0x148>
 80009b2:	eb1c 0303 	adds.w	r3, ip, r3
 80009b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ba:	d202      	bcs.n	80009c2 <__udivmoddi4+0x146>
 80009bc:	429f      	cmp	r7, r3
 80009be:	f200 80b0 	bhi.w	8000b22 <__udivmoddi4+0x2a6>
 80009c2:	4620      	mov	r0, r4
 80009c4:	1bdb      	subs	r3, r3, r7
 80009c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ca:	e7a5      	b.n	8000918 <__udivmoddi4+0x9c>
 80009cc:	f1c1 0620 	rsb	r6, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 f706 	lsr.w	r7, r2, r6
 80009d6:	431f      	orrs	r7, r3
 80009d8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009dc:	fa04 f301 	lsl.w	r3, r4, r1
 80009e0:	ea43 030c 	orr.w	r3, r3, ip
 80009e4:	40f4      	lsrs	r4, r6
 80009e6:	fa00 f801 	lsl.w	r8, r0, r1
 80009ea:	0c38      	lsrs	r0, r7, #16
 80009ec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009f0:	fbb4 fef0 	udiv	lr, r4, r0
 80009f4:	fa1f fc87 	uxth.w	ip, r7
 80009f8:	fb00 441e 	mls	r4, r0, lr, r4
 80009fc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a00:	fb0e f90c 	mul.w	r9, lr, ip
 8000a04:	45a1      	cmp	r9, r4
 8000a06:	fa02 f201 	lsl.w	r2, r2, r1
 8000a0a:	d90a      	bls.n	8000a22 <__udivmoddi4+0x1a6>
 8000a0c:	193c      	adds	r4, r7, r4
 8000a0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a12:	f080 8084 	bcs.w	8000b1e <__udivmoddi4+0x2a2>
 8000a16:	45a1      	cmp	r9, r4
 8000a18:	f240 8081 	bls.w	8000b1e <__udivmoddi4+0x2a2>
 8000a1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a20:	443c      	add	r4, r7
 8000a22:	eba4 0409 	sub.w	r4, r4, r9
 8000a26:	fa1f f983 	uxth.w	r9, r3
 8000a2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x1d2>
 8000a3e:	193c      	adds	r4, r7, r4
 8000a40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a44:	d267      	bcs.n	8000b16 <__udivmoddi4+0x29a>
 8000a46:	45a4      	cmp	ip, r4
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0x29a>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	443c      	add	r4, r7
 8000a4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a52:	fba0 9302 	umull	r9, r3, r0, r2
 8000a56:	eba4 040c 	sub.w	r4, r4, ip
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	46ce      	mov	lr, r9
 8000a5e:	469c      	mov	ip, r3
 8000a60:	d351      	bcc.n	8000b06 <__udivmoddi4+0x28a>
 8000a62:	d04e      	beq.n	8000b02 <__udivmoddi4+0x286>
 8000a64:	b155      	cbz	r5, 8000a7c <__udivmoddi4+0x200>
 8000a66:	ebb8 030e 	subs.w	r3, r8, lr
 8000a6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a72:	40cb      	lsrs	r3, r1
 8000a74:	431e      	orrs	r6, r3
 8000a76:	40cc      	lsrs	r4, r1
 8000a78:	e9c5 6400 	strd	r6, r4, [r5]
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	e750      	b.n	8000922 <__udivmoddi4+0xa6>
 8000a80:	f1c2 0320 	rsb	r3, r2, #32
 8000a84:	fa20 f103 	lsr.w	r1, r0, r3
 8000a88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a90:	4094      	lsls	r4, r2
 8000a92:	430c      	orrs	r4, r1
 8000a94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a9c:	fa1f f78c 	uxth.w	r7, ip
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3110 	mls	r1, r8, r0, r3
 8000aa8:	0c23      	lsrs	r3, r4, #16
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb00 f107 	mul.w	r1, r0, r7
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x24c>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000abe:	d22c      	bcs.n	8000b1a <__udivmoddi4+0x29e>
 8000ac0:	4299      	cmp	r1, r3
 8000ac2:	d92a      	bls.n	8000b1a <__udivmoddi4+0x29e>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	1a5b      	subs	r3, r3, r1
 8000aca:	b2a4      	uxth	r4, r4
 8000acc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ad0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ad4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad8:	fb01 f307 	mul.w	r3, r1, r7
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x276>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ae8:	d213      	bcs.n	8000b12 <__udivmoddi4+0x296>
 8000aea:	42a3      	cmp	r3, r4
 8000aec:	d911      	bls.n	8000b12 <__udivmoddi4+0x296>
 8000aee:	3902      	subs	r1, #2
 8000af0:	4464      	add	r4, ip
 8000af2:	1ae4      	subs	r4, r4, r3
 8000af4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000af8:	e739      	b.n	800096e <__udivmoddi4+0xf2>
 8000afa:	4604      	mov	r4, r0
 8000afc:	e6f0      	b.n	80008e0 <__udivmoddi4+0x64>
 8000afe:	4608      	mov	r0, r1
 8000b00:	e706      	b.n	8000910 <__udivmoddi4+0x94>
 8000b02:	45c8      	cmp	r8, r9
 8000b04:	d2ae      	bcs.n	8000a64 <__udivmoddi4+0x1e8>
 8000b06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b0e:	3801      	subs	r0, #1
 8000b10:	e7a8      	b.n	8000a64 <__udivmoddi4+0x1e8>
 8000b12:	4631      	mov	r1, r6
 8000b14:	e7ed      	b.n	8000af2 <__udivmoddi4+0x276>
 8000b16:	4603      	mov	r3, r0
 8000b18:	e799      	b.n	8000a4e <__udivmoddi4+0x1d2>
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	e7d4      	b.n	8000ac8 <__udivmoddi4+0x24c>
 8000b1e:	46d6      	mov	lr, sl
 8000b20:	e77f      	b.n	8000a22 <__udivmoddi4+0x1a6>
 8000b22:	4463      	add	r3, ip
 8000b24:	3802      	subs	r0, #2
 8000b26:	e74d      	b.n	80009c4 <__udivmoddi4+0x148>
 8000b28:	4606      	mov	r6, r0
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	e70f      	b.n	8000950 <__udivmoddi4+0xd4>
 8000b30:	3e02      	subs	r6, #2
 8000b32:	4463      	add	r3, ip
 8000b34:	e730      	b.n	8000998 <__udivmoddi4+0x11c>
 8000b36:	bf00      	nop

08000b38 <__aeabi_idiv0>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <i2c_init>:
	dd[3] = n2 | 0x08;
	HAL_I2C_MasterTransmit(hi2c);
}

int i2c_init(I2C_HandleTypeDef *p)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <i2c_init+0x1c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20000084 	.word	0x20000084

08000b5c <i2c_scan>:

int i2c_scan()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <i2c_scan+0x64>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d024      	beq.n	8000bb4 <i2c_scan+0x58>
	for(int addr = 0; addr < 128 ; addr++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e01d      	b.n	8000bac <i2c_scan+0x50>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <i2c_scan+0x64>)
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	b299      	uxth	r1, r3
 8000b78:	230a      	movs	r3, #10
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f002 fbca 	bl	8003314 <HAL_I2C_IsDeviceReady>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d104      	bne.n	8000b90 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	480e      	ldr	r0, [pc, #56]	@ (8000bc4 <i2c_scan+0x68>)
 8000b8a:	f006 f88b 	bl	8006ca4 <iprintf>
 8000b8e:	e002      	b.n	8000b96 <i2c_scan+0x3a>
		}
		else
		{
			printf("  .  ");
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <i2c_scan+0x6c>)
 8000b92:	f006 f887 	bl	8006ca4 <iprintf>
		}
		if((addr % 16) == 0) printf("\r\n");
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <i2c_scan+0x4a>
 8000ba0:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <i2c_scan+0x70>)
 8000ba2:	f006 f8e7 	bl	8006d74 <puts>
	for(int addr = 0; addr < 128 ; addr++)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb0:	ddde      	ble.n	8000b70 <i2c_scan+0x14>
 8000bb2:	e000      	b.n	8000bb6 <i2c_scan+0x5a>
	if(hi2c == NULL) return;
 8000bb4:	bf00      	nop
	}

}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	08007e00 	.word	0x08007e00
 8000bc8:	08007e08 	.word	0x08007e08
 8000bcc:	08007e10 	.word	0x08007e10

08000bd0 <lcd_command>:

void lcd_command(char cmd) // cmd_bit : abcd efgh
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0; 	       // n1 : abcd 0000, upper nibble up 4bits remain, low 4bits go away
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f023 030f 	bic.w	r3, r3, #15
 8000be0:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;    // n2 : efgh 0000, lower nibble, low 4bits remain, (cmd << 4) is also same
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3) | (1<<2) |0|0; // RW|EN_1|NC|RS; 0x0c
 8000be8:	230c      	movs	r3, #12
 8000bea:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3) |  0 	 |0|0; // RW|EN_0|NC|RS; 0x08
 8000bec:	2308      	movs	r3, #8
 8000bee:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	7b3b      	ldrb	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000c04:	7bba      	ldrb	r2, [r7, #14]
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000c0e:	7bba      	ldrb	r2, [r7, #14]
 8000c10:	7b3b      	ldrb	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <lcd_command+0x64>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	f107 0208 	add.w	r2, r7, #8
 8000c20:	230a      	movs	r3, #10
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2304      	movs	r3, #4
 8000c26:	214e      	movs	r1, #78	@ 0x4e
 8000c28:	f002 fa76 	bl	8003118 <HAL_I2C_Master_Transmit>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000084 	.word	0x20000084

08000c38 <lcd_data>:

void lcd_data(char ch)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3) | (1<<2) |0|(1<<0);
 8000c50:	230d      	movs	r3, #13
 8000c52:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3) |  0 	 |0|(1<<0);
 8000c54:	2309      	movs	r3, #9
 8000c56:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	7b7b      	ldrb	r3, [r7, #13]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	7b3b      	ldrb	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000c6c:	7bba      	ldrb	r2, [r7, #14]
 8000c6e:	7b7b      	ldrb	r3, [r7, #13]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000c76:	7bba      	ldrb	r2, [r7, #14]
 8000c78:	7b3b      	ldrb	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <lcd_data+0x64>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f107 0208 	add.w	r2, r7, #8
 8000c88:	230a      	movs	r3, #10
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	214e      	movs	r1, #78	@ 0x4e
 8000c90:	f002 fa42 	bl	8003118 <HAL_I2C_Master_Transmit>
	//printf("%c\r\n",ch);

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000084 	.word	0x20000084

08000ca0 <lcd_test>:
	HAL_Delay(50);
}


void lcd_test()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

	lcd_data('H');
 8000ca4:	2048      	movs	r0, #72	@ 0x48
 8000ca6:	f7ff ffc7 	bl	8000c38 <lcd_data>
	lcd_data('e');
 8000caa:	2065      	movs	r0, #101	@ 0x65
 8000cac:	f7ff ffc4 	bl	8000c38 <lcd_data>
	lcd_data('l');
 8000cb0:	206c      	movs	r0, #108	@ 0x6c
 8000cb2:	f7ff ffc1 	bl	8000c38 <lcd_data>
	lcd_data('l');
 8000cb6:	206c      	movs	r0, #108	@ 0x6c
 8000cb8:	f7ff ffbe 	bl	8000c38 <lcd_data>
	lcd_data('o');
 8000cbc:	206f      	movs	r0, #111	@ 0x6f
 8000cbe:	f7ff ffbb 	bl	8000c38 <lcd_data>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <lcd_print>:

void lcd_print(char *str)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	while(*str) lcd_data(*str++);
 8000cce:	e006      	b.n	8000cde <lcd_print+0x18>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffad 	bl	8000c38 <lcd_data>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f4      	bne.n	8000cd0 <lcd_print+0xa>
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <lcd_printEx>:

void lcd_printEx(char *str, int ln)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command(0x80);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <lcd_printEx+0x16>
 8000d00:	2080      	movs	r0, #128	@ 0x80
 8000d02:	f7ff ff65 	bl	8000bd0 <lcd_command>
	if(ln == 1) lcd_command(0xc0);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d102      	bne.n	8000d12 <lcd_printEx+0x22>
 8000d0c:	20c0      	movs	r0, #192	@ 0xc0
 8000d0e:	f7ff ff5f 	bl	8000bd0 <lcd_command>
	lcd_print(str);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffd7 	bl	8000cc6 <lcd_print>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b09e      	sub	sp, #120	@ 0x78
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fd9d 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f87d 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 fa0f 	bl	8001150 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d32:	f000 f9ed 	bl	8001110 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 f9c1 	bl	80010bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f8df 	bl	8000efc <MX_ADC1_Init>
  MX_I2C2_Init();
 8000d3e:	f000 f941 	bl	8000fc4 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000d42:	f000 f96d 	bl	8001020 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("LCD1602 - Mission");
 8000d46:	482e      	ldr	r0, [pc, #184]	@ (8000e00 <main+0xe0>)
 8000d48:	f000 faac 	bl	80012a4 <ProgramStart>
  i2c_init(&hi2c2); i2c_scan();
 8000d4c:	482d      	ldr	r0, [pc, #180]	@ (8000e04 <main+0xe4>)
 8000d4e:	f7ff fef5 	bl	8000b3c <i2c_init>
 8000d52:	f7ff ff03 	bl	8000b5c <i2c_scan>
  lcd_test();
 8000d56:	f7ff ffa3 	bl	8000ca0 <lcd_test>
  HAL_ADC_Start_DMA(&hadc1, val, 2);
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	492a      	ldr	r1, [pc, #168]	@ (8000e08 <main+0xe8>)
 8000d5e:	482b      	ldr	r0, [pc, #172]	@ (8000e0c <main+0xec>)
 8000d60:	f000 fe5a 	bl	8001a18 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000d64:	482a      	ldr	r0, [pc, #168]	@ (8000e10 <main+0xf0>)
 8000d66:	f005 f819 	bl	8005d9c <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  double tm = ((240.0 / 4096.0) * val[0]) - 40.0;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <main+0xe8>)
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd01 	bl	8000778 <__aeabi_i2d>
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <main+0xf4>)
 8000d7c:	f7ff fa80 	bl	8000280 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <main+0xf8>)
 8000d8e:	f7ff fba5 	bl	80004dc <__aeabi_dsub>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	  double hm = ((100.0 / 4096.0) * val[1]);
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <main+0xe8>)
 8000d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fce9 	bl	8000778 <__aeabi_i2d>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <main+0xfc>)
 8000dac:	f7ff fa68 	bl	8000280 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	  sprintf(buf, "Temp : %-6.1f", val[0]); lcd_printEx(buf, 0); HAL_Delay(100);
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <main+0xe8>)
 8000dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4917      	ldr	r1, [pc, #92]	@ (8000e20 <main+0x100>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 ffdd 	bl	8006d84 <siprintf>
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff8e 	bl	8000cf0 <lcd_printEx>
 8000dd4:	2064      	movs	r0, #100	@ 0x64
 8000dd6:	f000 fdb7 	bl	8001948 <HAL_Delay>
	  sprintf(buf, "Humi : %-6.1f", val[1]); lcd_printEx(buf, 1); HAL_Delay(100);
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <main+0xe8>)
 8000ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000de0:	461a      	mov	r2, r3
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	490f      	ldr	r1, [pc, #60]	@ (8000e24 <main+0x104>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 ffcc 	bl	8006d84 <siprintf>
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff7d 	bl	8000cf0 <lcd_printEx>
 8000df6:	2064      	movs	r0, #100	@ 0x64
 8000df8:	f000 fda6 	bl	8001948 <HAL_Delay>
  {
 8000dfc:	bf00      	nop
 8000dfe:	e7b4      	b.n	8000d6a <main+0x4a>
 8000e00:	08007e14 	.word	0x08007e14
 8000e04:	20000130 	.word	0x20000130
 8000e08:	20000214 	.word	0x20000214
 8000e0c:	20000088 	.word	0x20000088
 8000e10:	20000184 	.word	0x20000184
 8000e14:	3fae0000 	.word	0x3fae0000
 8000e18:	40440000 	.word	0x40440000
 8000e1c:	3f990000 	.word	0x3f990000
 8000e20:	08007e28 	.word	0x08007e28
 8000e24:	08007e38 	.word	0x08007e38

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	@ 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2230      	movs	r2, #48	@ 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 f89c 	bl	8006f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	2302      	movs	r3, #2
 8000e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fa8c 	bl	80053cc <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eba:	f000 f9cb 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ece:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fcee 	bl	80058bc <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ee6:	f000 f9b5 	bl	8001254 <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <MX_ADC1_Init+0xc4>)
 8000f12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1c:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f28:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f66:	4815      	ldr	r0, [pc, #84]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f68:	f000 fd12 	bl	8001990 <HAL_ADC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000f72:	f000 f96f 	bl	8001254 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000f88:	f000 fe54 	bl	8001c34 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000f92:	f000 f95f 	bl	8001254 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MX_ADC1_Init+0xc0>)
 8000fa4:	f000 fe46 	bl	8001c34 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fae:	f000 f951 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000088 	.word	0x20000088
 8000fc0:	40012000 	.word	0x40012000

08000fc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <MX_I2C2_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_I2C2_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2C2_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_I2C2_Init+0x50>)
 8001002:	f001 ff2f 	bl	8002e64 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f922 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000130 	.word	0x20000130
 8001018:	40005800 	.word	0x40005800
 800101c:	000186a0 	.word	0x000186a0

08001020 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_TIM3_Init+0x94>)
 800103e:	4a1e      	ldr	r2, [pc, #120]	@ (80010b8 <MX_TIM3_Init+0x98>)
 8001040:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4200 - 1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_TIM3_Init+0x94>)
 8001044:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001048:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_TIM3_Init+0x94>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_TIM3_Init+0x94>)
 8001052:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001056:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_TIM3_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_TIM3_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001064:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <MX_TIM3_Init+0x94>)
 8001066:	f004 fe49 	bl	8005cfc <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001070:	f000 f8f0 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <MX_TIM3_Init+0x94>)
 8001082:	f004 fee5 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 f8e2 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001090:	2320      	movs	r3, #32
 8001092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_TIM3_Init+0x94>)
 800109e:	f005 f8c5 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010a8:	f000 f8d4 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000184 	.word	0x20000184
 80010b8:	40000400 	.word	0x40000400

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f005 f908 	bl	8006308 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f8a9 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001cc 	.word	0x200001cc
 800110c:	40004400 	.word	0x40004400

08001110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_DMA_Init+0x3c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <MX_DMA_Init+0x3c>)
 8001120:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2038      	movs	r0, #56	@ 0x38
 8001138:	f001 f907 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800113c:	2038      	movs	r0, #56	@ 0x38
 800113e:	f001 f920 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <MX_GPIO_Init+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a35      	ldr	r2, [pc, #212]	@ (8001244 <MX_GPIO_Init+0xf4>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <MX_GPIO_Init+0xf4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_GPIO_Init+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a2e      	ldr	r2, [pc, #184]	@ (8001244 <MX_GPIO_Init+0xf4>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <MX_GPIO_Init+0xf4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a27      	ldr	r2, [pc, #156]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_GPIO_Init+0xf4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	481b      	ldr	r0, [pc, #108]	@ (8001248 <MX_GPIO_Init+0xf8>)
 80011dc:	f001 fe28 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	@ (800124c <MX_GPIO_Init+0xfc>)
 80011f8:	f001 fc7e 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_GPIO_Init+0xf8>)
 8001214:	f001 fc70 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_GPIO_Init+0x100>)
 8001236:	f001 fc5f 	bl	8002af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020400 	.word	0x40020400

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <Error_Handler+0x8>

08001260 <__io_putchar>:
//I2C_HandleTypeDef *hi2c = NULL;
//void hi2c = NULL;


int __io_putchar(int ch)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch, 1, 10);
 8001268:	1d39      	adds	r1, r7, #4
 800126a:	230a      	movs	r3, #10
 800126c:	2201      	movs	r2, #1
 800126e:	4804      	ldr	r0, [pc, #16]	@ (8001280 <__io_putchar+0x20>)
 8001270:	f005 f89a 	bl	80063a8 <HAL_UART_Transmit>
	return ch;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001cc 	.word	0x200001cc

08001284 <StandBy>:
void StandBy()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	//printf()
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8001288:	bf00      	nop
 800128a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128e:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <StandBy+0x1c>)
 8001290:	f001 fdb6 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f7      	bne.n	800128a <StandBy+0x6>
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020800 	.word	0x40020800

080012a4 <ProgramStart>:
void ProgramStart(char * str)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 80012ac:	f000 f816 	bl	80012dc <cls>
	Cursor(0,0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f81c 	bl	80012f0 <Cursor>
	printf("Program Start - %s", str);
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <ProgramStart+0x30>)
 80012bc:	f005 fcf2 	bl	8006ca4 <iprintf>
	printf("Press Blue_button(B1) to Start...\r\n");
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <ProgramStart+0x34>)
 80012c2:	f005 fd57 	bl	8006d74 <puts>
	StandBy();
 80012c6:	f7ff ffdd 	bl	8001284 <StandBy>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08007e48 	.word	0x08007e48
 80012d8:	08007e5c 	.word	0x08007e5c

080012dc <cls>:
void cls()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	printf("\033[2J");
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <cls+0x10>)
 80012e2:	f005 fcdf 	bl	8006ca4 <iprintf>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08007e80 	.word	0x08007e80

080012f0 <Cursor>:
void Cursor(int x, int y)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", x, y);
 80012fa:	f107 000c 	add.w	r0, r7, #12
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4906      	ldr	r1, [pc, #24]	@ (800131c <Cursor+0x2c>)
 8001304:	f005 fd3e 	bl	8006d84 <siprintf>
	//printf("%s", buf);
	puts(buf); //string output function
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fd31 	bl	8006d74 <puts>
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	08007e88 	.word	0x08007e88

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 ffe8 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2f      	ldr	r2, [pc, #188]	@ (800144c <HAL_ADC_MspInit+0xdc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d157      	bne.n	8001442 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a2d      	ldr	r2, [pc, #180]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ca:	2303      	movs	r3, #3
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481d      	ldr	r0, [pc, #116]	@ (8001454 <HAL_ADC_MspInit+0xe4>)
 80013de:	f001 fb8b 	bl	8002af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013e4:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_ADC_MspInit+0xec>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800140c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001428:	f000 ffc6 	bl	80023b8 <HAL_DMA_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001432:	f7ff ff0f 	bl	8001254 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800143a:	639a      	str	r2, [r3, #56]	@ 0x38
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	200000d0 	.word	0x200000d0
 800145c:	40026410 	.word	0x40026410

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a2a      	ldr	r2, [pc, #168]	@ (8001528 <HAL_I2C_MspInit+0xc8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14d      	bne.n	800151e <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a28      	ldr	r2, [pc, #160]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	481d      	ldr	r0, [pc, #116]	@ (8001530 <HAL_I2C_MspInit+0xd0>)
 80014bc:	f001 fb1c 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014d2:	2309      	movs	r3, #9
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4814      	ldr	r0, [pc, #80]	@ (8001530 <HAL_I2C_MspInit+0xd0>)
 80014de:	f001 fb0b 	bl	8002af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_I2C_MspInit+0xcc>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2021      	movs	r0, #33	@ 0x21
 8001504:	f000 ff21 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001508:	2021      	movs	r0, #33	@ 0x21
 800150a:	f000 ff3a 	bl	8002382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2022      	movs	r0, #34	@ 0x22
 8001514:	f000 ff19 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001518:	2022      	movs	r0, #34	@ 0x22
 800151a:	f000 ff32 	bl	8002382 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	@ 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40005800 	.word	0x40005800
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_UART_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d2:	230c      	movs	r3, #12
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e2:	2307      	movs	r3, #7
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <HAL_UART_MspInit+0x8c>)
 80015ee:	f001 fa83 	bl	8002af8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165e:	f000 f953 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <I2C2_EV_IRQHandler+0x10>)
 800166e:	f001 ff7f 	bl	8003570 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000130 	.word	0x20000130

0800167c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <I2C2_ER_IRQHandler+0x10>)
 8001682:	f002 f8c8 	bl	8003816 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000130 	.word	0x20000130

08001690 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001696:	f000 ffb7 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000d0 	.word	0x200000d0

080016a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e00a      	b.n	80016cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b6:	f3af 8000 	nop.w
 80016ba:	4601      	mov	r1, r0
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	b2ca      	uxtb	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf0      	blt.n	80016b6 <_read+0x12>
  }

  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e009      	b.n	8001704 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fdb1 	bl	8001260 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf1      	blt.n	80016f0 <_write+0x12>
  }
  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_close>:

int _close(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173e:	605a      	str	r2, [r3, #4]
  return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_isatty>:

int _isatty(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f005 fc2e 	bl	8007010 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20020000 	.word	0x20020000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20000218 	.word	0x20000218
 80017e8:	20000370 	.word	0x20000370

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f005 fbed 	bl	800701c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fa6d 	bl	8000d20 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001854:	08007ef8 	.word	0x08007ef8
  ldr r2, =_sbss
 8001858:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800185c:	2000036c 	.word	0x2000036c

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fd51 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fd42 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fd69 	bl	800239e <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fd31 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	2000021c 	.word	0x2000021c

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2000021c 	.word	0x2000021c

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e033      	b.n	8001a0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fcde 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	f043 0202 	orr.w	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa58 	bl	8001e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Start_DMA+0x1e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e0ce      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d018      	beq.n	8001a7e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bdc <HAL_ADC_Start_DMA+0x1c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5f      	ldr	r2, [pc, #380]	@ (8001be0 <HAL_ADC_Start_DMA+0x1c8>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9a      	lsrs	r2, r3, #18
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a8c:	d107      	bne.n	8001a9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a9c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8086 	bne.w	8001bba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ad8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aec:	d106      	bne.n	8001afc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	f023 0206 	bic.w	r2, r3, #6
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b0a:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <HAL_ADC_Start_DMA+0x1cc>)
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b12:	4a35      	ldr	r2, [pc, #212]	@ (8001be8 <HAL_ADC_Start_DMA+0x1d0>)
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1a:	4a34      	ldr	r2, [pc, #208]	@ (8001bec <HAL_ADC_Start_DMA+0x1d4>)
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <HAL_ADC_Start_DMA+0x1d8>)
 8001b24:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b4e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	334c      	adds	r3, #76	@ 0x4c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f000 fcd8 	bl	8002514 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10f      	bne.n	8001b90 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d129      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	e020      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <HAL_ADC_Start_DMA+0x1dc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11b      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1ba>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d114      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	40012300 	.word	0x40012300
 8001be8:	08002091 	.word	0x08002091
 8001bec:	0800214b 	.word	0x0800214b
 8001bf0:	08002167 	.word	0x08002167
 8001bf4:	40012000 	.word	0x40012000

08001bf8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1c>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e113      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x244>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d925      	bls.n	8001cac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68d9      	ldr	r1, [r3, #12]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3b1e      	subs	r3, #30
 8001c76:	2207      	movs	r2, #7
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	400a      	ands	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d9      	ldr	r1, [r3, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4403      	add	r3, r0
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	e022      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6919      	ldr	r1, [r3, #16]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4403      	add	r3, r0
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d824      	bhi.n	8001d44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b05      	subs	r3, #5
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	400a      	ands	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b05      	subs	r3, #5
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d42:	e04c      	b.n	8001dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d824      	bhi.n	8001d96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b23      	subs	r3, #35	@ 0x23
 8001d5e:	221f      	movs	r2, #31
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43da      	mvns	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b23      	subs	r3, #35	@ 0x23
 8001d88:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d94:	e023      	b.n	8001dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b41      	subs	r3, #65	@ 0x41
 8001da8:	221f      	movs	r2, #31
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	400a      	ands	r2, r1
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b41      	subs	r3, #65	@ 0x41
 8001dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dde:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <HAL_ADC_ConfigChannel+0x250>)
 8001de0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <HAL_ADC_ConfigChannel+0x254>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d10f      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1d8>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	@ (8001e88 <HAL_ADC_ConfigChannel+0x254>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12b      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <HAL_ADC_ConfigChannel+0x258>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0x1f4>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b11      	cmp	r3, #17
 8001e26:	d122      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	@ (8001e8c <HAL_ADC_ConfigChannel+0x258>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_ADC_ConfigChannel+0x25c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <HAL_ADC_ConfigChannel+0x260>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9a      	lsrs	r2, r3, #18
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	10000012 	.word	0x10000012
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea0:	4b79      	ldr	r3, [pc, #484]	@ (8002088 <ADC_Init+0x1f0>)
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	4a58      	ldr	r2, [pc, #352]	@ (800208c <ADC_Init+0x1f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e00f      	b.n	8001f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0202 	bic.w	r2, r2, #2
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	005a      	lsls	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	035a      	lsls	r2, r3, #13
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e007      	b.n	800200c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	3b01      	subs	r3, #1
 8002028:	051a      	lsls	r2, r3, #20
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800204e:	025a      	lsls	r2, r3, #9
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	029a      	lsls	r2, r3, #10
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40012300 	.word	0x40012300
 800208c:	0f000001 	.word	0x0f000001

08002090 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13c      	bne.n	8002124 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d12b      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d127      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d119      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0220 	bic.w	r2, r2, #32
 80020f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fd6b 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002122:	e00e      	b.n	8002142 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fd75 	bl	8001c20 <HAL_ADC_ErrorCallback>
}
 8002136:	e004      	b.n	8002142 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff fd57 	bl	8001c0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002172:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff fd4a 	bl	8001c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	@ (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fab4 	bl	8001930 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e099      	b.n	8002508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f4:	e00f      	b.n	8002416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f6:	f7ff fa9b 	bl	8001930 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b05      	cmp	r3, #5
 8002402:	d908      	bls.n	8002416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e078      	b.n	8002508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e8      	bne.n	80023f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_DMA_Init+0x158>)
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	4313      	orrs	r3, r2
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f023 0307 	bic.w	r3, r3, #7
 8002496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d117      	bne.n	80024da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa9f 	bl	8002a00 <DMA_CheckFifoParam>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024d6:	2301      	movs	r3, #1
 80024d8:	e016      	b.n	8002508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa56 	bl	8002994 <DMA_CalcBaseAndBitshift>
 80024e8:	4603      	mov	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	223f      	movs	r2, #63	@ 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	f010803f 	.word	0xf010803f

08002514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_DMA_Start_IT+0x26>
 8002536:	2302      	movs	r3, #2
 8002538:	e040      	b.n	80025bc <HAL_DMA_Start_IT+0xa8>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d12f      	bne.n	80025ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f9e8 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	223f      	movs	r2, #63	@ 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0216 	orr.w	r2, r2, #22
 8002582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0208 	orr.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2205      	movs	r2, #5
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002614:	4b8e      	ldr	r3, [pc, #568]	@ (8002850 <HAL_DMA_IRQHandler+0x248>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a8e      	ldr	r2, [pc, #568]	@ (8002854 <HAL_DMA_IRQHandler+0x24c>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0a9b      	lsrs	r3, r3, #10
 8002620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01a      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	2208      	movs	r2, #8
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2201      	movs	r2, #1
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2204      	movs	r2, #4
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2210      	movs	r2, #16
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d043      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03c      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2210      	movs	r2, #16
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d018      	beq.n	800274a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
 8002736:	e01f      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
 8002748:	e016      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0208 	bic.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	2220      	movs	r2, #32
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 808f 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8087 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2220      	movs	r2, #32
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d136      	bne.n	8002820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0216 	bic.w	r2, r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x1da>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	223f      	movs	r2, #63	@ 0x3f
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d07e      	beq.n	8002914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
        }
        return;
 800281e:	e079      	b.n	8002914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01d      	beq.n	800286a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	2b00      	cmp	r3, #0
 8002842:	d031      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e02c      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000
 8002854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e01e      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10f      	bne.n	8002898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0210 	bic.w	r2, r2, #16
 8002886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d032      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2205      	movs	r2, #5
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d307      	bcc.n	80028f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f2      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x2cc>
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e000      	b.n	8002916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002914:	bf00      	nop
    }
  }
}
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292a:	b2db      	uxtb	r3, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d909      	bls.n	80029d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d4:	e007      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	08007eac 	.word	0x08007eac

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e159      	b.n	8002dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8148 	bne.w	8002dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a2 	beq.w	8002dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a52      	ldr	r2, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_GPIO_Init+0x2f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x202>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	@ (8002dec <HAL_GPIO_Init+0x2f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x1fe>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_GPIO_Init+0x2fc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x1f6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a45      	ldr	r2, [pc, #276]	@ (8002df8 <HAL_GPIO_Init+0x300>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x1f2>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x204>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	@ (8002de4 <HAL_GPIO_Init+0x2ec>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f aea2 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fae8 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f002 fef0 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	@ (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	2b80      	cmp	r3, #128	@ 0x80
 8003100:	d103      	bne.n	800310a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	460b      	mov	r3, r1
 8003126:	817b      	strh	r3, [r7, #10]
 8003128:	4613      	mov	r3, r2
 800312a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7fe fc00 	bl	8001930 <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	f040 80e0 	bne.w	8003300 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2319      	movs	r3, #25
 8003146:	2201      	movs	r2, #1
 8003148:	4970      	ldr	r1, [pc, #448]	@ (800330c <HAL_I2C_Master_Transmit+0x1f4>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 ff18 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	e0d3      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_I2C_Master_Transmit+0x50>
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d007      	beq.n	800318e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800319c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2221      	movs	r2, #33	@ 0x21
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2210      	movs	r2, #16
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a50      	ldr	r2, [pc, #320]	@ (8003310 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f001 fda8 	bl	8004d2c <I2C_MasterRequestWrite>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e08d      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031fc:	e066      	b.n	80032cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 ffd6 	bl	80051b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x188>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f001 ffcd 	bl	8005244 <I2C_WaitOnBTFFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e01a      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d194      	bne.n	80031fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7fe fb04 	bl	8001930 <HAL_GetTick>
 8003328:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 8111 	bne.w	800355e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4988      	ldr	r1, [pc, #544]	@ (8003568 <HAL_I2C_IsDeviceReady+0x254>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f001 fe1a 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e104      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_IsDeviceReady+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0fd      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2224      	movs	r2, #36	@ 0x24
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a70      	ldr	r2, [pc, #448]	@ (800356c <HAL_I2C_IsDeviceReady+0x258>)
 80033ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f001 fdd8 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e4:	d103      	bne.n	80033ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0b6      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003400:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe fa95 	bl	8001930 <HAL_GetTick>
 8003406:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003436:	e025      	b.n	8003484 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fe fa7a 	bl	8001930 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <HAL_I2C_IsDeviceReady+0x13a>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22a0      	movs	r2, #160	@ 0xa0
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2ba0      	cmp	r3, #160	@ 0xa0
 800348e:	d005      	beq.n	800349c <HAL_I2C_IsDeviceReady+0x188>
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_I2C_IsDeviceReady+0x188>
 8003496:	7dbb      	ldrb	r3, [r7, #22]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0cd      	beq.n	8003438 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d129      	bne.n	8003506 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	4921      	ldr	r1, [pc, #132]	@ (8003568 <HAL_I2C_IsDeviceReady+0x254>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f001 fd4c 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e036      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e02c      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003514:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800351e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	490f      	ldr	r1, [pc, #60]	@ (8003568 <HAL_I2C_IsDeviceReady+0x254>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f001 fd28 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e012      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	3301      	adds	r3, #1
 800353e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	f4ff af32 	bcc.w	80033ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00100002 	.word	0x00100002
 800356c:	ffff0000 	.word	0xffff0000

08003570 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003590:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b10      	cmp	r3, #16
 800359e:	d003      	beq.n	80035a8 <HAL_I2C_EV_IRQHandler+0x38>
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	f040 80b1 	bne.w	800370a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10d      	bne.n	80035de <HAL_I2C_EV_IRQHandler+0x6e>
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035c8:	d003      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x62>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_EV_IRQHandler+0x66>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x68>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f000 8114 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_I2C_EV_IRQHandler+0x90>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fecf 	bl	8005396 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fd7a 	bl	80040f2 <I2C_Master_SB>
 80035fe:	e083      	b.n	8003708 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0xac>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fdf2 	bl	80041fe <I2C_Master_ADD10>
 800361a:	e075      	b.n	8003708 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_I2C_EV_IRQHandler+0xc8>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fe0e 	bl	8004252 <I2C_Master_ADDR>
 8003636:	e067      	b.n	8003708 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d036      	beq.n	80036b0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003650:	f000 80db 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_I2C_EV_IRQHandler+0x10a>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_I2C_EV_IRQHandler+0x10a>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9d6 	bl	8003a24 <I2C_MasterTransmit_TXE>
 8003678:	e046      	b.n	8003708 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80c2 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80bc 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	2b21      	cmp	r3, #33	@ 0x21
 8003696:	d103      	bne.n	80036a0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa5f 	bl	8003b5c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800369e:	e0b4      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b40      	cmp	r3, #64	@ 0x40
 80036a4:	f040 80b1 	bne.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 facd 	bl	8003c48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ae:	e0ac      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036be:	f000 80a4 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x178>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x178>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb49 	bl	8003d78 <I2C_MasterReceive_RXNE>
 80036e6:	e00f      	b.n	8003708 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 808b 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8085 	beq.w	800380a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fc01 	bl	8003f08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003706:	e080      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x29a>
 8003708:	e07f      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e007      	b.n	800372c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d011      	beq.n	800375a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00c      	beq.n	800375a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 ffcc 	bl	80046f0 <I2C_Slave_ADDR>
 8003758:	e05a      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x206>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f806 	bl	8004780 <I2C_Slave_STOPF>
 8003774:	e04c      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003776:	7bbb      	ldrb	r3, [r7, #14]
 8003778:	2b21      	cmp	r3, #33	@ 0x21
 800377a:	d002      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x212>
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	2b29      	cmp	r3, #41	@ 0x29
 8003780:	d120      	bne.n	80037c4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x238>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x238>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fee7 	bl	8004574 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037a6:	e032      	b.n	800380e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02d      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x29e>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 ff16 	bl	80045ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c2:	e024      	b.n	800380e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x27a>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x27a>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 ff24 	bl	8004630 <I2C_SlaveReceive_RXNE>
 80037e8:	e012      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 ff54 	bl	80046ac <I2C_SlaveReceive_BTF>
 8003804:	e004      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	@ 0x28
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003838:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x4a>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800385e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_I2C_ER_IRQHandler+0x70>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003884:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03e      	beq.n	800390e <HAL_I2C_ER_IRQHandler+0xf8>
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d039      	beq.n	800390e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800389a:	7efb      	ldrb	r3, [r7, #27]
 800389c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038b4:	7ebb      	ldrb	r3, [r7, #26]
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d112      	bne.n	80038e0 <HAL_I2C_ER_IRQHandler+0xca>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10f      	bne.n	80038e0 <HAL_I2C_ER_IRQHandler+0xca>
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b21      	cmp	r3, #33	@ 0x21
 80038c4:	d008      	beq.n	80038d8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b29      	cmp	r3, #41	@ 0x29
 80038ca:	d005      	beq.n	80038d8 <HAL_I2C_ER_IRQHandler+0xc2>
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b28      	cmp	r3, #40	@ 0x28
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b21      	cmp	r3, #33	@ 0x21
 80038d6:	d103      	bne.n	80038e0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 f881 	bl	80049e0 <I2C_Slave_AF>
 80038de:	e016      	b.n	800390e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038f2:	7efb      	ldrb	r3, [r7, #27]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d002      	beq.n	80038fe <HAL_I2C_ER_IRQHandler+0xe8>
 80038f8:	7efb      	ldrb	r3, [r7, #27]
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d107      	bne.n	800390e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <HAL_I2C_ER_IRQHandler+0x11e>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003932:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f001 f8be 	bl	8004ac8 <I2C_ITError>
  }
}
 800394c:	bf00      	nop
 800394e:	3728      	adds	r7, #40	@ 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
 80039b0:	4613      	mov	r3, r2
 80039b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d150      	bne.n	8003aec <I2C_MasterTransmit_TXE+0xc8>
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b21      	cmp	r3, #33	@ 0x21
 8003a4e:	d14d      	bne.n	8003aec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d01d      	beq.n	8003a92 <I2C_MasterTransmit_TXE+0x6e>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d01a      	beq.n	8003a92 <I2C_MasterTransmit_TXE+0x6e>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a62:	d016      	beq.n	8003a92 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a72:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2211      	movs	r2, #17
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ff62 	bl	8003954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a90:	e060      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d107      	bne.n	8003adc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ff7d 	bl	80039d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ada:	e03b      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff35 	bl	8003954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aea:	e033      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b21      	cmp	r3, #33	@ 0x21
 8003af0:	d005      	beq.n	8003afe <I2C_MasterTransmit_TXE+0xda>
 8003af2:	7bbb      	ldrb	r3, [r7, #14]
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d12d      	bne.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b22      	cmp	r3, #34	@ 0x22
 8003afc:	d12a      	bne.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d108      	bne.n	8003b1a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b16:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b18:	e01c      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d103      	bne.n	8003b2e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f88e 	bl	8003c48 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b2c:	e012      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b52:	e7ff      	b.n	8003b54 <I2C_MasterTransmit_TXE+0x130>
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b21      	cmp	r3, #33	@ 0x21
 8003b74:	d164      	bne.n	8003c40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d012      	beq.n	8003ba6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ba4:	e04c      	b.n	8003c40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d01d      	beq.n	8003be8 <I2C_MasterTransmit_BTF+0x8c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d01a      	beq.n	8003be8 <I2C_MasterTransmit_BTF+0x8c>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb8:	d016      	beq.n	8003be8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bc8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2211      	movs	r2, #17
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff feb7 	bl	8003954 <HAL_I2C_MasterTxCpltCallback>
}
 8003be6:	e02b      	b.n	8003c40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bf6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b40      	cmp	r3, #64	@ 0x40
 8003c20:	d107      	bne.n	8003c32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fed2 	bl	80039d4 <HAL_I2C_MemTxCpltCallback>
}
 8003c30:	e006      	b.n	8003c40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fe8a 	bl	8003954 <HAL_I2C_MasterTxCpltCallback>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d11d      	bne.n	8003c9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10b      	bne.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c7e:	e077      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	121b      	asrs	r3, r3, #8
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c9a:	e069      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10b      	bne.n	8003cbc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cba:	e059      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d152      	bne.n	8003d6a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b22      	cmp	r3, #34	@ 0x22
 8003cc8:	d10d      	bne.n	8003ce6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ce4:	e044      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b21      	cmp	r3, #33	@ 0x21
 8003cf4:	d112      	bne.n	8003d1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d1a:	e029      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d124      	bne.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b21      	cmp	r3, #33	@ 0x21
 8003d2a:	d121      	bne.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe36 	bl	80039d4 <HAL_I2C_MemTxCpltCallback>
}
 8003d68:	e002      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff f9be 	bl	80030ec <I2C_Flush_DR>
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b22      	cmp	r3, #34	@ 0x22
 8003d8a:	f040 80b9 	bne.w	8003f00 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d921      	bls.n	8003de6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	f040 8096 	bne.w	8003f00 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003de4:	e08c      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d07f      	beq.n	8003eee <I2C_MasterReceive_RXNE+0x176>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d002      	beq.n	8003dfa <I2C_MasterReceive_RXNE+0x82>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d179      	bne.n	8003eee <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f001 fa6a 	bl	80052d4 <I2C_WaitOnSTOPRequestThroughIT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14c      	bne.n	8003ea0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e14:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d10a      	bne.n	8003e76 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fdba 	bl	80039e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e74:	e044      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d002      	beq.n	8003e8a <I2C_MasterReceive_RXNE+0x112>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d103      	bne.n	8003e92 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e90:	e002      	b.n	8003e98 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2212      	movs	r2, #18
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fd65 	bl	8003968 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e9e:	e02f      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fd88 	bl	80039fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eec:	e008      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efc:	605a      	str	r2, [r3, #4]
}
 8003efe:	e7ff      	b.n	8003f00 <I2C_MasterReceive_RXNE+0x188>
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f56:	e0c8      	b.n	80040ea <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d129      	bne.n	8003fb6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00a      	beq.n	8003f8e <I2C_MasterReceive_BTF+0x86>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d007      	beq.n	8003f8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fb4:	e099      	b.n	80040ea <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	f040 8081 	bne.w	80040c4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <I2C_MasterReceive_BTF+0xc6>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d108      	bne.n	8003fe0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e019      	b.n	8004014 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d002      	beq.n	8003fec <I2C_MasterReceive_BTF+0xe4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d108      	bne.n	8003ffe <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e00a      	b.n	8004014 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b10      	cmp	r3, #16
 8004002:	d007      	beq.n	8004014 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004012:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800406e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d10a      	bne.n	800409a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fca8 	bl	80039e8 <HAL_I2C_MemRxCpltCallback>
}
 8004098:	e027      	b.n	80040ea <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d002      	beq.n	80040ae <I2C_MasterReceive_BTF+0x1a6>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d103      	bne.n	80040b6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80040b4:	e002      	b.n	80040bc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2212      	movs	r2, #18
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fc53 	bl	8003968 <HAL_I2C_MasterRxCpltCallback>
}
 80040c2:	e012      	b.n	80040ea <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d117      	bne.n	8004136 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800411e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004120:	e067      	b.n	80041f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]
}
 8004134:	e05d      	b.n	80041f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800413e:	d133      	bne.n	80041a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b21      	cmp	r3, #33	@ 0x21
 800414a:	d109      	bne.n	8004160 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	e008      	b.n	8004172 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <I2C_Master_SB+0x92>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d032      	beq.n	80041f2 <I2C_Master_SB+0x100>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02d      	beq.n	80041f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a4:	605a      	str	r2, [r3, #4]
}
 80041a6:	e024      	b.n	80041f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030f 	orn	r3, r3, #15
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
}
 80041cc:	e011      	b.n	80041f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10d      	bne.n	80041f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	b29b      	uxth	r3, r3
 80041dc:	11db      	asrs	r3, r3, #7
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 0306 	and.w	r3, r3, #6
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f063 030e 	orn	r3, r3, #14
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	b2da      	uxtb	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <I2C_Master_ADD10+0x26>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d108      	bne.n	8004236 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <I2C_Master_ADD10+0x48>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004244:	605a      	str	r2, [r3, #4]
  }
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004252:	b480      	push	{r7}
 8004254:	b091      	sub	sp, #68	@ 0x44
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004260:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b22      	cmp	r3, #34	@ 0x22
 800427a:	f040 8169 	bne.w	8004550 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <I2C_Master_ADDR+0x54>
 8004286:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d10b      	bne.n	80042a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428e:	2300      	movs	r3, #0
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	e160      	b.n	8004568 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <I2C_Master_ADDR+0x98>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042b6:	d118      	bne.n	80042ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b8:	2300      	movs	r3, #0
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80042e8:	e13e      	b.n	8004568 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e115      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	f040 808a 	bne.w	800443c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800432e:	d137      	bne.n	80043a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434e:	d113      	bne.n	8004378 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800435e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	e0e7      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	623b      	str	r3, [r7, #32]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e0d3      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d02e      	beq.n	8004404 <I2C_Master_ADDR+0x1b2>
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d02b      	beq.n	8004404 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ae:	2b12      	cmp	r3, #18
 80043b0:	d102      	bne.n	80043b8 <I2C_Master_ADDR+0x166>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d125      	bne.n	8004404 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00e      	beq.n	80043dc <I2C_Master_ADDR+0x18a>
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d00b      	beq.n	80043dc <I2C_Master_ADDR+0x18a>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d008      	beq.n	80043dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e007      	b.n	80043ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	e0a1      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004412:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e085      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d14d      	bne.n	80044e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b04      	cmp	r3, #4
 800444a:	d016      	beq.n	800447a <I2C_Master_ADDR+0x228>
 800444c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444e:	2b02      	cmp	r3, #2
 8004450:	d013      	beq.n	800447a <I2C_Master_ADDR+0x228>
 8004452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004454:	2b10      	cmp	r3, #16
 8004456:	d010      	beq.n	800447a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004466:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e007      	b.n	800448a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004488:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004498:	d117      	bne.n	80044ca <I2C_Master_ADDR+0x278>
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044a0:	d00b      	beq.n	80044ba <I2C_Master_ADDR+0x268>
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d008      	beq.n	80044ba <I2C_Master_ADDR+0x268>
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d005      	beq.n	80044ba <I2C_Master_ADDR+0x268>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d002      	beq.n	80044ba <I2C_Master_ADDR+0x268>
 80044b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d107      	bne.n	80044ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	e032      	b.n	8004548 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004500:	d117      	bne.n	8004532 <I2C_Master_ADDR+0x2e0>
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004508:	d00b      	beq.n	8004522 <I2C_Master_ADDR+0x2d0>
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	2b01      	cmp	r3, #1
 800450e:	d008      	beq.n	8004522 <I2C_Master_ADDR+0x2d0>
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	2b08      	cmp	r3, #8
 8004514:	d005      	beq.n	8004522 <I2C_Master_ADDR+0x2d0>
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	2b10      	cmp	r3, #16
 800451a:	d002      	beq.n	8004522 <I2C_Master_ADDR+0x2d0>
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	2b20      	cmp	r3, #32
 8004520:	d107      	bne.n	8004532 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004530:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800454e:	e00b      	b.n	8004568 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	e7ff      	b.n	8004568 <I2C_Master_ADDR+0x316>
 8004568:	bf00      	nop
 800456a:	3744      	adds	r7, #68	@ 0x44
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004582:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02b      	beq.n	80045e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d114      	bne.n	80045e6 <I2C_SlaveTransmit_TXE+0x72>
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b29      	cmp	r3, #41	@ 0x29
 80045c0:	d111      	bne.n	80045e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2221      	movs	r2, #33	@ 0x21
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2228      	movs	r2, #40	@ 0x28
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff f9cb 	bl	800397c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d011      	beq.n	8004624 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d02c      	beq.n	80046a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d114      	bne.n	80046a4 <I2C_SlaveReceive_RXNE+0x74>
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b2a      	cmp	r3, #42	@ 0x2a
 800467e:	d111      	bne.n	80046a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2222      	movs	r2, #34	@ 0x22
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2228      	movs	r2, #40	@ 0x28
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff f976 	bl	8003990 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d012      	beq.n	80046e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800470a:	2b28      	cmp	r3, #40	@ 0x28
 800470c:	d125      	bne.n	800475a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	81bb      	strh	r3, [r7, #12]
 800473c:	e002      	b.n	8004744 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800474c:	89ba      	ldrh	r2, [r7, #12]
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff f926 	bl	80039a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004758:	e00e      	b.n	8004778 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800479e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047dc:	d172      	bne.n	80048c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b22      	cmp	r3, #34	@ 0x22
 80047e2:	d002      	beq.n	80047ea <I2C_Slave_STOPF+0x6a>
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e8:	d135      	bne.n	8004856 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f043 0204 	orr.w	r2, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800481c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f87a 	bl	800291c <HAL_DMA_GetState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d049      	beq.n	80048c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	4a69      	ldr	r2, [pc, #420]	@ (80049d8 <I2C_Slave_STOPF+0x258>)
 8004834:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fec2 	bl	80025c4 <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d03d      	beq.n	80048c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004850:	4610      	mov	r0, r2
 8004852:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004854:	e035      	b.n	80048c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f043 0204 	orr.w	r2, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004888:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe f844 	bl	800291c <HAL_DMA_GetState>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d014      	beq.n	80048c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489e:	4a4e      	ldr	r2, [pc, #312]	@ (80049d8 <I2C_Slave_STOPF+0x258>)
 80048a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fe8c 	bl	80025c4 <HAL_DMA_Abort_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
 80048c0:	e000      	b.n	80048c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d03e      	beq.n	800494c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d112      	bne.n	8004902 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d112      	bne.n	8004936 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8b7 	bl	8004ac8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800495a:	e039      	b.n	80049d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004960:	d109      	bne.n	8004976 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2228      	movs	r2, #40	@ 0x28
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff f80d 	bl	8003990 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b28      	cmp	r3, #40	@ 0x28
 8004980:	d111      	bne.n	80049a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <I2C_Slave_STOPF+0x25c>)
 8004986:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff f80e 	bl	80039c0 <HAL_I2C_ListenCpltCallback>
}
 80049a4:	e014      	b.n	80049d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	2b22      	cmp	r3, #34	@ 0x22
 80049ac:	d002      	beq.n	80049b4 <I2C_Slave_STOPF+0x234>
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b22      	cmp	r3, #34	@ 0x22
 80049b2:	d10d      	bne.n	80049d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fe ffe0 	bl	8003990 <HAL_I2C_SlaveRxCpltCallback>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08004e31 	.word	0x08004e31
 80049dc:	ffff0000 	.word	0xffff0000

080049e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d002      	beq.n	8004a02 <I2C_Slave_AF+0x22>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d129      	bne.n	8004a56 <I2C_Slave_AF+0x76>
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b28      	cmp	r3, #40	@ 0x28
 8004a06:	d126      	bne.n	8004a56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <I2C_Slave_AF+0xe4>)
 8004a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe ffb6 	bl	80039c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a54:	e031      	b.n	8004aba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b21      	cmp	r3, #33	@ 0x21
 8004a5a:	d129      	bne.n	8004ab0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <I2C_Slave_AF+0xe4>)
 8004a60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2221      	movs	r2, #33	@ 0x21
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe fb22 	bl	80030ec <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe ff67 	bl	800397c <HAL_I2C_SlaveTxCpltCallback>
}
 8004aae:	e004      	b.n	8004aba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ab8:	615a      	str	r2, [r3, #20]
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ade:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d002      	beq.n	8004aec <I2C_ITError+0x24>
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	2b40      	cmp	r3, #64	@ 0x40
 8004aea:	d10a      	bne.n	8004b02 <I2C_ITError+0x3a>
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b22      	cmp	r3, #34	@ 0x22
 8004af0:	d107      	bne.n	8004b02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b08:	2b28      	cmp	r3, #40	@ 0x28
 8004b0a:	d107      	bne.n	8004b1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2228      	movs	r2, #40	@ 0x28
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b1a:	e015      	b.n	8004b48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2a:	d00a      	beq.n	8004b42 <I2C_ITError+0x7a>
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b60      	cmp	r3, #96	@ 0x60
 8004b30:	d007      	beq.n	8004b42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b56:	d162      	bne.n	8004c1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d020      	beq.n	8004bb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d24 <I2C_ITError+0x25c>)
 8004b7c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fd fd1e 	bl	80025c4 <HAL_DMA_Abort_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8089 	beq.w	8004ca2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4798      	blx	r3
 8004bb6:	e074      	b.n	8004ca2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	4a59      	ldr	r2, [pc, #356]	@ (8004d24 <I2C_ITError+0x25c>)
 8004bbe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fcfd 	bl	80025c4 <HAL_DMA_Abort_IT>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d068      	beq.n	8004ca2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bda:	2b40      	cmp	r3, #64	@ 0x40
 8004bdc:	d10b      	bne.n	8004bf6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4798      	blx	r3
 8004c1c:	e041      	b.n	8004ca2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b60      	cmp	r3, #96	@ 0x60
 8004c28:	d125      	bne.n	8004c76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d10b      	bne.n	8004c5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fe fece 	bl	8003a10 <HAL_I2C_AbortCpltCallback>
 8004c74:	e015      	b.n	8004ca2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d10b      	bne.n	8004c9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fe fead 	bl	80039fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10e      	bne.n	8004cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d113      	bne.n	8004d1c <I2C_ITError+0x254>
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b28      	cmp	r3, #40	@ 0x28
 8004cf8:	d110      	bne.n	8004d1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004d28 <I2C_ITError+0x260>)
 8004cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe fe52 	bl	80039c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	08004e31 	.word	0x08004e31
 8004d28:	ffff0000 	.word	0xffff0000

08004d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d006      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d003      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d54:	d108      	bne.n	8004d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e00b      	b.n	8004d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6c:	2b12      	cmp	r3, #18
 8004d6e:	d107      	bne.n	8004d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f8f7 	bl	8004f80 <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da6:	d103      	bne.n	8004db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e035      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dbc:	d108      	bne.n	8004dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	e01b      	b.n	8004e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	11db      	asrs	r3, r3, #7
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f063 030f 	orn	r3, r3, #15
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	490e      	ldr	r1, [pc, #56]	@ (8004e28 <I2C_MasterRequestWrite+0xfc>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f940 	bl	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e010      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4907      	ldr	r1, [pc, #28]	@ (8004e2c <I2C_MasterRequestWrite+0x100>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f930 	bl	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00010008 	.word	0x00010008
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f78 <I2C_DMAAbort+0x148>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <I2C_DMAAbort+0x14c>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	0a1a      	lsrs	r2, r3, #8
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00da      	lsls	r2, r3, #3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e76:	e00a      	b.n	8004e8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e8c:	d0ea      	beq.n	8004e64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	2200      	movs	r2, #0
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ebc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b60      	cmp	r3, #96	@ 0x60
 8004efe:	d10e      	bne.n	8004f1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f16:	6978      	ldr	r0, [r7, #20]
 8004f18:	f7fe fd7a 	bl	8003a10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f1c:	e027      	b.n	8004f6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f24:	2b28      	cmp	r3, #40	@ 0x28
 8004f26:	d117      	bne.n	8004f58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2228      	movs	r2, #40	@ 0x28
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f56:	e007      	b.n	8004f68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f68:	6978      	ldr	r0, [r7, #20]
 8004f6a:	f7fe fd47 	bl	80039fc <HAL_I2C_ErrorCallback>
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	14f8b589 	.word	0x14f8b589

08004f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f90:	e048      	b.n	8005024 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d044      	beq.n	8005024 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9a:	f7fc fcc9 	bl	8001930 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d139      	bne.n	8005024 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d10d      	bne.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	e00c      	b.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	43da      	mvns	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d116      	bne.n	8005024 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e023      	b.n	800506c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10d      	bne.n	800504a <I2C_WaitOnFlagUntilTimeout+0xca>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	43da      	mvns	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	e00c      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	43da      	mvns	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	429a      	cmp	r2, r3
 8005068:	d093      	beq.n	8004f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005082:	e071      	b.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005092:	d123      	bne.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	f043 0204 	orr.w	r2, r3, #4
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e067      	b.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d041      	beq.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fc fc24 	bl	8001930 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d136      	bne.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4013      	ands	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e00b      	b.n	8005136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	43da      	mvns	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e021      	b.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10c      	bne.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	43da      	mvns	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e00b      	b.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	43da      	mvns	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f47f af6d 	bne.w	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c0:	e034      	b.n	800522c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f8b8 	bl	8005338 <I2C_IsAcknowledgeFailed>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e034      	b.n	800523c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d028      	beq.n	800522c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc fba9 	bl	8001930 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11d      	bne.n	800522c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fa:	2b80      	cmp	r3, #128	@ 0x80
 80051fc:	d016      	beq.n	800522c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e007      	b.n	800523c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005236:	2b80      	cmp	r3, #128	@ 0x80
 8005238:	d1c3      	bne.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005250:	e034      	b.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f870 	bl	8005338 <I2C_IsAcknowledgeFailed>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e034      	b.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d028      	beq.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526a:	f7fc fb61 	bl	8001930 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11d      	bne.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d016      	beq.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e007      	b.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d1c3      	bne.n	8005252 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e0:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	4a13      	ldr	r2, [pc, #76]	@ (8005334 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0a1a      	lsrs	r2, r3, #8
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e008      	b.n	8005324 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800531c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005320:	d0e9      	beq.n	80052f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000000 	.word	0x20000000
 8005334:	14f8b589 	.word	0x14f8b589

08005338 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534e:	d11b      	bne.n	8005388 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005358:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	f043 0204 	orr.w	r2, r3, #4
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053a6:	d103      	bne.n	80053b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053ae:	e007      	b.n	80053c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053b8:	d102      	bne.n	80053c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2208      	movs	r2, #8
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e267      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d075      	beq.n	80054d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053ea:	4b88      	ldr	r3, [pc, #544]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d00c      	beq.n	8005410 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f6:	4b85      	ldr	r3, [pc, #532]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005402:	4b82      	ldr	r3, [pc, #520]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800540e:	d10b      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	4b7e      	ldr	r3, [pc, #504]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05b      	beq.n	80054d4 <HAL_RCC_OscConfig+0x108>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d157      	bne.n	80054d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e242      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	d106      	bne.n	8005440 <HAL_RCC_OscConfig+0x74>
 8005432:	4b76      	ldr	r3, [pc, #472]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a75      	ldr	r2, [pc, #468]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b70      	ldr	r3, [pc, #448]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6f      	ldr	r2, [pc, #444]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b6d      	ldr	r3, [pc, #436]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6c      	ldr	r2, [pc, #432]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005464:	4b69      	ldr	r3, [pc, #420]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a68      	ldr	r2, [pc, #416]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b66      	ldr	r3, [pc, #408]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a65      	ldr	r2, [pc, #404]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fc fa54 	bl	8001930 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fc fa50 	bl	8001930 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e207      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b5b      	ldr	r3, [pc, #364]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xc0>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fc fa40 	bl	8001930 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fc fa3c 	bl	8001930 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1f3      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	4b51      	ldr	r3, [pc, #324]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0xe8>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d063      	beq.n	80055aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054e2:	4b4a      	ldr	r3, [pc, #296]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ee:	4b47      	ldr	r3, [pc, #284]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fa:	4b44      	ldr	r3, [pc, #272]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	4b41      	ldr	r3, [pc, #260]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1c7      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b3b      	ldr	r3, [pc, #236]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4937      	ldr	r1, [pc, #220]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	e03a      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553c:	4b34      	ldr	r3, [pc, #208]	@ (8005610 <HAL_RCC_OscConfig+0x244>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fc f9f5 	bl	8001930 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554a:	f7fc f9f1 	bl	8001930 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1a8      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	4b2b      	ldr	r3, [pc, #172]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b28      	ldr	r3, [pc, #160]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4925      	ldr	r1, [pc, #148]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b24      	ldr	r3, [pc, #144]	@ (8005610 <HAL_RCC_OscConfig+0x244>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc f9d4 	bl	8001930 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558c:	f7fc f9d0 	bl	8001930 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e187      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	4b1b      	ldr	r3, [pc, #108]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d036      	beq.n	8005624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <HAL_RCC_OscConfig+0x248>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc f9b4 	bl	8001930 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fc f9b0 	bl	8001930 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e167      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <HAL_RCC_OscConfig+0x240>)
 80055e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x200>
 80055ea:	e01b      	b.n	8005624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCC_OscConfig+0x248>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f2:	f7fc f99d 	bl	8001930 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	e00e      	b.n	8005618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fc f999 	bl	8001930 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d907      	bls.n	8005618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e150      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
 800560c:	40023800 	.word	0x40023800
 8005610:	42470000 	.word	0x42470000
 8005614:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	4b88      	ldr	r3, [pc, #544]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 800561a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ea      	bne.n	80055fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8097 	beq.w	8005760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005636:	4b81      	ldr	r3, [pc, #516]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	4b7d      	ldr	r3, [pc, #500]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	4a7c      	ldr	r2, [pc, #496]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	@ 0x40
 8005652:	4b7a      	ldr	r3, [pc, #488]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005662:	4b77      	ldr	r3, [pc, #476]	@ (8005840 <HAL_RCC_OscConfig+0x474>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566e:	4b74      	ldr	r3, [pc, #464]	@ (8005840 <HAL_RCC_OscConfig+0x474>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a73      	ldr	r2, [pc, #460]	@ (8005840 <HAL_RCC_OscConfig+0x474>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567a:	f7fc f959 	bl	8001930 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fc f955 	bl	8001930 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e10c      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCC_OscConfig+0x474>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x2ea>
 80056a8:	4b64      	ldr	r3, [pc, #400]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ac:	4a63      	ldr	r2, [pc, #396]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b4:	e01c      	b.n	80056f0 <HAL_RCC_OscConfig+0x324>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x30c>
 80056be:	4b5f      	ldr	r3, [pc, #380]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	4a5e      	ldr	r2, [pc, #376]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ca:	4b5c      	ldr	r3, [pc, #368]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	4a5b      	ldr	r2, [pc, #364]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0x324>
 80056d8:	4b58      	ldr	r3, [pc, #352]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056dc:	4a57      	ldr	r2, [pc, #348]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056e4:	4b55      	ldr	r3, [pc, #340]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e8:	4a54      	ldr	r2, [pc, #336]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80056ea:	f023 0304 	bic.w	r3, r3, #4
 80056ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fc f91a 	bl	8001930 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fe:	e00a      	b.n	8005716 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005700:	f7fc f916 	bl	8001930 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e0cb      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	4b49      	ldr	r3, [pc, #292]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ee      	beq.n	8005700 <HAL_RCC_OscConfig+0x334>
 8005722:	e014      	b.n	800574e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005724:	f7fc f904 	bl	8001930 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572a:	e00a      	b.n	8005742 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fc f900 	bl	8001930 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0b5      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005742:	4b3e      	ldr	r3, [pc, #248]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ee      	bne.n	800572c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005754:	4b39      	ldr	r3, [pc, #228]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	4a38      	ldr	r2, [pc, #224]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800575e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a1 	beq.w	80058ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800576a:	4b34      	ldr	r3, [pc, #208]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b08      	cmp	r3, #8
 8005774:	d05c      	beq.n	8005830 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d141      	bne.n	8005802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577e:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <HAL_RCC_OscConfig+0x478>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fc f8d4 	bl	8001930 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578c:	f7fc f8d0 	bl	8001930 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e087      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	3b01      	subs	r3, #1
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	491b      	ldr	r1, [pc, #108]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <HAL_RCC_OscConfig+0x478>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fc f8a9 	bl	8001930 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fc f8a5 	bl	8001930 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e05c      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	4b11      	ldr	r3, [pc, #68]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x416>
 8005800:	e054      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <HAL_RCC_OscConfig+0x478>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fc f892 	bl	8001930 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005810:	f7fc f88e 	bl	8001930 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e045      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_OscConfig+0x470>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x444>
 800582e:	e03d      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e038      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
 800583c:	40023800 	.word	0x40023800
 8005840:	40007000 	.word	0x40007000
 8005844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005848:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <HAL_RCC_OscConfig+0x4ec>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d028      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d121      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d11a      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800587e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	3b01      	subs	r3, #1
 8005892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800

080058bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0cc      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b68      	ldr	r3, [pc, #416]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90c      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b65      	ldr	r3, [pc, #404]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b63      	ldr	r3, [pc, #396]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0b8      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005910:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a58      	ldr	r2, [pc, #352]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800591a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005928:	4b53      	ldr	r3, [pc, #332]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a52      	ldr	r2, [pc, #328]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005934:	4b50      	ldr	r3, [pc, #320]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	494d      	ldr	r1, [pc, #308]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d044      	beq.n	80059dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595a:	4b47      	ldr	r3, [pc, #284]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d119      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e07f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d003      	beq.n	800597a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e06f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e067      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b37      	ldr	r3, [pc, #220]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4934      	ldr	r1, [pc, #208]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fb ffc0 	bl	8001930 <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fb ffbc 	bl	8001930 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e04f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059dc:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d20c      	bcs.n	8005a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b22      	ldr	r3, [pc, #136]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b20      	ldr	r3, [pc, #128]	@ (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e032      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a10:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4916      	ldr	r1, [pc, #88]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2e:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	490e      	ldr	r1, [pc, #56]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a42:	f000 f821 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a46:	4602      	mov	r2, r0
 8005a48:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	490a      	ldr	r1, [pc, #40]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	5ccb      	ldrb	r3, [r1, r3]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a5e:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <HAL_RCC_ClockConfig+0x1c8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fb ff20 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023c00 	.word	0x40023c00
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	08007e94 	.word	0x08007e94
 8005a80:	20000000 	.word	0x20000000
 8005a84:	20000004 	.word	0x20000004

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a8c:	b094      	sub	sp, #80	@ 0x50
 8005a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa0:	4b79      	ldr	r3, [pc, #484]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d00d      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	f200 80e1 	bhi.w	8005c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x34>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aba:	e0db      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4b73      	ldr	r3, [pc, #460]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac0:	e0db      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac2:	4b73      	ldr	r3, [pc, #460]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac6:	e0d8      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d063      	beq.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ade:	4b6a      	ldr	r3, [pc, #424]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f04f 0000 	mov.w	r0, #0
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	0159      	lsls	r1, r3, #5
 8005b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b0c:	0150      	lsls	r0, r2, #5
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4621      	mov	r1, r4
 8005b14:	1a51      	subs	r1, r2, r1
 8005b16:	6139      	str	r1, [r7, #16]
 8005b18:	4629      	mov	r1, r5
 8005b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	018b      	lsls	r3, r1, #6
 8005b30:	4651      	mov	r1, sl
 8005b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b36:	4651      	mov	r1, sl
 8005b38:	018a      	lsls	r2, r1, #6
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b40:	4659      	mov	r1, fp
 8005b42:	eb63 0901 	sbc.w	r9, r3, r1
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5a:	4690      	mov	r8, r2
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	eb18 0303 	adds.w	r3, r8, r3
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	462b      	mov	r3, r5
 8005b68:	eb49 0303 	adc.w	r3, r9, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	024b      	lsls	r3, r1, #9
 8005b7e:	4621      	mov	r1, r4
 8005b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b84:	4621      	mov	r1, r4
 8005b86:	024a      	lsls	r2, r1, #9
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8e:	2200      	movs	r2, #0
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b98:	f7fa fe58 	bl	800084c <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba4:	e058      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba6:	4b38      	ldr	r3, [pc, #224]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	2200      	movs	r2, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	f04f 0000 	mov.w	r0, #0
 8005bc8:	f04f 0100 	mov.w	r1, #0
 8005bcc:	0159      	lsls	r1, r3, #5
 8005bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd2:	0150      	lsls	r0, r2, #5
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4641      	mov	r1, r8
 8005bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bde:	4649      	mov	r1, r9
 8005be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	00eb      	lsls	r3, r5, #3
 8005c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c0e:	00e2      	lsls	r2, r4, #3
 8005c10:	4614      	mov	r4, r2
 8005c12:	461d      	mov	r5, r3
 8005c14:	4643      	mov	r3, r8
 8005c16:	18e3      	adds	r3, r4, r3
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	eb45 0303 	adc.w	r3, r5, r3
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	028b      	lsls	r3, r1, #10
 8005c32:	4621      	mov	r1, r4
 8005c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c38:	4621      	mov	r1, r4
 8005c3a:	028a      	lsls	r2, r1, #10
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c42:	2200      	movs	r2, #0
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	61fa      	str	r2, [r7, #28]
 8005c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c4c:	f7fa fdfe 	bl	800084c <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3750      	adds	r7, #80	@ 0x50
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	007a1200 	.word	0x007a1200

08005c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000000 	.word	0x20000000

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb0:	f7ff fff0 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a9b      	lsrs	r3, r3, #10
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	08007ea4 	.word	0x08007ea4

08005cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cd8:	f7ff ffdc 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	@ (8005cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	08007ea4 	.word	0x08007ea4

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fc06 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 f950 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e03c      	b.n	8005e2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e3c <HAL_TIM_Base_Start+0xa0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dce:	d013      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e40 <HAL_TIM_Base_Start+0xa4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <HAL_TIM_Base_Start+0xa8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <HAL_TIM_Base_Start+0xac>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a16      	ldr	r2, [pc, #88]	@ (8005e4c <HAL_TIM_Base_Start+0xb0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d111      	bne.n	8005e1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d010      	beq.n	8005e2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e007      	b.n	8005e2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40014000 	.word	0x40014000

08005e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0b4      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x186>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea4:	d03e      	beq.n	8005f24 <HAL_TIM_ConfigClockSource+0xd4>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eaa:	f200 8087 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x172>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eba:	d87f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b70      	cmp	r3, #112	@ 0x70
 8005ebe:	d01a      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ec0:	2b70      	cmp	r3, #112	@ 0x70
 8005ec2:	d87b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b60      	cmp	r3, #96	@ 0x60
 8005ec6:	d050      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x11a>
 8005ec8:	2b60      	cmp	r3, #96	@ 0x60
 8005eca:	d877      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b50      	cmp	r3, #80	@ 0x50
 8005ece:	d03c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xfa>
 8005ed0:	2b50      	cmp	r3, #80	@ 0x50
 8005ed2:	d873      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d058      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x13a>
 8005ed8:	2b40      	cmp	r3, #64	@ 0x40
 8005eda:	d86f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b30      	cmp	r3, #48	@ 0x30
 8005ede:	d064      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ee0:	2b30      	cmp	r3, #48	@ 0x30
 8005ee2:	d86b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d060      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d867      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d05a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ef4:	e062      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f06:	f000 f971 	bl	80061ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	609a      	str	r2, [r3, #8]
      break;
 8005f22:	e04f      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f34:	f000 f95a 	bl	80061ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e03c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 f8ce 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2150      	movs	r1, #80	@ 0x50
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f927 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f68:	e02c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 f8ed 	bl	8006156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2160      	movs	r1, #96	@ 0x60
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f917 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f88:	e01c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 f8ae 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2140      	movs	r1, #64	@ 0x40
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f907 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e00c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f000 f8fe 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005fba:	e003      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80060dc <TIM_Base_SetConfig+0xfc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00f      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a37      	ldr	r2, [pc, #220]	@ (80060e0 <TIM_Base_SetConfig+0x100>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a36      	ldr	r2, [pc, #216]	@ (80060e4 <TIM_Base_SetConfig+0x104>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a35      	ldr	r2, [pc, #212]	@ (80060e8 <TIM_Base_SetConfig+0x108>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2b      	ldr	r2, [pc, #172]	@ (80060dc <TIM_Base_SetConfig+0xfc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01b      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d017      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a28      	ldr	r2, [pc, #160]	@ (80060e0 <TIM_Base_SetConfig+0x100>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a27      	ldr	r2, [pc, #156]	@ (80060e4 <TIM_Base_SetConfig+0x104>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <TIM_Base_SetConfig+0x108>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a25      	ldr	r2, [pc, #148]	@ (80060ec <TIM_Base_SetConfig+0x10c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a24      	ldr	r2, [pc, #144]	@ (80060f0 <TIM_Base_SetConfig+0x110>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a23      	ldr	r2, [pc, #140]	@ (80060f4 <TIM_Base_SetConfig+0x114>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a0e      	ldr	r2, [pc, #56]	@ (80060dc <TIM_Base_SetConfig+0xfc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]
  }
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f023 0210 	bic.w	r2, r3, #16
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f043 0307 	orr.w	r3, r3, #7
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e050      	b.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d018      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006290:	d013      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a13      	ldr	r2, [pc, #76]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10c      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40014000 	.word	0x40014000

08006308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e042      	b.n	80063a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb f922 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2224      	movs	r2, #36	@ 0x24
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800634a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f973 	bl	8006638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	@ 0x28
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d175      	bne.n	80064b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Transmit+0x2c>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e06e      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2221      	movs	r2, #33	@ 0x21
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e6:	f7fb faa3 	bl	8001930 <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006400:	d108      	bne.n	8006414 <HAL_UART_Transmit+0x6c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e003      	b.n	800641c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800641c:	e02e      	b.n	800647c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	2180      	movs	r1, #128	@ 0x80
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f848 	bl	80064be <UART_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e03a      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3302      	adds	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e007      	b.n	800646e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1cb      	bne.n	800641e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2200      	movs	r2, #0
 800648e:	2140      	movs	r1, #64	@ 0x40
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f814 	bl	80064be <UART_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ce:	e03b      	b.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d037      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d8:	f7fb fa2a 	bl	8001930 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <UART_WaitOnFlagUntilTimeout+0x30>
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e03a      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d023      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b80      	cmp	r3, #128	@ 0x80
 8006504:	d020      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d01d      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b08      	cmp	r3, #8
 8006518:	d116      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f81d 	bl	8006570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2208      	movs	r2, #8
 800653a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e00f      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	d0b4      	beq.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b095      	sub	sp, #84	@ 0x54
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006598:	643a      	str	r2, [r7, #64]	@ 0x40
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800659e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e5      	bne.n	80065ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d119      	bne.n	800661c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006608:	61ba      	str	r2, [r7, #24]
 800660a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6979      	ldr	r1, [r7, #20]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	613b      	str	r3, [r7, #16]
   return(result);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800662a:	bf00      	nop
 800662c:	3754      	adds	r7, #84	@ 0x54
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b0c0      	sub	sp, #256	@ 0x100
 800663e:	af00      	add	r7, sp, #0
 8006640:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	68d9      	ldr	r1, [r3, #12]
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	ea40 0301 	orr.w	r3, r0, r1
 8006660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	431a      	orrs	r2, r3
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	431a      	orrs	r2, r3
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006690:	f021 010c 	bic.w	r1, r1, #12
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800669e:	430b      	orrs	r3, r1
 80066a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b2:	6999      	ldr	r1, [r3, #24]
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	ea40 0301 	orr.w	r3, r0, r1
 80066be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b8f      	ldr	r3, [pc, #572]	@ (8006904 <UART_SetConfig+0x2cc>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d005      	beq.n	80066d8 <UART_SetConfig+0xa0>
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b8d      	ldr	r3, [pc, #564]	@ (8006908 <UART_SetConfig+0x2d0>)
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d104      	bne.n	80066e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d8:	f7ff fafc 	bl	8005cd4 <HAL_RCC_GetPCLK2Freq>
 80066dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066e0:	e003      	b.n	80066ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066e2:	f7ff fae3 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80066e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f4:	f040 810c 	bne.w	8006910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006702:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800670a:	4622      	mov	r2, r4
 800670c:	462b      	mov	r3, r5
 800670e:	1891      	adds	r1, r2, r2
 8006710:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006712:	415b      	adcs	r3, r3
 8006714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800671a:	4621      	mov	r1, r4
 800671c:	eb12 0801 	adds.w	r8, r2, r1
 8006720:	4629      	mov	r1, r5
 8006722:	eb43 0901 	adc.w	r9, r3, r1
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800673a:	4690      	mov	r8, r2
 800673c:	4699      	mov	r9, r3
 800673e:	4623      	mov	r3, r4
 8006740:	eb18 0303 	adds.w	r3, r8, r3
 8006744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006748:	462b      	mov	r3, r5
 800674a:	eb49 0303 	adc.w	r3, r9, r3
 800674e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800675e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006766:	460b      	mov	r3, r1
 8006768:	18db      	adds	r3, r3, r3
 800676a:	653b      	str	r3, [r7, #80]	@ 0x50
 800676c:	4613      	mov	r3, r2
 800676e:	eb42 0303 	adc.w	r3, r2, r3
 8006772:	657b      	str	r3, [r7, #84]	@ 0x54
 8006774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800677c:	f7fa f866 	bl	800084c <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4b61      	ldr	r3, [pc, #388]	@ (800690c <UART_SetConfig+0x2d4>)
 8006786:	fba3 2302 	umull	r2, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	011c      	lsls	r4, r3, #4
 800678e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006792:	2200      	movs	r2, #0
 8006794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006798:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800679c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	1891      	adds	r1, r2, r2
 80067a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067a8:	415b      	adcs	r3, r3
 80067aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067b0:	4641      	mov	r1, r8
 80067b2:	eb12 0a01 	adds.w	sl, r2, r1
 80067b6:	4649      	mov	r1, r9
 80067b8:	eb43 0b01 	adc.w	fp, r3, r1
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d0:	4692      	mov	sl, r2
 80067d2:	469b      	mov	fp, r3
 80067d4:	4643      	mov	r3, r8
 80067d6:	eb1a 0303 	adds.w	r3, sl, r3
 80067da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067de:	464b      	mov	r3, r9
 80067e0:	eb4b 0303 	adc.w	r3, fp, r3
 80067e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067fc:	460b      	mov	r3, r1
 80067fe:	18db      	adds	r3, r3, r3
 8006800:	643b      	str	r3, [r7, #64]	@ 0x40
 8006802:	4613      	mov	r3, r2
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	647b      	str	r3, [r7, #68]	@ 0x44
 800680a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800680e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006812:	f7fa f81b 	bl	800084c <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4611      	mov	r1, r2
 800681c:	4b3b      	ldr	r3, [pc, #236]	@ (800690c <UART_SetConfig+0x2d4>)
 800681e:	fba3 2301 	umull	r2, r3, r3, r1
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2264      	movs	r2, #100	@ 0x64
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	1acb      	subs	r3, r1, r3
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <UART_SetConfig+0x2d4>)
 8006834:	fba3 2302 	umull	r2, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006840:	441c      	add	r4, r3
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800684c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	1891      	adds	r1, r2, r2
 800685a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800685c:	415b      	adcs	r3, r3
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006864:	4641      	mov	r1, r8
 8006866:	1851      	adds	r1, r2, r1
 8006868:	6339      	str	r1, [r7, #48]	@ 0x30
 800686a:	4649      	mov	r1, r9
 800686c:	414b      	adcs	r3, r1
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800687c:	4659      	mov	r1, fp
 800687e:	00cb      	lsls	r3, r1, #3
 8006880:	4651      	mov	r1, sl
 8006882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006886:	4651      	mov	r1, sl
 8006888:	00ca      	lsls	r2, r1, #3
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	4603      	mov	r3, r0
 8006890:	4642      	mov	r2, r8
 8006892:	189b      	adds	r3, r3, r2
 8006894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006898:	464b      	mov	r3, r9
 800689a:	460a      	mov	r2, r1
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068b8:	460b      	mov	r3, r1
 80068ba:	18db      	adds	r3, r3, r3
 80068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068be:	4613      	mov	r3, r2
 80068c0:	eb42 0303 	adc.w	r3, r2, r3
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068ce:	f7f9 ffbd 	bl	800084c <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <UART_SetConfig+0x2d4>)
 80068d8:	fba3 1302 	umull	r1, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2164      	movs	r1, #100	@ 0x64
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	3332      	adds	r3, #50	@ 0x32
 80068ea:	4a08      	ldr	r2, [pc, #32]	@ (800690c <UART_SetConfig+0x2d4>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 0207 	and.w	r2, r3, #7
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4422      	add	r2, r4
 80068fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006900:	e106      	b.n	8006b10 <UART_SetConfig+0x4d8>
 8006902:	bf00      	nop
 8006904:	40011000 	.word	0x40011000
 8006908:	40011400 	.word	0x40011400
 800690c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800691a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800691e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006922:	4642      	mov	r2, r8
 8006924:	464b      	mov	r3, r9
 8006926:	1891      	adds	r1, r2, r2
 8006928:	6239      	str	r1, [r7, #32]
 800692a:	415b      	adcs	r3, r3
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
 800692e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006932:	4641      	mov	r1, r8
 8006934:	1854      	adds	r4, r2, r1
 8006936:	4649      	mov	r1, r9
 8006938:	eb43 0501 	adc.w	r5, r3, r1
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	00eb      	lsls	r3, r5, #3
 8006946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800694a:	00e2      	lsls	r2, r4, #3
 800694c:	4614      	mov	r4, r2
 800694e:	461d      	mov	r5, r3
 8006950:	4643      	mov	r3, r8
 8006952:	18e3      	adds	r3, r4, r3
 8006954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006958:	464b      	mov	r3, r9
 800695a:	eb45 0303 	adc.w	r3, r5, r3
 800695e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800696e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800697e:	4629      	mov	r1, r5
 8006980:	008b      	lsls	r3, r1, #2
 8006982:	4621      	mov	r1, r4
 8006984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006988:	4621      	mov	r1, r4
 800698a:	008a      	lsls	r2, r1, #2
 800698c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006990:	f7f9 ff5c 	bl	800084c <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4b60      	ldr	r3, [pc, #384]	@ (8006b1c <UART_SetConfig+0x4e4>)
 800699a:	fba3 2302 	umull	r2, r3, r3, r2
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	011c      	lsls	r4, r3, #4
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	1891      	adds	r1, r2, r2
 80069ba:	61b9      	str	r1, [r7, #24]
 80069bc:	415b      	adcs	r3, r3
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c4:	4641      	mov	r1, r8
 80069c6:	1851      	adds	r1, r2, r1
 80069c8:	6139      	str	r1, [r7, #16]
 80069ca:	4649      	mov	r1, r9
 80069cc:	414b      	adcs	r3, r1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069dc:	4659      	mov	r1, fp
 80069de:	00cb      	lsls	r3, r1, #3
 80069e0:	4651      	mov	r1, sl
 80069e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e6:	4651      	mov	r1, sl
 80069e8:	00ca      	lsls	r2, r1, #3
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	4642      	mov	r2, r8
 80069f2:	189b      	adds	r3, r3, r2
 80069f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069f8:	464b      	mov	r3, r9
 80069fa:	460a      	mov	r2, r1
 80069fc:	eb42 0303 	adc.w	r3, r2, r3
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	008b      	lsls	r3, r1, #2
 8006a20:	4641      	mov	r1, r8
 8006a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a26:	4641      	mov	r1, r8
 8006a28:	008a      	lsls	r2, r1, #2
 8006a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a2e:	f7f9 ff0d 	bl	800084c <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	4b38      	ldr	r3, [pc, #224]	@ (8006b1c <UART_SetConfig+0x4e4>)
 8006a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2264      	movs	r2, #100	@ 0x64
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	1acb      	subs	r3, r1, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	@ 0x32
 8006a4c:	4a33      	ldr	r2, [pc, #204]	@ (8006b1c <UART_SetConfig+0x4e4>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a58:	441c      	add	r4, r3
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a62:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	1891      	adds	r1, r2, r2
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	415b      	adcs	r3, r3
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a78:	4641      	mov	r1, r8
 8006a7a:	1851      	adds	r1, r2, r1
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	4649      	mov	r1, r9
 8006a80:	414b      	adcs	r3, r1
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a90:	4659      	mov	r1, fp
 8006a92:	00cb      	lsls	r3, r1, #3
 8006a94:	4651      	mov	r1, sl
 8006a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	00ca      	lsls	r2, r1, #3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aaa:	464b      	mov	r3, r9
 8006aac:	460a      	mov	r2, r1
 8006aae:	eb42 0303 	adc.w	r3, r2, r3
 8006ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006abe:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006acc:	4649      	mov	r1, r9
 8006ace:	008b      	lsls	r3, r1, #2
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	008a      	lsls	r2, r1, #2
 8006ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ade:	f7f9 feb5 	bl	800084c <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <UART_SetConfig+0x4e4>)
 8006ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	2164      	movs	r1, #100	@ 0x64
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	3332      	adds	r3, #50	@ 0x32
 8006afa:	4a08      	ldr	r2, [pc, #32]	@ (8006b1c <UART_SetConfig+0x4e4>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4422      	add	r2, r4
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b16:	46bd      	mov	sp, r7
 8006b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b1c:	51eb851f 	.word	0x51eb851f

08006b20 <std>:
 8006b20:	2300      	movs	r3, #0
 8006b22:	b510      	push	{r4, lr}
 8006b24:	4604      	mov	r4, r0
 8006b26:	e9c0 3300 	strd	r3, r3, [r0]
 8006b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2e:	6083      	str	r3, [r0, #8]
 8006b30:	8181      	strh	r1, [r0, #12]
 8006b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b34:	81c2      	strh	r2, [r0, #14]
 8006b36:	6183      	str	r3, [r0, #24]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	305c      	adds	r0, #92	@ 0x5c
 8006b3e:	f000 fa19 	bl	8006f74 <memset>
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x58>)
 8006b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x5c>)
 8006b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x60>)
 8006b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <std+0x64>)
 8006b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <std+0x68>)
 8006b54:	6224      	str	r4, [r4, #32]
 8006b56:	429c      	cmp	r4, r3
 8006b58:	d006      	beq.n	8006b68 <std+0x48>
 8006b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b5e:	4294      	cmp	r4, r2
 8006b60:	d002      	beq.n	8006b68 <std+0x48>
 8006b62:	33d0      	adds	r3, #208	@ 0xd0
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d105      	bne.n	8006b74 <std+0x54>
 8006b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b70:	f000 ba78 	b.w	8007064 <__retarget_lock_init_recursive>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	bf00      	nop
 8006b78:	08006dc5 	.word	0x08006dc5
 8006b7c:	08006de7 	.word	0x08006de7
 8006b80:	08006e1f 	.word	0x08006e1f
 8006b84:	08006e43 	.word	0x08006e43
 8006b88:	20000220 	.word	0x20000220

08006b8c <stdio_exit_handler>:
 8006b8c:	4a02      	ldr	r2, [pc, #8]	@ (8006b98 <stdio_exit_handler+0xc>)
 8006b8e:	4903      	ldr	r1, [pc, #12]	@ (8006b9c <stdio_exit_handler+0x10>)
 8006b90:	4803      	ldr	r0, [pc, #12]	@ (8006ba0 <stdio_exit_handler+0x14>)
 8006b92:	f000 b869 	b.w	8006c68 <_fwalk_sglue>
 8006b96:	bf00      	nop
 8006b98:	2000000c 	.word	0x2000000c
 8006b9c:	08007bb5 	.word	0x08007bb5
 8006ba0:	2000001c 	.word	0x2000001c

08006ba4 <cleanup_stdio>:
 8006ba4:	6841      	ldr	r1, [r0, #4]
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <cleanup_stdio+0x34>)
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	b510      	push	{r4, lr}
 8006bac:	4604      	mov	r4, r0
 8006bae:	d001      	beq.n	8006bb4 <cleanup_stdio+0x10>
 8006bb0:	f001 f800 	bl	8007bb4 <_fflush_r>
 8006bb4:	68a1      	ldr	r1, [r4, #8]
 8006bb6:	4b09      	ldr	r3, [pc, #36]	@ (8006bdc <cleanup_stdio+0x38>)
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <cleanup_stdio+0x1e>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fff9 	bl	8007bb4 <_fflush_r>
 8006bc2:	68e1      	ldr	r1, [r4, #12]
 8006bc4:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <cleanup_stdio+0x3c>)
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	d004      	beq.n	8006bd4 <cleanup_stdio+0x30>
 8006bca:	4620      	mov	r0, r4
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f000 bff0 	b.w	8007bb4 <_fflush_r>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000220 	.word	0x20000220
 8006bdc:	20000288 	.word	0x20000288
 8006be0:	200002f0 	.word	0x200002f0

08006be4 <global_stdio_init.part.0>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <global_stdio_init.part.0+0x30>)
 8006be8:	4c0b      	ldr	r4, [pc, #44]	@ (8006c18 <global_stdio_init.part.0+0x34>)
 8006bea:	4a0c      	ldr	r2, [pc, #48]	@ (8006c1c <global_stdio_init.part.0+0x38>)
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	f7ff ff94 	bl	8006b20 <std>
 8006bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2109      	movs	r1, #9
 8006c00:	f7ff ff8e 	bl	8006b20 <std>
 8006c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c08:	2202      	movs	r2, #2
 8006c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0e:	2112      	movs	r1, #18
 8006c10:	f7ff bf86 	b.w	8006b20 <std>
 8006c14:	20000358 	.word	0x20000358
 8006c18:	20000220 	.word	0x20000220
 8006c1c:	08006b8d 	.word	0x08006b8d

08006c20 <__sfp_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	@ (8006c28 <__sfp_lock_acquire+0x8>)
 8006c22:	f000 ba20 	b.w	8007066 <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	20000361 	.word	0x20000361

08006c2c <__sfp_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	@ (8006c34 <__sfp_lock_release+0x8>)
 8006c2e:	f000 ba1b 	b.w	8007068 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	20000361 	.word	0x20000361

08006c38 <__sinit>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f7ff fff0 	bl	8006c20 <__sfp_lock_acquire>
 8006c40:	6a23      	ldr	r3, [r4, #32]
 8006c42:	b11b      	cbz	r3, 8006c4c <__sinit+0x14>
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f7ff bff0 	b.w	8006c2c <__sfp_lock_release>
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__sinit+0x28>)
 8006c4e:	6223      	str	r3, [r4, #32]
 8006c50:	4b04      	ldr	r3, [pc, #16]	@ (8006c64 <__sinit+0x2c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f5      	bne.n	8006c44 <__sinit+0xc>
 8006c58:	f7ff ffc4 	bl	8006be4 <global_stdio_init.part.0>
 8006c5c:	e7f2      	b.n	8006c44 <__sinit+0xc>
 8006c5e:	bf00      	nop
 8006c60:	08006ba5 	.word	0x08006ba5
 8006c64:	20000358 	.word	0x20000358

08006c68 <_fwalk_sglue>:
 8006c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4688      	mov	r8, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	2600      	movs	r6, #0
 8006c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c78:	f1b9 0901 	subs.w	r9, r9, #1
 8006c7c:	d505      	bpl.n	8006c8a <_fwalk_sglue+0x22>
 8006c7e:	6824      	ldr	r4, [r4, #0]
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	d1f7      	bne.n	8006c74 <_fwalk_sglue+0xc>
 8006c84:	4630      	mov	r0, r6
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d907      	bls.n	8006ca0 <_fwalk_sglue+0x38>
 8006c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c94:	3301      	adds	r3, #1
 8006c96:	d003      	beq.n	8006ca0 <_fwalk_sglue+0x38>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	47c0      	blx	r8
 8006c9e:	4306      	orrs	r6, r0
 8006ca0:	3568      	adds	r5, #104	@ 0x68
 8006ca2:	e7e9      	b.n	8006c78 <_fwalk_sglue+0x10>

08006ca4 <iprintf>:
 8006ca4:	b40f      	push	{r0, r1, r2, r3}
 8006ca6:	b507      	push	{r0, r1, r2, lr}
 8006ca8:	4906      	ldr	r1, [pc, #24]	@ (8006cc4 <iprintf+0x20>)
 8006caa:	ab04      	add	r3, sp, #16
 8006cac:	6808      	ldr	r0, [r1, #0]
 8006cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb2:	6881      	ldr	r1, [r0, #8]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	f000 fc53 	bl	8007560 <_vfiprintf_r>
 8006cba:	b003      	add	sp, #12
 8006cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc0:	b004      	add	sp, #16
 8006cc2:	4770      	bx	lr
 8006cc4:	20000018 	.word	0x20000018

08006cc8 <_puts_r>:
 8006cc8:	6a03      	ldr	r3, [r0, #32]
 8006cca:	b570      	push	{r4, r5, r6, lr}
 8006ccc:	6884      	ldr	r4, [r0, #8]
 8006cce:	4605      	mov	r5, r0
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	b90b      	cbnz	r3, 8006cd8 <_puts_r+0x10>
 8006cd4:	f7ff ffb0 	bl	8006c38 <__sinit>
 8006cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cda:	07db      	lsls	r3, r3, #31
 8006cdc:	d405      	bmi.n	8006cea <_puts_r+0x22>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	0598      	lsls	r0, r3, #22
 8006ce2:	d402      	bmi.n	8006cea <_puts_r+0x22>
 8006ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ce6:	f000 f9be 	bl	8007066 <__retarget_lock_acquire_recursive>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	0719      	lsls	r1, r3, #28
 8006cee:	d502      	bpl.n	8006cf6 <_puts_r+0x2e>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d135      	bne.n	8006d62 <_puts_r+0x9a>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 f8e5 	bl	8006ec8 <__swsetup_r>
 8006cfe:	b380      	cbz	r0, 8006d62 <_puts_r+0x9a>
 8006d00:	f04f 35ff 	mov.w	r5, #4294967295
 8006d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d06:	07da      	lsls	r2, r3, #31
 8006d08:	d405      	bmi.n	8006d16 <_puts_r+0x4e>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	059b      	lsls	r3, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_puts_r+0x4e>
 8006d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d12:	f000 f9a9 	bl	8007068 <__retarget_lock_release_recursive>
 8006d16:	4628      	mov	r0, r5
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da04      	bge.n	8006d28 <_puts_r+0x60>
 8006d1e:	69a2      	ldr	r2, [r4, #24]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	dc17      	bgt.n	8006d54 <_puts_r+0x8c>
 8006d24:	290a      	cmp	r1, #10
 8006d26:	d015      	beq.n	8006d54 <_puts_r+0x8c>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	6022      	str	r2, [r4, #0]
 8006d2e:	7019      	strb	r1, [r3, #0]
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d36:	3b01      	subs	r3, #1
 8006d38:	60a3      	str	r3, [r4, #8]
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d1ed      	bne.n	8006d1a <_puts_r+0x52>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da11      	bge.n	8006d66 <_puts_r+0x9e>
 8006d42:	4622      	mov	r2, r4
 8006d44:	210a      	movs	r1, #10
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f87f 	bl	8006e4a <__swbuf_r>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d0d7      	beq.n	8006d00 <_puts_r+0x38>
 8006d50:	250a      	movs	r5, #10
 8006d52:	e7d7      	b.n	8006d04 <_puts_r+0x3c>
 8006d54:	4622      	mov	r2, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f877 	bl	8006e4a <__swbuf_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1e7      	bne.n	8006d30 <_puts_r+0x68>
 8006d60:	e7ce      	b.n	8006d00 <_puts_r+0x38>
 8006d62:	3e01      	subs	r6, #1
 8006d64:	e7e4      	b.n	8006d30 <_puts_r+0x68>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	6022      	str	r2, [r4, #0]
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e7ee      	b.n	8006d50 <_puts_r+0x88>
	...

08006d74 <puts>:
 8006d74:	4b02      	ldr	r3, [pc, #8]	@ (8006d80 <puts+0xc>)
 8006d76:	4601      	mov	r1, r0
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f7ff bfa5 	b.w	8006cc8 <_puts_r>
 8006d7e:	bf00      	nop
 8006d80:	20000018 	.word	0x20000018

08006d84 <siprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	b500      	push	{lr}
 8006d88:	b09c      	sub	sp, #112	@ 0x70
 8006d8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9006      	str	r0, [sp, #24]
 8006d90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d94:	4809      	ldr	r0, [pc, #36]	@ (8006dbc <siprintf+0x38>)
 8006d96:	9107      	str	r1, [sp, #28]
 8006d98:	9104      	str	r1, [sp, #16]
 8006d9a:	4909      	ldr	r1, [pc, #36]	@ (8006dc0 <siprintf+0x3c>)
 8006d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	a902      	add	r1, sp, #8
 8006da8:	f000 fab4 	bl	8007314 <_svfiprintf_r>
 8006dac:	9b02      	ldr	r3, [sp, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	b01c      	add	sp, #112	@ 0x70
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	20000018 	.word	0x20000018
 8006dc0:	ffff0208 	.word	0xffff0208

08006dc4 <__sread>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dcc:	f000 f8fc 	bl	8006fc8 <_read_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	bfab      	itete	ge
 8006dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8006dd8:	181b      	addge	r3, r3, r0
 8006dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dde:	bfac      	ite	ge
 8006de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006de2:	81a3      	strhlt	r3, [r4, #12]
 8006de4:	bd10      	pop	{r4, pc}

08006de6 <__swrite>:
 8006de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dea:	461f      	mov	r7, r3
 8006dec:	898b      	ldrh	r3, [r1, #12]
 8006dee:	05db      	lsls	r3, r3, #23
 8006df0:	4605      	mov	r5, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	4616      	mov	r6, r2
 8006df6:	d505      	bpl.n	8006e04 <__swrite+0x1e>
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f000 f8d0 	bl	8006fa4 <_lseek_r>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	4632      	mov	r2, r6
 8006e12:	463b      	mov	r3, r7
 8006e14:	4628      	mov	r0, r5
 8006e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1a:	f000 b8e7 	b.w	8006fec <_write_r>

08006e1e <__sseek>:
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	460c      	mov	r4, r1
 8006e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e26:	f000 f8bd 	bl	8006fa4 <_lseek_r>
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	bf15      	itete	ne
 8006e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e3a:	81a3      	strheq	r3, [r4, #12]
 8006e3c:	bf18      	it	ne
 8006e3e:	81a3      	strhne	r3, [r4, #12]
 8006e40:	bd10      	pop	{r4, pc}

08006e42 <__sclose>:
 8006e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e46:	f000 b89d 	b.w	8006f84 <_close_r>

08006e4a <__swbuf_r>:
 8006e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4c:	460e      	mov	r6, r1
 8006e4e:	4614      	mov	r4, r2
 8006e50:	4605      	mov	r5, r0
 8006e52:	b118      	cbz	r0, 8006e5c <__swbuf_r+0x12>
 8006e54:	6a03      	ldr	r3, [r0, #32]
 8006e56:	b90b      	cbnz	r3, 8006e5c <__swbuf_r+0x12>
 8006e58:	f7ff feee 	bl	8006c38 <__sinit>
 8006e5c:	69a3      	ldr	r3, [r4, #24]
 8006e5e:	60a3      	str	r3, [r4, #8]
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	071a      	lsls	r2, r3, #28
 8006e64:	d501      	bpl.n	8006e6a <__swbuf_r+0x20>
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	b943      	cbnz	r3, 8006e7c <__swbuf_r+0x32>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 f82b 	bl	8006ec8 <__swsetup_r>
 8006e72:	b118      	cbz	r0, 8006e7c <__swbuf_r+0x32>
 8006e74:	f04f 37ff 	mov.w	r7, #4294967295
 8006e78:	4638      	mov	r0, r7
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	6922      	ldr	r2, [r4, #16]
 8006e80:	1a98      	subs	r0, r3, r2
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	b2f6      	uxtb	r6, r6
 8006e86:	4283      	cmp	r3, r0
 8006e88:	4637      	mov	r7, r6
 8006e8a:	dc05      	bgt.n	8006e98 <__swbuf_r+0x4e>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 fe90 	bl	8007bb4 <_fflush_r>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d1ed      	bne.n	8006e74 <__swbuf_r+0x2a>
 8006e98:	68a3      	ldr	r3, [r4, #8]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	701e      	strb	r6, [r3, #0]
 8006ea6:	6962      	ldr	r2, [r4, #20]
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d004      	beq.n	8006eb8 <__swbuf_r+0x6e>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	07db      	lsls	r3, r3, #31
 8006eb2:	d5e1      	bpl.n	8006e78 <__swbuf_r+0x2e>
 8006eb4:	2e0a      	cmp	r6, #10
 8006eb6:	d1df      	bne.n	8006e78 <__swbuf_r+0x2e>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 fe7a 	bl	8007bb4 <_fflush_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d0d9      	beq.n	8006e78 <__swbuf_r+0x2e>
 8006ec4:	e7d6      	b.n	8006e74 <__swbuf_r+0x2a>
	...

08006ec8 <__swsetup_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4b29      	ldr	r3, [pc, #164]	@ (8006f70 <__swsetup_r+0xa8>)
 8006ecc:	4605      	mov	r5, r0
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	b118      	cbz	r0, 8006edc <__swsetup_r+0x14>
 8006ed4:	6a03      	ldr	r3, [r0, #32]
 8006ed6:	b90b      	cbnz	r3, 8006edc <__swsetup_r+0x14>
 8006ed8:	f7ff feae 	bl	8006c38 <__sinit>
 8006edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee0:	0719      	lsls	r1, r3, #28
 8006ee2:	d422      	bmi.n	8006f2a <__swsetup_r+0x62>
 8006ee4:	06da      	lsls	r2, r3, #27
 8006ee6:	d407      	bmi.n	8006ef8 <__swsetup_r+0x30>
 8006ee8:	2209      	movs	r2, #9
 8006eea:	602a      	str	r2, [r5, #0]
 8006eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	e033      	b.n	8006f60 <__swsetup_r+0x98>
 8006ef8:	0758      	lsls	r0, r3, #29
 8006efa:	d512      	bpl.n	8006f22 <__swsetup_r+0x5a>
 8006efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006efe:	b141      	cbz	r1, 8006f12 <__swsetup_r+0x4a>
 8006f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <__swsetup_r+0x46>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 f8af 	bl	800706c <_free_r>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f043 0308 	orr.w	r3, r3, #8
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	b94b      	cbnz	r3, 8006f42 <__swsetup_r+0x7a>
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f38:	d003      	beq.n	8006f42 <__swsetup_r+0x7a>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 fe87 	bl	8007c50 <__smakebuf_r>
 8006f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f46:	f013 0201 	ands.w	r2, r3, #1
 8006f4a:	d00a      	beq.n	8006f62 <__swsetup_r+0x9a>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	60a2      	str	r2, [r4, #8]
 8006f50:	6962      	ldr	r2, [r4, #20]
 8006f52:	4252      	negs	r2, r2
 8006f54:	61a2      	str	r2, [r4, #24]
 8006f56:	6922      	ldr	r2, [r4, #16]
 8006f58:	b942      	cbnz	r2, 8006f6c <__swsetup_r+0xa4>
 8006f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f5e:	d1c5      	bne.n	8006eec <__swsetup_r+0x24>
 8006f60:	bd38      	pop	{r3, r4, r5, pc}
 8006f62:	0799      	lsls	r1, r3, #30
 8006f64:	bf58      	it	pl
 8006f66:	6962      	ldrpl	r2, [r4, #20]
 8006f68:	60a2      	str	r2, [r4, #8]
 8006f6a:	e7f4      	b.n	8006f56 <__swsetup_r+0x8e>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	e7f7      	b.n	8006f60 <__swsetup_r+0x98>
 8006f70:	20000018 	.word	0x20000018

08006f74 <memset>:
 8006f74:	4402      	add	r2, r0
 8006f76:	4603      	mov	r3, r0
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d100      	bne.n	8006f7e <memset+0xa>
 8006f7c:	4770      	bx	lr
 8006f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f82:	e7f9      	b.n	8006f78 <memset+0x4>

08006f84 <_close_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d06      	ldr	r5, [pc, #24]	@ (8006fa0 <_close_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7fa fbc1 	bl	8001716 <_close>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_close_r+0x1a>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_close_r+0x1a>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	2000035c 	.word	0x2000035c

08006fa4 <_lseek_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d07      	ldr	r5, [pc, #28]	@ (8006fc4 <_lseek_r+0x20>)
 8006fa8:	4604      	mov	r4, r0
 8006faa:	4608      	mov	r0, r1
 8006fac:	4611      	mov	r1, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fa fbd6 	bl	8001764 <_lseek>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_lseek_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_lseek_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	2000035c 	.word	0x2000035c

08006fc8 <_read_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	@ (8006fe8 <_read_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fa fb64 	bl	80016a4 <_read>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_read_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_read_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	2000035c 	.word	0x2000035c

08006fec <_write_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	@ (800700c <_write_r+0x20>)
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fa fb6f 	bl	80016de <_write>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_write_r+0x1e>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_write_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	2000035c 	.word	0x2000035c

08007010 <__errno>:
 8007010:	4b01      	ldr	r3, [pc, #4]	@ (8007018 <__errno+0x8>)
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	20000018 	.word	0x20000018

0800701c <__libc_init_array>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4d0d      	ldr	r5, [pc, #52]	@ (8007054 <__libc_init_array+0x38>)
 8007020:	4c0d      	ldr	r4, [pc, #52]	@ (8007058 <__libc_init_array+0x3c>)
 8007022:	1b64      	subs	r4, r4, r5
 8007024:	10a4      	asrs	r4, r4, #2
 8007026:	2600      	movs	r6, #0
 8007028:	42a6      	cmp	r6, r4
 800702a:	d109      	bne.n	8007040 <__libc_init_array+0x24>
 800702c:	4d0b      	ldr	r5, [pc, #44]	@ (800705c <__libc_init_array+0x40>)
 800702e:	4c0c      	ldr	r4, [pc, #48]	@ (8007060 <__libc_init_array+0x44>)
 8007030:	f000 feda 	bl	8007de8 <_init>
 8007034:	1b64      	subs	r4, r4, r5
 8007036:	10a4      	asrs	r4, r4, #2
 8007038:	2600      	movs	r6, #0
 800703a:	42a6      	cmp	r6, r4
 800703c:	d105      	bne.n	800704a <__libc_init_array+0x2e>
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	f855 3b04 	ldr.w	r3, [r5], #4
 8007044:	4798      	blx	r3
 8007046:	3601      	adds	r6, #1
 8007048:	e7ee      	b.n	8007028 <__libc_init_array+0xc>
 800704a:	f855 3b04 	ldr.w	r3, [r5], #4
 800704e:	4798      	blx	r3
 8007050:	3601      	adds	r6, #1
 8007052:	e7f2      	b.n	800703a <__libc_init_array+0x1e>
 8007054:	08007ef0 	.word	0x08007ef0
 8007058:	08007ef0 	.word	0x08007ef0
 800705c:	08007ef0 	.word	0x08007ef0
 8007060:	08007ef4 	.word	0x08007ef4

08007064 <__retarget_lock_init_recursive>:
 8007064:	4770      	bx	lr

08007066 <__retarget_lock_acquire_recursive>:
 8007066:	4770      	bx	lr

08007068 <__retarget_lock_release_recursive>:
 8007068:	4770      	bx	lr
	...

0800706c <_free_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4605      	mov	r5, r0
 8007070:	2900      	cmp	r1, #0
 8007072:	d041      	beq.n	80070f8 <_free_r+0x8c>
 8007074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007078:	1f0c      	subs	r4, r1, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	bfb8      	it	lt
 800707e:	18e4      	addlt	r4, r4, r3
 8007080:	f000 f8e0 	bl	8007244 <__malloc_lock>
 8007084:	4a1d      	ldr	r2, [pc, #116]	@ (80070fc <_free_r+0x90>)
 8007086:	6813      	ldr	r3, [r2, #0]
 8007088:	b933      	cbnz	r3, 8007098 <_free_r+0x2c>
 800708a:	6063      	str	r3, [r4, #4]
 800708c:	6014      	str	r4, [r2, #0]
 800708e:	4628      	mov	r0, r5
 8007090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007094:	f000 b8dc 	b.w	8007250 <__malloc_unlock>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d908      	bls.n	80070ae <_free_r+0x42>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	1821      	adds	r1, r4, r0
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf01      	itttt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	1809      	addeq	r1, r1, r0
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	e7ed      	b.n	800708a <_free_r+0x1e>
 80070ae:	461a      	mov	r2, r3
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b10b      	cbz	r3, 80070b8 <_free_r+0x4c>
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	d9fa      	bls.n	80070ae <_free_r+0x42>
 80070b8:	6811      	ldr	r1, [r2, #0]
 80070ba:	1850      	adds	r0, r2, r1
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d10b      	bne.n	80070d8 <_free_r+0x6c>
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	4401      	add	r1, r0
 80070c4:	1850      	adds	r0, r2, r1
 80070c6:	4283      	cmp	r3, r0
 80070c8:	6011      	str	r1, [r2, #0]
 80070ca:	d1e0      	bne.n	800708e <_free_r+0x22>
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	6053      	str	r3, [r2, #4]
 80070d2:	4408      	add	r0, r1
 80070d4:	6010      	str	r0, [r2, #0]
 80070d6:	e7da      	b.n	800708e <_free_r+0x22>
 80070d8:	d902      	bls.n	80070e0 <_free_r+0x74>
 80070da:	230c      	movs	r3, #12
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	e7d6      	b.n	800708e <_free_r+0x22>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	1821      	adds	r1, r4, r0
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf04      	itt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	bf04      	itt	eq
 80070f0:	1809      	addeq	r1, r1, r0
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	6054      	str	r4, [r2, #4]
 80070f6:	e7ca      	b.n	800708e <_free_r+0x22>
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	20000368 	.word	0x20000368

08007100 <sbrk_aligned>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	4e0f      	ldr	r6, [pc, #60]	@ (8007140 <sbrk_aligned+0x40>)
 8007104:	460c      	mov	r4, r1
 8007106:	6831      	ldr	r1, [r6, #0]
 8007108:	4605      	mov	r5, r0
 800710a:	b911      	cbnz	r1, 8007112 <sbrk_aligned+0x12>
 800710c:	f000 fe18 	bl	8007d40 <_sbrk_r>
 8007110:	6030      	str	r0, [r6, #0]
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	f000 fe13 	bl	8007d40 <_sbrk_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d103      	bne.n	8007126 <sbrk_aligned+0x26>
 800711e:	f04f 34ff 	mov.w	r4, #4294967295
 8007122:	4620      	mov	r0, r4
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	1cc4      	adds	r4, r0, #3
 8007128:	f024 0403 	bic.w	r4, r4, #3
 800712c:	42a0      	cmp	r0, r4
 800712e:	d0f8      	beq.n	8007122 <sbrk_aligned+0x22>
 8007130:	1a21      	subs	r1, r4, r0
 8007132:	4628      	mov	r0, r5
 8007134:	f000 fe04 	bl	8007d40 <_sbrk_r>
 8007138:	3001      	adds	r0, #1
 800713a:	d1f2      	bne.n	8007122 <sbrk_aligned+0x22>
 800713c:	e7ef      	b.n	800711e <sbrk_aligned+0x1e>
 800713e:	bf00      	nop
 8007140:	20000364 	.word	0x20000364

08007144 <_malloc_r>:
 8007144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007148:	1ccd      	adds	r5, r1, #3
 800714a:	f025 0503 	bic.w	r5, r5, #3
 800714e:	3508      	adds	r5, #8
 8007150:	2d0c      	cmp	r5, #12
 8007152:	bf38      	it	cc
 8007154:	250c      	movcc	r5, #12
 8007156:	2d00      	cmp	r5, #0
 8007158:	4606      	mov	r6, r0
 800715a:	db01      	blt.n	8007160 <_malloc_r+0x1c>
 800715c:	42a9      	cmp	r1, r5
 800715e:	d904      	bls.n	800716a <_malloc_r+0x26>
 8007160:	230c      	movs	r3, #12
 8007162:	6033      	str	r3, [r6, #0]
 8007164:	2000      	movs	r0, #0
 8007166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007240 <_malloc_r+0xfc>
 800716e:	f000 f869 	bl	8007244 <__malloc_lock>
 8007172:	f8d8 3000 	ldr.w	r3, [r8]
 8007176:	461c      	mov	r4, r3
 8007178:	bb44      	cbnz	r4, 80071cc <_malloc_r+0x88>
 800717a:	4629      	mov	r1, r5
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff ffbf 	bl	8007100 <sbrk_aligned>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	4604      	mov	r4, r0
 8007186:	d158      	bne.n	800723a <_malloc_r+0xf6>
 8007188:	f8d8 4000 	ldr.w	r4, [r8]
 800718c:	4627      	mov	r7, r4
 800718e:	2f00      	cmp	r7, #0
 8007190:	d143      	bne.n	800721a <_malloc_r+0xd6>
 8007192:	2c00      	cmp	r4, #0
 8007194:	d04b      	beq.n	800722e <_malloc_r+0xea>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	4639      	mov	r1, r7
 800719a:	4630      	mov	r0, r6
 800719c:	eb04 0903 	add.w	r9, r4, r3
 80071a0:	f000 fdce 	bl	8007d40 <_sbrk_r>
 80071a4:	4581      	cmp	r9, r0
 80071a6:	d142      	bne.n	800722e <_malloc_r+0xea>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	1a6d      	subs	r5, r5, r1
 80071ac:	4629      	mov	r1, r5
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff ffa6 	bl	8007100 <sbrk_aligned>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d03a      	beq.n	800722e <_malloc_r+0xea>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	442b      	add	r3, r5
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	f8d8 3000 	ldr.w	r3, [r8]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	bb62      	cbnz	r2, 8007220 <_malloc_r+0xdc>
 80071c6:	f8c8 7000 	str.w	r7, [r8]
 80071ca:	e00f      	b.n	80071ec <_malloc_r+0xa8>
 80071cc:	6822      	ldr	r2, [r4, #0]
 80071ce:	1b52      	subs	r2, r2, r5
 80071d0:	d420      	bmi.n	8007214 <_malloc_r+0xd0>
 80071d2:	2a0b      	cmp	r2, #11
 80071d4:	d917      	bls.n	8007206 <_malloc_r+0xc2>
 80071d6:	1961      	adds	r1, r4, r5
 80071d8:	42a3      	cmp	r3, r4
 80071da:	6025      	str	r5, [r4, #0]
 80071dc:	bf18      	it	ne
 80071de:	6059      	strne	r1, [r3, #4]
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	bf08      	it	eq
 80071e4:	f8c8 1000 	streq.w	r1, [r8]
 80071e8:	5162      	str	r2, [r4, r5]
 80071ea:	604b      	str	r3, [r1, #4]
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 f82f 	bl	8007250 <__malloc_unlock>
 80071f2:	f104 000b 	add.w	r0, r4, #11
 80071f6:	1d23      	adds	r3, r4, #4
 80071f8:	f020 0007 	bic.w	r0, r0, #7
 80071fc:	1ac2      	subs	r2, r0, r3
 80071fe:	bf1c      	itt	ne
 8007200:	1a1b      	subne	r3, r3, r0
 8007202:	50a3      	strne	r3, [r4, r2]
 8007204:	e7af      	b.n	8007166 <_malloc_r+0x22>
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	42a3      	cmp	r3, r4
 800720a:	bf0c      	ite	eq
 800720c:	f8c8 2000 	streq.w	r2, [r8]
 8007210:	605a      	strne	r2, [r3, #4]
 8007212:	e7eb      	b.n	80071ec <_malloc_r+0xa8>
 8007214:	4623      	mov	r3, r4
 8007216:	6864      	ldr	r4, [r4, #4]
 8007218:	e7ae      	b.n	8007178 <_malloc_r+0x34>
 800721a:	463c      	mov	r4, r7
 800721c:	687f      	ldr	r7, [r7, #4]
 800721e:	e7b6      	b.n	800718e <_malloc_r+0x4a>
 8007220:	461a      	mov	r2, r3
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	d1fb      	bne.n	8007220 <_malloc_r+0xdc>
 8007228:	2300      	movs	r3, #0
 800722a:	6053      	str	r3, [r2, #4]
 800722c:	e7de      	b.n	80071ec <_malloc_r+0xa8>
 800722e:	230c      	movs	r3, #12
 8007230:	6033      	str	r3, [r6, #0]
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f80c 	bl	8007250 <__malloc_unlock>
 8007238:	e794      	b.n	8007164 <_malloc_r+0x20>
 800723a:	6005      	str	r5, [r0, #0]
 800723c:	e7d6      	b.n	80071ec <_malloc_r+0xa8>
 800723e:	bf00      	nop
 8007240:	20000368 	.word	0x20000368

08007244 <__malloc_lock>:
 8007244:	4801      	ldr	r0, [pc, #4]	@ (800724c <__malloc_lock+0x8>)
 8007246:	f7ff bf0e 	b.w	8007066 <__retarget_lock_acquire_recursive>
 800724a:	bf00      	nop
 800724c:	20000360 	.word	0x20000360

08007250 <__malloc_unlock>:
 8007250:	4801      	ldr	r0, [pc, #4]	@ (8007258 <__malloc_unlock+0x8>)
 8007252:	f7ff bf09 	b.w	8007068 <__retarget_lock_release_recursive>
 8007256:	bf00      	nop
 8007258:	20000360 	.word	0x20000360

0800725c <__ssputs_r>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	688e      	ldr	r6, [r1, #8]
 8007262:	461f      	mov	r7, r3
 8007264:	42be      	cmp	r6, r7
 8007266:	680b      	ldr	r3, [r1, #0]
 8007268:	4682      	mov	sl, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4690      	mov	r8, r2
 800726e:	d82d      	bhi.n	80072cc <__ssputs_r+0x70>
 8007270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007278:	d026      	beq.n	80072c8 <__ssputs_r+0x6c>
 800727a:	6965      	ldr	r5, [r4, #20]
 800727c:	6909      	ldr	r1, [r1, #16]
 800727e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007282:	eba3 0901 	sub.w	r9, r3, r1
 8007286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800728a:	1c7b      	adds	r3, r7, #1
 800728c:	444b      	add	r3, r9
 800728e:	106d      	asrs	r5, r5, #1
 8007290:	429d      	cmp	r5, r3
 8007292:	bf38      	it	cc
 8007294:	461d      	movcc	r5, r3
 8007296:	0553      	lsls	r3, r2, #21
 8007298:	d527      	bpl.n	80072ea <__ssputs_r+0x8e>
 800729a:	4629      	mov	r1, r5
 800729c:	f7ff ff52 	bl	8007144 <_malloc_r>
 80072a0:	4606      	mov	r6, r0
 80072a2:	b360      	cbz	r0, 80072fe <__ssputs_r+0xa2>
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	464a      	mov	r2, r9
 80072a8:	f000 fd5a 	bl	8007d60 <memcpy>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	6126      	str	r6, [r4, #16]
 80072ba:	6165      	str	r5, [r4, #20]
 80072bc:	444e      	add	r6, r9
 80072be:	eba5 0509 	sub.w	r5, r5, r9
 80072c2:	6026      	str	r6, [r4, #0]
 80072c4:	60a5      	str	r5, [r4, #8]
 80072c6:	463e      	mov	r6, r7
 80072c8:	42be      	cmp	r6, r7
 80072ca:	d900      	bls.n	80072ce <__ssputs_r+0x72>
 80072cc:	463e      	mov	r6, r7
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	4632      	mov	r2, r6
 80072d2:	4641      	mov	r1, r8
 80072d4:	f000 fcf8 	bl	8007cc8 <memmove>
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	1b9b      	subs	r3, r3, r6
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	4433      	add	r3, r6
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2000      	movs	r0, #0
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	462a      	mov	r2, r5
 80072ec:	f000 fd46 	bl	8007d7c <_realloc_r>
 80072f0:	4606      	mov	r6, r0
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1e0      	bne.n	80072b8 <__ssputs_r+0x5c>
 80072f6:	6921      	ldr	r1, [r4, #16]
 80072f8:	4650      	mov	r0, sl
 80072fa:	f7ff feb7 	bl	800706c <_free_r>
 80072fe:	230c      	movs	r3, #12
 8007300:	f8ca 3000 	str.w	r3, [sl]
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	e7e9      	b.n	80072e6 <__ssputs_r+0x8a>
	...

08007314 <_svfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4698      	mov	r8, r3
 800731a:	898b      	ldrh	r3, [r1, #12]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	b09d      	sub	sp, #116	@ 0x74
 8007320:	4607      	mov	r7, r0
 8007322:	460d      	mov	r5, r1
 8007324:	4614      	mov	r4, r2
 8007326:	d510      	bpl.n	800734a <_svfiprintf_r+0x36>
 8007328:	690b      	ldr	r3, [r1, #16]
 800732a:	b973      	cbnz	r3, 800734a <_svfiprintf_r+0x36>
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	f7ff ff09 	bl	8007144 <_malloc_r>
 8007332:	6028      	str	r0, [r5, #0]
 8007334:	6128      	str	r0, [r5, #16]
 8007336:	b930      	cbnz	r0, 8007346 <_svfiprintf_r+0x32>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	b01d      	add	sp, #116	@ 0x74
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	2340      	movs	r3, #64	@ 0x40
 8007348:	616b      	str	r3, [r5, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	2320      	movs	r3, #32
 8007350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007354:	f8cd 800c 	str.w	r8, [sp, #12]
 8007358:	2330      	movs	r3, #48	@ 0x30
 800735a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074f8 <_svfiprintf_r+0x1e4>
 800735e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007362:	f04f 0901 	mov.w	r9, #1
 8007366:	4623      	mov	r3, r4
 8007368:	469a      	mov	sl, r3
 800736a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736e:	b10a      	cbz	r2, 8007374 <_svfiprintf_r+0x60>
 8007370:	2a25      	cmp	r2, #37	@ 0x25
 8007372:	d1f9      	bne.n	8007368 <_svfiprintf_r+0x54>
 8007374:	ebba 0b04 	subs.w	fp, sl, r4
 8007378:	d00b      	beq.n	8007392 <_svfiprintf_r+0x7e>
 800737a:	465b      	mov	r3, fp
 800737c:	4622      	mov	r2, r4
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ff6b 	bl	800725c <__ssputs_r>
 8007386:	3001      	adds	r0, #1
 8007388:	f000 80a7 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800738c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800738e:	445a      	add	r2, fp
 8007390:	9209      	str	r2, [sp, #36]	@ 0x24
 8007392:	f89a 3000 	ldrb.w	r3, [sl]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 809f 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800739c:	2300      	movs	r3, #0
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a6:	f10a 0a01 	add.w	sl, sl, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b4:	4654      	mov	r4, sl
 80073b6:	2205      	movs	r2, #5
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	484e      	ldr	r0, [pc, #312]	@ (80074f8 <_svfiprintf_r+0x1e4>)
 80073be:	f7f8 ff0f 	bl	80001e0 <memchr>
 80073c2:	9a04      	ldr	r2, [sp, #16]
 80073c4:	b9d8      	cbnz	r0, 80073fe <_svfiprintf_r+0xea>
 80073c6:	06d0      	lsls	r0, r2, #27
 80073c8:	bf44      	itt	mi
 80073ca:	2320      	movmi	r3, #32
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d0:	0711      	lsls	r1, r2, #28
 80073d2:	bf44      	itt	mi
 80073d4:	232b      	movmi	r3, #43	@ 0x2b
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e0:	d015      	beq.n	800740e <_svfiprintf_r+0xfa>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	4654      	mov	r4, sl
 80073e6:	2000      	movs	r0, #0
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4621      	mov	r1, r4
 80073ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f2:	3b30      	subs	r3, #48	@ 0x30
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d94b      	bls.n	8007490 <_svfiprintf_r+0x17c>
 80073f8:	b1b0      	cbz	r0, 8007428 <_svfiprintf_r+0x114>
 80073fa:	9207      	str	r2, [sp, #28]
 80073fc:	e014      	b.n	8007428 <_svfiprintf_r+0x114>
 80073fe:	eba0 0308 	sub.w	r3, r0, r8
 8007402:	fa09 f303 	lsl.w	r3, r9, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	46a2      	mov	sl, r4
 800740c:	e7d2      	b.n	80073b4 <_svfiprintf_r+0xa0>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfbb      	ittet	lt
 800741a:	425b      	neglt	r3, r3
 800741c:	f042 0202 	orrlt.w	r2, r2, #2
 8007420:	9307      	strge	r3, [sp, #28]
 8007422:	9307      	strlt	r3, [sp, #28]
 8007424:	bfb8      	it	lt
 8007426:	9204      	strlt	r2, [sp, #16]
 8007428:	7823      	ldrb	r3, [r4, #0]
 800742a:	2b2e      	cmp	r3, #46	@ 0x2e
 800742c:	d10a      	bne.n	8007444 <_svfiprintf_r+0x130>
 800742e:	7863      	ldrb	r3, [r4, #1]
 8007430:	2b2a      	cmp	r3, #42	@ 0x2a
 8007432:	d132      	bne.n	800749a <_svfiprintf_r+0x186>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9203      	str	r2, [sp, #12]
 800743c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007440:	3402      	adds	r4, #2
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007508 <_svfiprintf_r+0x1f4>
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	2203      	movs	r2, #3
 800744c:	4650      	mov	r0, sl
 800744e:	f7f8 fec7 	bl	80001e0 <memchr>
 8007452:	b138      	cbz	r0, 8007464 <_svfiprintf_r+0x150>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	eba0 000a 	sub.w	r0, r0, sl
 800745a:	2240      	movs	r2, #64	@ 0x40
 800745c:	4082      	lsls	r2, r0
 800745e:	4313      	orrs	r3, r2
 8007460:	3401      	adds	r4, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	4824      	ldr	r0, [pc, #144]	@ (80074fc <_svfiprintf_r+0x1e8>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800746e:	2206      	movs	r2, #6
 8007470:	f7f8 feb6 	bl	80001e0 <memchr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d036      	beq.n	80074e6 <_svfiprintf_r+0x1d2>
 8007478:	4b21      	ldr	r3, [pc, #132]	@ (8007500 <_svfiprintf_r+0x1ec>)
 800747a:	bb1b      	cbnz	r3, 80074c4 <_svfiprintf_r+0x1b0>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	3308      	adds	r3, #8
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748a:	4433      	add	r3, r6
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	e76a      	b.n	8007366 <_svfiprintf_r+0x52>
 8007490:	fb0c 3202 	mla	r2, ip, r2, r3
 8007494:	460c      	mov	r4, r1
 8007496:	2001      	movs	r0, #1
 8007498:	e7a8      	b.n	80073ec <_svfiprintf_r+0xd8>
 800749a:	2300      	movs	r3, #0
 800749c:	3401      	adds	r4, #1
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0c0a 	mov.w	ip, #10
 80074a6:	4620      	mov	r0, r4
 80074a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ac:	3a30      	subs	r2, #48	@ 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c6      	beq.n	8007444 <_svfiprintf_r+0x130>
 80074b6:	9105      	str	r1, [sp, #20]
 80074b8:	e7c4      	b.n	8007444 <_svfiprintf_r+0x130>
 80074ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80074be:	4604      	mov	r4, r0
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7f0      	b.n	80074a6 <_svfiprintf_r+0x192>
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	462a      	mov	r2, r5
 80074ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	4638      	mov	r0, r7
 80074d0:	f3af 8000 	nop.w
 80074d4:	1c42      	adds	r2, r0, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	d1d6      	bne.n	8007488 <_svfiprintf_r+0x174>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af2d 	bmi.w	800733c <_svfiprintf_r+0x28>
 80074e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e4:	e72c      	b.n	8007340 <_svfiprintf_r+0x2c>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4638      	mov	r0, r7
 80074f2:	f000 f9bb 	bl	800786c <_printf_i>
 80074f6:	e7ed      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074f8:	08007eb4 	.word	0x08007eb4
 80074fc:	08007ebe 	.word	0x08007ebe
 8007500:	00000000 	.word	0x00000000
 8007504:	0800725d 	.word	0x0800725d
 8007508:	08007eba 	.word	0x08007eba

0800750c <__sfputc_r>:
 800750c:	6893      	ldr	r3, [r2, #8]
 800750e:	3b01      	subs	r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	b410      	push	{r4}
 8007514:	6093      	str	r3, [r2, #8]
 8007516:	da08      	bge.n	800752a <__sfputc_r+0x1e>
 8007518:	6994      	ldr	r4, [r2, #24]
 800751a:	42a3      	cmp	r3, r4
 800751c:	db01      	blt.n	8007522 <__sfputc_r+0x16>
 800751e:	290a      	cmp	r1, #10
 8007520:	d103      	bne.n	800752a <__sfputc_r+0x1e>
 8007522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007526:	f7ff bc90 	b.w	8006e4a <__swbuf_r>
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	1c58      	adds	r0, r3, #1
 800752e:	6010      	str	r0, [r2, #0]
 8007530:	7019      	strb	r1, [r3, #0]
 8007532:	4608      	mov	r0, r1
 8007534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007538:	4770      	bx	lr

0800753a <__sfputs_r>:
 800753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	4614      	mov	r4, r2
 8007542:	18d5      	adds	r5, r2, r3
 8007544:	42ac      	cmp	r4, r5
 8007546:	d101      	bne.n	800754c <__sfputs_r+0x12>
 8007548:	2000      	movs	r0, #0
 800754a:	e007      	b.n	800755c <__sfputs_r+0x22>
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	463a      	mov	r2, r7
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ffda 	bl	800750c <__sfputc_r>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d1f3      	bne.n	8007544 <__sfputs_r+0xa>
 800755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007560 <_vfiprintf_r>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	460d      	mov	r5, r1
 8007566:	b09d      	sub	sp, #116	@ 0x74
 8007568:	4614      	mov	r4, r2
 800756a:	4698      	mov	r8, r3
 800756c:	4606      	mov	r6, r0
 800756e:	b118      	cbz	r0, 8007578 <_vfiprintf_r+0x18>
 8007570:	6a03      	ldr	r3, [r0, #32]
 8007572:	b90b      	cbnz	r3, 8007578 <_vfiprintf_r+0x18>
 8007574:	f7ff fb60 	bl	8006c38 <__sinit>
 8007578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	d405      	bmi.n	800758a <_vfiprintf_r+0x2a>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	059a      	lsls	r2, r3, #22
 8007582:	d402      	bmi.n	800758a <_vfiprintf_r+0x2a>
 8007584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007586:	f7ff fd6e 	bl	8007066 <__retarget_lock_acquire_recursive>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	071b      	lsls	r3, r3, #28
 800758e:	d501      	bpl.n	8007594 <_vfiprintf_r+0x34>
 8007590:	692b      	ldr	r3, [r5, #16]
 8007592:	b99b      	cbnz	r3, 80075bc <_vfiprintf_r+0x5c>
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff fc96 	bl	8006ec8 <__swsetup_r>
 800759c:	b170      	cbz	r0, 80075bc <_vfiprintf_r+0x5c>
 800759e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075a0:	07dc      	lsls	r4, r3, #31
 80075a2:	d504      	bpl.n	80075ae <_vfiprintf_r+0x4e>
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	b01d      	add	sp, #116	@ 0x74
 80075aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	0598      	lsls	r0, r3, #22
 80075b2:	d4f7      	bmi.n	80075a4 <_vfiprintf_r+0x44>
 80075b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b6:	f7ff fd57 	bl	8007068 <__retarget_lock_release_recursive>
 80075ba:	e7f3      	b.n	80075a4 <_vfiprintf_r+0x44>
 80075bc:	2300      	movs	r3, #0
 80075be:	9309      	str	r3, [sp, #36]	@ 0x24
 80075c0:	2320      	movs	r3, #32
 80075c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ca:	2330      	movs	r3, #48	@ 0x30
 80075cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800777c <_vfiprintf_r+0x21c>
 80075d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075d4:	f04f 0901 	mov.w	r9, #1
 80075d8:	4623      	mov	r3, r4
 80075da:	469a      	mov	sl, r3
 80075dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075e0:	b10a      	cbz	r2, 80075e6 <_vfiprintf_r+0x86>
 80075e2:	2a25      	cmp	r2, #37	@ 0x25
 80075e4:	d1f9      	bne.n	80075da <_vfiprintf_r+0x7a>
 80075e6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ea:	d00b      	beq.n	8007604 <_vfiprintf_r+0xa4>
 80075ec:	465b      	mov	r3, fp
 80075ee:	4622      	mov	r2, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffa1 	bl	800753a <__sfputs_r>
 80075f8:	3001      	adds	r0, #1
 80075fa:	f000 80a7 	beq.w	800774c <_vfiprintf_r+0x1ec>
 80075fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007600:	445a      	add	r2, fp
 8007602:	9209      	str	r2, [sp, #36]	@ 0x24
 8007604:	f89a 3000 	ldrb.w	r3, [sl]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 809f 	beq.w	800774c <_vfiprintf_r+0x1ec>
 800760e:	2300      	movs	r3, #0
 8007610:	f04f 32ff 	mov.w	r2, #4294967295
 8007614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007618:	f10a 0a01 	add.w	sl, sl, #1
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	9307      	str	r3, [sp, #28]
 8007620:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007624:	931a      	str	r3, [sp, #104]	@ 0x68
 8007626:	4654      	mov	r4, sl
 8007628:	2205      	movs	r2, #5
 800762a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762e:	4853      	ldr	r0, [pc, #332]	@ (800777c <_vfiprintf_r+0x21c>)
 8007630:	f7f8 fdd6 	bl	80001e0 <memchr>
 8007634:	9a04      	ldr	r2, [sp, #16]
 8007636:	b9d8      	cbnz	r0, 8007670 <_vfiprintf_r+0x110>
 8007638:	06d1      	lsls	r1, r2, #27
 800763a:	bf44      	itt	mi
 800763c:	2320      	movmi	r3, #32
 800763e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007642:	0713      	lsls	r3, r2, #28
 8007644:	bf44      	itt	mi
 8007646:	232b      	movmi	r3, #43	@ 0x2b
 8007648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800764c:	f89a 3000 	ldrb.w	r3, [sl]
 8007650:	2b2a      	cmp	r3, #42	@ 0x2a
 8007652:	d015      	beq.n	8007680 <_vfiprintf_r+0x120>
 8007654:	9a07      	ldr	r2, [sp, #28]
 8007656:	4654      	mov	r4, sl
 8007658:	2000      	movs	r0, #0
 800765a:	f04f 0c0a 	mov.w	ip, #10
 800765e:	4621      	mov	r1, r4
 8007660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007664:	3b30      	subs	r3, #48	@ 0x30
 8007666:	2b09      	cmp	r3, #9
 8007668:	d94b      	bls.n	8007702 <_vfiprintf_r+0x1a2>
 800766a:	b1b0      	cbz	r0, 800769a <_vfiprintf_r+0x13a>
 800766c:	9207      	str	r2, [sp, #28]
 800766e:	e014      	b.n	800769a <_vfiprintf_r+0x13a>
 8007670:	eba0 0308 	sub.w	r3, r0, r8
 8007674:	fa09 f303 	lsl.w	r3, r9, r3
 8007678:	4313      	orrs	r3, r2
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	46a2      	mov	sl, r4
 800767e:	e7d2      	b.n	8007626 <_vfiprintf_r+0xc6>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	1d19      	adds	r1, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	9103      	str	r1, [sp, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfbb      	ittet	lt
 800768c:	425b      	neglt	r3, r3
 800768e:	f042 0202 	orrlt.w	r2, r2, #2
 8007692:	9307      	strge	r3, [sp, #28]
 8007694:	9307      	strlt	r3, [sp, #28]
 8007696:	bfb8      	it	lt
 8007698:	9204      	strlt	r2, [sp, #16]
 800769a:	7823      	ldrb	r3, [r4, #0]
 800769c:	2b2e      	cmp	r3, #46	@ 0x2e
 800769e:	d10a      	bne.n	80076b6 <_vfiprintf_r+0x156>
 80076a0:	7863      	ldrb	r3, [r4, #1]
 80076a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076a4:	d132      	bne.n	800770c <_vfiprintf_r+0x1ac>
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	1d1a      	adds	r2, r3, #4
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	9203      	str	r2, [sp, #12]
 80076ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076b2:	3402      	adds	r4, #2
 80076b4:	9305      	str	r3, [sp, #20]
 80076b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800778c <_vfiprintf_r+0x22c>
 80076ba:	7821      	ldrb	r1, [r4, #0]
 80076bc:	2203      	movs	r2, #3
 80076be:	4650      	mov	r0, sl
 80076c0:	f7f8 fd8e 	bl	80001e0 <memchr>
 80076c4:	b138      	cbz	r0, 80076d6 <_vfiprintf_r+0x176>
 80076c6:	9b04      	ldr	r3, [sp, #16]
 80076c8:	eba0 000a 	sub.w	r0, r0, sl
 80076cc:	2240      	movs	r2, #64	@ 0x40
 80076ce:	4082      	lsls	r2, r0
 80076d0:	4313      	orrs	r3, r2
 80076d2:	3401      	adds	r4, #1
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076da:	4829      	ldr	r0, [pc, #164]	@ (8007780 <_vfiprintf_r+0x220>)
 80076dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076e0:	2206      	movs	r2, #6
 80076e2:	f7f8 fd7d 	bl	80001e0 <memchr>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d03f      	beq.n	800776a <_vfiprintf_r+0x20a>
 80076ea:	4b26      	ldr	r3, [pc, #152]	@ (8007784 <_vfiprintf_r+0x224>)
 80076ec:	bb1b      	cbnz	r3, 8007736 <_vfiprintf_r+0x1d6>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	3308      	adds	r3, #8
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076fc:	443b      	add	r3, r7
 80076fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007700:	e76a      	b.n	80075d8 <_vfiprintf_r+0x78>
 8007702:	fb0c 3202 	mla	r2, ip, r2, r3
 8007706:	460c      	mov	r4, r1
 8007708:	2001      	movs	r0, #1
 800770a:	e7a8      	b.n	800765e <_vfiprintf_r+0xfe>
 800770c:	2300      	movs	r3, #0
 800770e:	3401      	adds	r4, #1
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	4619      	mov	r1, r3
 8007714:	f04f 0c0a 	mov.w	ip, #10
 8007718:	4620      	mov	r0, r4
 800771a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771e:	3a30      	subs	r2, #48	@ 0x30
 8007720:	2a09      	cmp	r2, #9
 8007722:	d903      	bls.n	800772c <_vfiprintf_r+0x1cc>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0c6      	beq.n	80076b6 <_vfiprintf_r+0x156>
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	e7c4      	b.n	80076b6 <_vfiprintf_r+0x156>
 800772c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007730:	4604      	mov	r4, r0
 8007732:	2301      	movs	r3, #1
 8007734:	e7f0      	b.n	8007718 <_vfiprintf_r+0x1b8>
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462a      	mov	r2, r5
 800773c:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <_vfiprintf_r+0x228>)
 800773e:	a904      	add	r1, sp, #16
 8007740:	4630      	mov	r0, r6
 8007742:	f3af 8000 	nop.w
 8007746:	4607      	mov	r7, r0
 8007748:	1c78      	adds	r0, r7, #1
 800774a:	d1d6      	bne.n	80076fa <_vfiprintf_r+0x19a>
 800774c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	d405      	bmi.n	800775e <_vfiprintf_r+0x1fe>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	059a      	lsls	r2, r3, #22
 8007756:	d402      	bmi.n	800775e <_vfiprintf_r+0x1fe>
 8007758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800775a:	f7ff fc85 	bl	8007068 <__retarget_lock_release_recursive>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	065b      	lsls	r3, r3, #25
 8007762:	f53f af1f 	bmi.w	80075a4 <_vfiprintf_r+0x44>
 8007766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007768:	e71e      	b.n	80075a8 <_vfiprintf_r+0x48>
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <_vfiprintf_r+0x228>)
 8007772:	a904      	add	r1, sp, #16
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f879 	bl	800786c <_printf_i>
 800777a:	e7e4      	b.n	8007746 <_vfiprintf_r+0x1e6>
 800777c:	08007eb4 	.word	0x08007eb4
 8007780:	08007ebe 	.word	0x08007ebe
 8007784:	00000000 	.word	0x00000000
 8007788:	0800753b 	.word	0x0800753b
 800778c:	08007eba 	.word	0x08007eba

08007790 <_printf_common>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4616      	mov	r6, r2
 8007796:	4698      	mov	r8, r3
 8007798:	688a      	ldr	r2, [r1, #8]
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077a0:	4293      	cmp	r3, r2
 80077a2:	bfb8      	it	lt
 80077a4:	4613      	movlt	r3, r2
 80077a6:	6033      	str	r3, [r6, #0]
 80077a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077ac:	4607      	mov	r7, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	b10a      	cbz	r2, 80077b6 <_printf_common+0x26>
 80077b2:	3301      	adds	r3, #1
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	0699      	lsls	r1, r3, #26
 80077ba:	bf42      	ittt	mi
 80077bc:	6833      	ldrmi	r3, [r6, #0]
 80077be:	3302      	addmi	r3, #2
 80077c0:	6033      	strmi	r3, [r6, #0]
 80077c2:	6825      	ldr	r5, [r4, #0]
 80077c4:	f015 0506 	ands.w	r5, r5, #6
 80077c8:	d106      	bne.n	80077d8 <_printf_common+0x48>
 80077ca:	f104 0a19 	add.w	sl, r4, #25
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	6832      	ldr	r2, [r6, #0]
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc26      	bgt.n	8007826 <_printf_common+0x96>
 80077d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	3b00      	subs	r3, #0
 80077e0:	bf18      	it	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	0692      	lsls	r2, r2, #26
 80077e6:	d42b      	bmi.n	8007840 <_printf_common+0xb0>
 80077e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077ec:	4641      	mov	r1, r8
 80077ee:	4638      	mov	r0, r7
 80077f0:	47c8      	blx	r9
 80077f2:	3001      	adds	r0, #1
 80077f4:	d01e      	beq.n	8007834 <_printf_common+0xa4>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6922      	ldr	r2, [r4, #16]
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	2b04      	cmp	r3, #4
 8007800:	bf02      	ittt	eq
 8007802:	68e5      	ldreq	r5, [r4, #12]
 8007804:	6833      	ldreq	r3, [r6, #0]
 8007806:	1aed      	subeq	r5, r5, r3
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	bf0c      	ite	eq
 800780c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007810:	2500      	movne	r5, #0
 8007812:	4293      	cmp	r3, r2
 8007814:	bfc4      	itt	gt
 8007816:	1a9b      	subgt	r3, r3, r2
 8007818:	18ed      	addgt	r5, r5, r3
 800781a:	2600      	movs	r6, #0
 800781c:	341a      	adds	r4, #26
 800781e:	42b5      	cmp	r5, r6
 8007820:	d11a      	bne.n	8007858 <_printf_common+0xc8>
 8007822:	2000      	movs	r0, #0
 8007824:	e008      	b.n	8007838 <_printf_common+0xa8>
 8007826:	2301      	movs	r3, #1
 8007828:	4652      	mov	r2, sl
 800782a:	4641      	mov	r1, r8
 800782c:	4638      	mov	r0, r7
 800782e:	47c8      	blx	r9
 8007830:	3001      	adds	r0, #1
 8007832:	d103      	bne.n	800783c <_printf_common+0xac>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	3501      	adds	r5, #1
 800783e:	e7c6      	b.n	80077ce <_printf_common+0x3e>
 8007840:	18e1      	adds	r1, r4, r3
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	2030      	movs	r0, #48	@ 0x30
 8007846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800784a:	4422      	add	r2, r4
 800784c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007854:	3302      	adds	r3, #2
 8007856:	e7c7      	b.n	80077e8 <_printf_common+0x58>
 8007858:	2301      	movs	r3, #1
 800785a:	4622      	mov	r2, r4
 800785c:	4641      	mov	r1, r8
 800785e:	4638      	mov	r0, r7
 8007860:	47c8      	blx	r9
 8007862:	3001      	adds	r0, #1
 8007864:	d0e6      	beq.n	8007834 <_printf_common+0xa4>
 8007866:	3601      	adds	r6, #1
 8007868:	e7d9      	b.n	800781e <_printf_common+0x8e>
	...

0800786c <_printf_i>:
 800786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	7e0f      	ldrb	r7, [r1, #24]
 8007872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007874:	2f78      	cmp	r7, #120	@ 0x78
 8007876:	4691      	mov	r9, r2
 8007878:	4680      	mov	r8, r0
 800787a:	460c      	mov	r4, r1
 800787c:	469a      	mov	sl, r3
 800787e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007882:	d807      	bhi.n	8007894 <_printf_i+0x28>
 8007884:	2f62      	cmp	r7, #98	@ 0x62
 8007886:	d80a      	bhi.n	800789e <_printf_i+0x32>
 8007888:	2f00      	cmp	r7, #0
 800788a:	f000 80d2 	beq.w	8007a32 <_printf_i+0x1c6>
 800788e:	2f58      	cmp	r7, #88	@ 0x58
 8007890:	f000 80b9 	beq.w	8007a06 <_printf_i+0x19a>
 8007894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800789c:	e03a      	b.n	8007914 <_printf_i+0xa8>
 800789e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078a2:	2b15      	cmp	r3, #21
 80078a4:	d8f6      	bhi.n	8007894 <_printf_i+0x28>
 80078a6:	a101      	add	r1, pc, #4	@ (adr r1, 80078ac <_printf_i+0x40>)
 80078a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078ac:	08007905 	.word	0x08007905
 80078b0:	08007919 	.word	0x08007919
 80078b4:	08007895 	.word	0x08007895
 80078b8:	08007895 	.word	0x08007895
 80078bc:	08007895 	.word	0x08007895
 80078c0:	08007895 	.word	0x08007895
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007895 	.word	0x08007895
 80078cc:	08007895 	.word	0x08007895
 80078d0:	08007895 	.word	0x08007895
 80078d4:	08007895 	.word	0x08007895
 80078d8:	08007a19 	.word	0x08007a19
 80078dc:	08007943 	.word	0x08007943
 80078e0:	080079d3 	.word	0x080079d3
 80078e4:	08007895 	.word	0x08007895
 80078e8:	08007895 	.word	0x08007895
 80078ec:	08007a3b 	.word	0x08007a3b
 80078f0:	08007895 	.word	0x08007895
 80078f4:	08007943 	.word	0x08007943
 80078f8:	08007895 	.word	0x08007895
 80078fc:	08007895 	.word	0x08007895
 8007900:	080079db 	.word	0x080079db
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6032      	str	r2, [r6, #0]
 800790c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007914:	2301      	movs	r3, #1
 8007916:	e09d      	b.n	8007a54 <_printf_i+0x1e8>
 8007918:	6833      	ldr	r3, [r6, #0]
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	6031      	str	r1, [r6, #0]
 8007920:	0606      	lsls	r6, r0, #24
 8007922:	d501      	bpl.n	8007928 <_printf_i+0xbc>
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	e003      	b.n	8007930 <_printf_i+0xc4>
 8007928:	0645      	lsls	r5, r0, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0xb8>
 800792c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007930:	2d00      	cmp	r5, #0
 8007932:	da03      	bge.n	800793c <_printf_i+0xd0>
 8007934:	232d      	movs	r3, #45	@ 0x2d
 8007936:	426d      	negs	r5, r5
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800793c:	4859      	ldr	r0, [pc, #356]	@ (8007aa4 <_printf_i+0x238>)
 800793e:	230a      	movs	r3, #10
 8007940:	e011      	b.n	8007966 <_printf_i+0xfa>
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	0608      	lsls	r0, r1, #24
 8007948:	f853 5b04 	ldr.w	r5, [r3], #4
 800794c:	d402      	bmi.n	8007954 <_printf_i+0xe8>
 800794e:	0649      	lsls	r1, r1, #25
 8007950:	bf48      	it	mi
 8007952:	b2ad      	uxthmi	r5, r5
 8007954:	2f6f      	cmp	r7, #111	@ 0x6f
 8007956:	4853      	ldr	r0, [pc, #332]	@ (8007aa4 <_printf_i+0x238>)
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	bf14      	ite	ne
 800795c:	230a      	movne	r3, #10
 800795e:	2308      	moveq	r3, #8
 8007960:	2100      	movs	r1, #0
 8007962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007966:	6866      	ldr	r6, [r4, #4]
 8007968:	60a6      	str	r6, [r4, #8]
 800796a:	2e00      	cmp	r6, #0
 800796c:	bfa2      	ittt	ge
 800796e:	6821      	ldrge	r1, [r4, #0]
 8007970:	f021 0104 	bicge.w	r1, r1, #4
 8007974:	6021      	strge	r1, [r4, #0]
 8007976:	b90d      	cbnz	r5, 800797c <_printf_i+0x110>
 8007978:	2e00      	cmp	r6, #0
 800797a:	d04b      	beq.n	8007a14 <_printf_i+0x1a8>
 800797c:	4616      	mov	r6, r2
 800797e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007982:	fb03 5711 	mls	r7, r3, r1, r5
 8007986:	5dc7      	ldrb	r7, [r0, r7]
 8007988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800798c:	462f      	mov	r7, r5
 800798e:	42bb      	cmp	r3, r7
 8007990:	460d      	mov	r5, r1
 8007992:	d9f4      	bls.n	800797e <_printf_i+0x112>
 8007994:	2b08      	cmp	r3, #8
 8007996:	d10b      	bne.n	80079b0 <_printf_i+0x144>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07df      	lsls	r7, r3, #31
 800799c:	d508      	bpl.n	80079b0 <_printf_i+0x144>
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	6861      	ldr	r1, [r4, #4]
 80079a2:	4299      	cmp	r1, r3
 80079a4:	bfde      	ittt	le
 80079a6:	2330      	movle	r3, #48	@ 0x30
 80079a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079b0:	1b92      	subs	r2, r2, r6
 80079b2:	6122      	str	r2, [r4, #16]
 80079b4:	f8cd a000 	str.w	sl, [sp]
 80079b8:	464b      	mov	r3, r9
 80079ba:	aa03      	add	r2, sp, #12
 80079bc:	4621      	mov	r1, r4
 80079be:	4640      	mov	r0, r8
 80079c0:	f7ff fee6 	bl	8007790 <_printf_common>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d14a      	bne.n	8007a5e <_printf_i+0x1f2>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	b004      	add	sp, #16
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	f043 0320 	orr.w	r3, r3, #32
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	4833      	ldr	r0, [pc, #204]	@ (8007aa8 <_printf_i+0x23c>)
 80079dc:	2778      	movs	r7, #120	@ 0x78
 80079de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	6831      	ldr	r1, [r6, #0]
 80079e6:	061f      	lsls	r7, r3, #24
 80079e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ec:	d402      	bmi.n	80079f4 <_printf_i+0x188>
 80079ee:	065f      	lsls	r7, r3, #25
 80079f0:	bf48      	it	mi
 80079f2:	b2ad      	uxthmi	r5, r5
 80079f4:	6031      	str	r1, [r6, #0]
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	bf44      	itt	mi
 80079fa:	f043 0320 	orrmi.w	r3, r3, #32
 80079fe:	6023      	strmi	r3, [r4, #0]
 8007a00:	b11d      	cbz	r5, 8007a0a <_printf_i+0x19e>
 8007a02:	2310      	movs	r3, #16
 8007a04:	e7ac      	b.n	8007960 <_printf_i+0xf4>
 8007a06:	4827      	ldr	r0, [pc, #156]	@ (8007aa4 <_printf_i+0x238>)
 8007a08:	e7e9      	b.n	80079de <_printf_i+0x172>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f023 0320 	bic.w	r3, r3, #32
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	e7f6      	b.n	8007a02 <_printf_i+0x196>
 8007a14:	4616      	mov	r6, r2
 8007a16:	e7bd      	b.n	8007994 <_printf_i+0x128>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	6825      	ldr	r5, [r4, #0]
 8007a1c:	6961      	ldr	r1, [r4, #20]
 8007a1e:	1d18      	adds	r0, r3, #4
 8007a20:	6030      	str	r0, [r6, #0]
 8007a22:	062e      	lsls	r6, r5, #24
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0x1c0>
 8007a28:	6019      	str	r1, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <_printf_i+0x1c6>
 8007a2c:	0668      	lsls	r0, r5, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0x1bc>
 8007a30:	8019      	strh	r1, [r3, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	4616      	mov	r6, r2
 8007a38:	e7bc      	b.n	80079b4 <_printf_i+0x148>
 8007a3a:	6833      	ldr	r3, [r6, #0]
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	6032      	str	r2, [r6, #0]
 8007a40:	681e      	ldr	r6, [r3, #0]
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	2100      	movs	r1, #0
 8007a46:	4630      	mov	r0, r6
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	b108      	cbz	r0, 8007a52 <_printf_i+0x1e6>
 8007a4e:	1b80      	subs	r0, r0, r6
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	2300      	movs	r3, #0
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5c:	e7aa      	b.n	80079b4 <_printf_i+0x148>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	4632      	mov	r2, r6
 8007a62:	4649      	mov	r1, r9
 8007a64:	4640      	mov	r0, r8
 8007a66:	47d0      	blx	sl
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d0ad      	beq.n	80079c8 <_printf_i+0x15c>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	079b      	lsls	r3, r3, #30
 8007a70:	d413      	bmi.n	8007a9a <_printf_i+0x22e>
 8007a72:	68e0      	ldr	r0, [r4, #12]
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	4298      	cmp	r0, r3
 8007a78:	bfb8      	it	lt
 8007a7a:	4618      	movlt	r0, r3
 8007a7c:	e7a6      	b.n	80079cc <_printf_i+0x160>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4632      	mov	r2, r6
 8007a82:	4649      	mov	r1, r9
 8007a84:	4640      	mov	r0, r8
 8007a86:	47d0      	blx	sl
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d09d      	beq.n	80079c8 <_printf_i+0x15c>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	9903      	ldr	r1, [sp, #12]
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dcf2      	bgt.n	8007a7e <_printf_i+0x212>
 8007a98:	e7eb      	b.n	8007a72 <_printf_i+0x206>
 8007a9a:	2500      	movs	r5, #0
 8007a9c:	f104 0619 	add.w	r6, r4, #25
 8007aa0:	e7f5      	b.n	8007a8e <_printf_i+0x222>
 8007aa2:	bf00      	nop
 8007aa4:	08007ec5 	.word	0x08007ec5
 8007aa8:	08007ed6 	.word	0x08007ed6

08007aac <__sflush_r>:
 8007aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	0716      	lsls	r6, r2, #28
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	d454      	bmi.n	8007b66 <__sflush_r+0xba>
 8007abc:	684b      	ldr	r3, [r1, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dc02      	bgt.n	8007ac8 <__sflush_r+0x1c>
 8007ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd48      	ble.n	8007b5a <__sflush_r+0xae>
 8007ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	d045      	beq.n	8007b5a <__sflush_r+0xae>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ad4:	682f      	ldr	r7, [r5, #0]
 8007ad6:	6a21      	ldr	r1, [r4, #32]
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	d030      	beq.n	8007b3e <__sflush_r+0x92>
 8007adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	0759      	lsls	r1, r3, #29
 8007ae2:	d505      	bpl.n	8007af0 <__sflush_r+0x44>
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aea:	b10b      	cbz	r3, 8007af0 <__sflush_r+0x44>
 8007aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b0      	blx	r6
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	d106      	bne.n	8007b0e <__sflush_r+0x62>
 8007b00:	6829      	ldr	r1, [r5, #0]
 8007b02:	291d      	cmp	r1, #29
 8007b04:	d82b      	bhi.n	8007b5e <__sflush_r+0xb2>
 8007b06:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb0 <__sflush_r+0x104>)
 8007b08:	410a      	asrs	r2, r1
 8007b0a:	07d6      	lsls	r6, r2, #31
 8007b0c:	d427      	bmi.n	8007b5e <__sflush_r+0xb2>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	6062      	str	r2, [r4, #4]
 8007b12:	04d9      	lsls	r1, r3, #19
 8007b14:	6922      	ldr	r2, [r4, #16]
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	d504      	bpl.n	8007b24 <__sflush_r+0x78>
 8007b1a:	1c42      	adds	r2, r0, #1
 8007b1c:	d101      	bne.n	8007b22 <__sflush_r+0x76>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b903      	cbnz	r3, 8007b24 <__sflush_r+0x78>
 8007b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b26:	602f      	str	r7, [r5, #0]
 8007b28:	b1b9      	cbz	r1, 8007b5a <__sflush_r+0xae>
 8007b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d002      	beq.n	8007b38 <__sflush_r+0x8c>
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7ff fa9a 	bl	800706c <_free_r>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3c:	e00d      	b.n	8007b5a <__sflush_r+0xae>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b0      	blx	r6
 8007b44:	4602      	mov	r2, r0
 8007b46:	1c50      	adds	r0, r2, #1
 8007b48:	d1c9      	bne.n	8007ade <__sflush_r+0x32>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c6      	beq.n	8007ade <__sflush_r+0x32>
 8007b50:	2b1d      	cmp	r3, #29
 8007b52:	d001      	beq.n	8007b58 <__sflush_r+0xac>
 8007b54:	2b16      	cmp	r3, #22
 8007b56:	d11e      	bne.n	8007b96 <__sflush_r+0xea>
 8007b58:	602f      	str	r7, [r5, #0]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	e022      	b.n	8007ba4 <__sflush_r+0xf8>
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	e01b      	b.n	8007b9e <__sflush_r+0xf2>
 8007b66:	690f      	ldr	r7, [r1, #16]
 8007b68:	2f00      	cmp	r7, #0
 8007b6a:	d0f6      	beq.n	8007b5a <__sflush_r+0xae>
 8007b6c:	0793      	lsls	r3, r2, #30
 8007b6e:	680e      	ldr	r6, [r1, #0]
 8007b70:	bf08      	it	eq
 8007b72:	694b      	ldreq	r3, [r1, #20]
 8007b74:	600f      	str	r7, [r1, #0]
 8007b76:	bf18      	it	ne
 8007b78:	2300      	movne	r3, #0
 8007b7a:	eba6 0807 	sub.w	r8, r6, r7
 8007b7e:	608b      	str	r3, [r1, #8]
 8007b80:	f1b8 0f00 	cmp.w	r8, #0
 8007b84:	dde9      	ble.n	8007b5a <__sflush_r+0xae>
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b8a:	4643      	mov	r3, r8
 8007b8c:	463a      	mov	r2, r7
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b0      	blx	r6
 8007b92:	2800      	cmp	r0, #0
 8007b94:	dc08      	bgt.n	8007ba8 <__sflush_r+0xfc>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba8:	4407      	add	r7, r0
 8007baa:	eba8 0800 	sub.w	r8, r8, r0
 8007bae:	e7e7      	b.n	8007b80 <__sflush_r+0xd4>
 8007bb0:	dfbffffe 	.word	0xdfbffffe

08007bb4 <_fflush_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	b913      	cbnz	r3, 8007bc4 <_fflush_r+0x10>
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	b118      	cbz	r0, 8007bce <_fflush_r+0x1a>
 8007bc6:	6a03      	ldr	r3, [r0, #32]
 8007bc8:	b90b      	cbnz	r3, 8007bce <_fflush_r+0x1a>
 8007bca:	f7ff f835 	bl	8006c38 <__sinit>
 8007bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f3      	beq.n	8007bbe <_fflush_r+0xa>
 8007bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bd8:	07d0      	lsls	r0, r2, #31
 8007bda:	d404      	bmi.n	8007be6 <_fflush_r+0x32>
 8007bdc:	0599      	lsls	r1, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_fflush_r+0x32>
 8007be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007be2:	f7ff fa40 	bl	8007066 <__retarget_lock_acquire_recursive>
 8007be6:	4628      	mov	r0, r5
 8007be8:	4621      	mov	r1, r4
 8007bea:	f7ff ff5f 	bl	8007aac <__sflush_r>
 8007bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bf0:	07da      	lsls	r2, r3, #31
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	d4e4      	bmi.n	8007bc0 <_fflush_r+0xc>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	059b      	lsls	r3, r3, #22
 8007bfa:	d4e1      	bmi.n	8007bc0 <_fflush_r+0xc>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bfe:	f7ff fa33 	bl	8007068 <__retarget_lock_release_recursive>
 8007c02:	e7dd      	b.n	8007bc0 <_fflush_r+0xc>

08007c04 <__swhatbuf_r>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	b096      	sub	sp, #88	@ 0x58
 8007c10:	4615      	mov	r5, r2
 8007c12:	461e      	mov	r6, r3
 8007c14:	da0d      	bge.n	8007c32 <__swhatbuf_r+0x2e>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c1c:	f04f 0100 	mov.w	r1, #0
 8007c20:	bf14      	ite	ne
 8007c22:	2340      	movne	r3, #64	@ 0x40
 8007c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c28:	2000      	movs	r0, #0
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	b016      	add	sp, #88	@ 0x58
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	466a      	mov	r2, sp
 8007c34:	f000 f862 	bl	8007cfc <_fstat_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dbec      	blt.n	8007c16 <__swhatbuf_r+0x12>
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c46:	4259      	negs	r1, r3
 8007c48:	4159      	adcs	r1, r3
 8007c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c4e:	e7eb      	b.n	8007c28 <__swhatbuf_r+0x24>

08007c50 <__smakebuf_r>:
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c54:	079d      	lsls	r5, r3, #30
 8007c56:	4606      	mov	r6, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	d507      	bpl.n	8007c6c <__smakebuf_r+0x1c>
 8007c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	2301      	movs	r3, #1
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	b003      	add	sp, #12
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6c:	ab01      	add	r3, sp, #4
 8007c6e:	466a      	mov	r2, sp
 8007c70:	f7ff ffc8 	bl	8007c04 <__swhatbuf_r>
 8007c74:	9f00      	ldr	r7, [sp, #0]
 8007c76:	4605      	mov	r5, r0
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff fa62 	bl	8007144 <_malloc_r>
 8007c80:	b948      	cbnz	r0, 8007c96 <__smakebuf_r+0x46>
 8007c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c86:	059a      	lsls	r2, r3, #22
 8007c88:	d4ee      	bmi.n	8007c68 <__smakebuf_r+0x18>
 8007c8a:	f023 0303 	bic.w	r3, r3, #3
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	e7e2      	b.n	8007c5c <__smakebuf_r+0xc>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	6020      	str	r0, [r4, #0]
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ca6:	b15b      	cbz	r3, 8007cc0 <__smakebuf_r+0x70>
 8007ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f837 	bl	8007d20 <_isatty_r>
 8007cb2:	b128      	cbz	r0, 8007cc0 <__smakebuf_r+0x70>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	f043 0301 	orr.w	r3, r3, #1
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	431d      	orrs	r5, r3
 8007cc4:	81a5      	strh	r5, [r4, #12]
 8007cc6:	e7cf      	b.n	8007c68 <__smakebuf_r+0x18>

08007cc8 <memmove>:
 8007cc8:	4288      	cmp	r0, r1
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	eb01 0402 	add.w	r4, r1, r2
 8007cd0:	d902      	bls.n	8007cd8 <memmove+0x10>
 8007cd2:	4284      	cmp	r4, r0
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	d807      	bhi.n	8007ce8 <memmove+0x20>
 8007cd8:	1e43      	subs	r3, r0, #1
 8007cda:	42a1      	cmp	r1, r4
 8007cdc:	d008      	beq.n	8007cf0 <memmove+0x28>
 8007cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ce6:	e7f8      	b.n	8007cda <memmove+0x12>
 8007ce8:	4402      	add	r2, r0
 8007cea:	4601      	mov	r1, r0
 8007cec:	428a      	cmp	r2, r1
 8007cee:	d100      	bne.n	8007cf2 <memmove+0x2a>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cfa:	e7f7      	b.n	8007cec <memmove+0x24>

08007cfc <_fstat_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d07      	ldr	r5, [pc, #28]	@ (8007d1c <_fstat_r+0x20>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	f7f9 fd10 	bl	800172e <_fstat>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d102      	bne.n	8007d18 <_fstat_r+0x1c>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b103      	cbz	r3, 8007d18 <_fstat_r+0x1c>
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	2000035c 	.word	0x2000035c

08007d20 <_isatty_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d06      	ldr	r5, [pc, #24]	@ (8007d3c <_isatty_r+0x1c>)
 8007d24:	2300      	movs	r3, #0
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	602b      	str	r3, [r5, #0]
 8007d2c:	f7f9 fd0f 	bl	800174e <_isatty>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_isatty_r+0x1a>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_isatty_r+0x1a>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	2000035c 	.word	0x2000035c

08007d40 <_sbrk_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	@ (8007d5c <_sbrk_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f9 fd18 	bl	8001780 <_sbrk>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_sbrk_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_sbrk_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	2000035c 	.word	0x2000035c

08007d60 <memcpy>:
 8007d60:	440a      	add	r2, r1
 8007d62:	4291      	cmp	r1, r2
 8007d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d68:	d100      	bne.n	8007d6c <memcpy+0xc>
 8007d6a:	4770      	bx	lr
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d76:	4291      	cmp	r1, r2
 8007d78:	d1f9      	bne.n	8007d6e <memcpy+0xe>
 8007d7a:	bd10      	pop	{r4, pc}

08007d7c <_realloc_r>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4680      	mov	r8, r0
 8007d82:	4615      	mov	r5, r2
 8007d84:	460c      	mov	r4, r1
 8007d86:	b921      	cbnz	r1, 8007d92 <_realloc_r+0x16>
 8007d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	f7ff b9d9 	b.w	8007144 <_malloc_r>
 8007d92:	b92a      	cbnz	r2, 8007da0 <_realloc_r+0x24>
 8007d94:	f7ff f96a 	bl	800706c <_free_r>
 8007d98:	2400      	movs	r4, #0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	f000 f81a 	bl	8007dd8 <_malloc_usable_size_r>
 8007da4:	4285      	cmp	r5, r0
 8007da6:	4606      	mov	r6, r0
 8007da8:	d802      	bhi.n	8007db0 <_realloc_r+0x34>
 8007daa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dae:	d8f4      	bhi.n	8007d9a <_realloc_r+0x1e>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7ff f9c6 	bl	8007144 <_malloc_r>
 8007db8:	4607      	mov	r7, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0ec      	beq.n	8007d98 <_realloc_r+0x1c>
 8007dbe:	42b5      	cmp	r5, r6
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	bf28      	it	cs
 8007dc6:	4632      	movcs	r2, r6
 8007dc8:	f7ff ffca 	bl	8007d60 <memcpy>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7ff f94c 	bl	800706c <_free_r>
 8007dd4:	463c      	mov	r4, r7
 8007dd6:	e7e0      	b.n	8007d9a <_realloc_r+0x1e>

08007dd8 <_malloc_usable_size_r>:
 8007dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ddc:	1f18      	subs	r0, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bfbc      	itt	lt
 8007de2:	580b      	ldrlt	r3, [r1, r0]
 8007de4:	18c0      	addlt	r0, r0, r3
 8007de6:	4770      	bx	lr

08007de8 <_init>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr

08007df4 <_fini>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr
