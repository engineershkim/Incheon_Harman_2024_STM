
test004_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080041e0  080041e0  000051e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a0  080042a0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a8  080042a8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a8  080042a8  000052a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042ac  080042ac  000052ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08004318  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004318  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  000106d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  000123c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006aa  00000000  00000000  00012c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179bf  00000000  00000000  00013332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b476  00000000  00000000  0002acf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935c1  00000000  00000000  00036167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c14  00000000  00000000  000c976c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000cc380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041c8 	.word	0x080041c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080041c8 	.word	0x080041c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fbcb 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f825 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f91b 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8ef 	bl	8000764 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000586:	f000 f889 	bl	800069c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart("ADC - Polling");
 800058a:	480c      	ldr	r0, [pc, #48]	@ (80005bc <main+0x4c>)
 800058c:	f000 f9ac 	bl	80008e8 <ProgramStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <main+0x50>)
 8000592:	f000 fc97 	bl	8000ec4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10); // 1 time sampling
 8000596:	210a      	movs	r1, #10
 8000598:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <main+0x50>)
 800059a:	f000 fd47 	bl	800102c <HAL_ADC_PollForConversion>
	  int val1 = HAL_ADC_GetValue(&hadc1);
 800059e:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x50>)
 80005a0:	f000 fedf 	bl	8001362 <HAL_ADC_GetValue>
 80005a4:	4603      	mov	r3, r0
 80005a6:	607b      	str	r3, [r7, #4]

	  //HAL_ADC_Start(&hadc1);
	  //HAL_ADC_PollForConversion(&hadc1, 10); // 1 time sampling
	  //int val2 = HAL_ADC_GetValue(&hadc1);
	  //printf("Joystick Value : (%d,%d)\r\n", val1, val2);
	  printf("Joystick Value X : %d\r\n", val1);
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <main+0x54>)
 80005ac:	f002 fd6a 	bl	8003084 <iprintf>
	  HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	@ 0x64
 80005b2:	f000 fc1f 	bl	8000df4 <HAL_Delay>
  {
 80005b6:	bf00      	nop
 80005b8:	e7ea      	b.n	8000590 <main+0x20>
 80005ba:	bf00      	nop
 80005bc:	080041e0 	.word	0x080041e0
 80005c0:	20000084 	.word	0x20000084
 80005c4:	080041f0 	.word	0x080041f0

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 febc 	bl	8003354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800063c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000642:	2304      	movs	r3, #4
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fbb2 	bl	8001db8 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065a:	f000 f91d 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2102      	movs	r1, #2
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fe14 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 f907 	bl	8000898 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006b0:	4a2a      	ldr	r2, [pc, #168]	@ (800075c <MX_ADC1_Init+0xc0>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <MX_ADC1_Init+0xc4>)
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_ADC1_Init+0xbc>)
 80006fe:	2201      	movs	r2, #1
 8000700:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4815      	ldr	r0, [pc, #84]	@ (8000758 <MX_ADC1_Init+0xbc>)
 8000704:	f000 fb9a 	bl	8000e3c <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800070e:	f000 f8c3 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_ADC1_Init+0xbc>)
 8000724:	f000 fe48 	bl	80013b8 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800072e:	f000 f8b3 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000732:	2301      	movs	r3, #1
 8000734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_ADC1_Init+0xbc>)
 8000740:	f000 fe3a 	bl	80013b8 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800074a:	f000 f8a5 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000084 	.word	0x20000084
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 ffa4 	bl	80026e8 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f877 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000cc 	.word	0x200000cc
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a26      	ldr	r2, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xd4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <MX_GPIO_Init+0xd4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Zaxis_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000844:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xd8>)
 8000846:	f001 fa9d 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_GPIO_Init+0xdc>)
 8000862:	f001 f8f3 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Zaxis_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Zaxis_Pin;
 8000866:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd8>)
 8000880:	f001 f8e4 	bl	8001a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <__io_putchar>:
extern UART_HandleTypeDef huart2;



int __io_putchar(int ch)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch, 1, 10);
 80008ac:	1d39      	adds	r1, r7, #4
 80008ae:	230a      	movs	r3, #10
 80008b0:	2201      	movs	r2, #1
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <__io_putchar+0x20>)
 80008b4:	f001 ff68 	bl	8002788 <HAL_UART_Transmit>
	return ch;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000cc 	.word	0x200000cc

080008c8 <StandBy>:
void StandBy()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//printf()
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80008cc:	bf00      	nop
 80008ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d2:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <StandBy+0x1c>)
 80008d4:	f001 fa3e 	bl	8001d54 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f7      	bne.n	80008ce <StandBy+0x6>
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020800 	.word	0x40020800

080008e8 <ProgramStart>:
void ProgramStart(char * str)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 80008f0:	f000 f816 	bl	8000920 <cls>
	Cursor(0,0);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f81c 	bl	8000934 <Cursor>
	printf("Program Start - %s", str);
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <ProgramStart+0x30>)
 8000900:	f002 fbc0 	bl	8003084 <iprintf>
	printf("Press Blue_button(B1) to Start...\r\n");
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <ProgramStart+0x34>)
 8000906:	f002 fc25 	bl	8003154 <puts>
	StandBy();
 800090a:	f7ff ffdd 	bl	80008c8 <StandBy>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08004208 	.word	0x08004208
 800091c:	0800421c 	.word	0x0800421c

08000920 <cls>:
void cls()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <cls+0x10>)
 8000926:	f002 fbad 	bl	8003084 <iprintf>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08004240 	.word	0x08004240

08000934 <Cursor>:
void Cursor(int x, int y)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", x, y);
 800093e:	f107 000c 	add.w	r0, r7, #12
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4906      	ldr	r1, [pc, #24]	@ (8000960 <Cursor+0x2c>)
 8000948:	f002 fc0c 	bl	8003164 <siprintf>
	//printf("%s", buf);
	puts(buf); //string output function
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fbff 	bl	8003154 <puts>
}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	08004248 	.word	0x08004248

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f001 f810 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <HAL_ADC_MspInit+0x8c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12f      	bne.n	8000a36 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a19      	ldr	r2, [pc, #100]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_ADC_MspInit+0x90>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <HAL_ADC_MspInit+0x94>)
 8000a22:	f001 f813 	bl	8001a4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2012      	movs	r0, #18
 8000a2c:	f000 ffd7 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a30:	2012      	movs	r0, #18
 8000a32:	f000 fff0 	bl	8001a16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40012000 	.word	0x40012000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac2:	f000 ffc3 	bl	8001a4c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 f93f 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <ADC_IRQHandler+0x10>)
 8000b42:	f000 fafe 	bl	8001142 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000084 	.word	0x20000084

08000b50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
  }

  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe7d 	bl	80008a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
  }
  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f002 fbc8 	bl	80033f0 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000114 	.word	0x20000114
 8000c94:	20000268 	.word	0x20000268

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f002 fb87 	bl	80033fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc3f 	bl	8000570 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d00:	080042b0 	.word	0x080042b0
  ldr r2, =_sbss
 8000d04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d08:	20000268 	.word	0x20000268

08000d0c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <DMA1_Stream0_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 fe45 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe0e 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fe5d 	bl	8001a32 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 fe25 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000118 	.word	0x20000118

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000118 	.word	0x20000118

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e033      	b.n	8000eba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdaa 	bl	80009b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d118      	bne.n	8000eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e82:	f023 0302 	bic.w	r3, r3, #2
 8000e86:	f043 0202 	orr.w	r2, r3, #2
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 fbc4 	bl	800161c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eaa:	e001      	b.n	8000eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Start+0x1a>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e097      	b.n	800100e <HAL_ADC_Start+0x14a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d018      	beq.n	8000f26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f04:	4b45      	ldr	r3, [pc, #276]	@ (800101c <HAL_ADC_Start+0x158>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a45      	ldr	r2, [pc, #276]	@ (8001020 <HAL_ADC_Start+0x15c>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9a      	lsrs	r2, r3, #18
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d15f      	bne.n	8000ff4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f72:	d106      	bne.n	8000f82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f78:	f023 0206 	bic.w	r2, r3, #6
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f90:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <HAL_ADC_Start+0x160>)
 8000f92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10f      	bne.n	8000fca <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d129      	bne.n	800100c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	e020      	b.n	800100c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <HAL_ADC_Start+0x164>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d11b      	bne.n	800100c <HAL_ADC_Start+0x148>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d114      	bne.n	800100c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	e00b      	b.n	800100c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f043 0210 	orr.w	r2, r3, #16
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000000 	.word	0x20000000
 8001020:	431bde83 	.word	0x431bde83
 8001024:	40012300 	.word	0x40012300
 8001028:	40012000 	.word	0x40012000

0800102c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001048:	d113      	bne.n	8001072 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001058:	d10b      	bne.n	8001072 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f043 0220 	orr.w	r2, r3, #32
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e063      	b.n	800113a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001072:	f7ff feb3 	bl	8000ddc <HAL_GetTick>
 8001076:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001078:	e021      	b.n	80010be <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d01d      	beq.n	80010be <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_ADC_PollForConversion+0x6c>
 8001088:	f7ff fea8 	bl	8000ddc <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d212      	bcs.n	80010be <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d00b      	beq.n	80010be <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f043 0204 	orr.w	r2, r3, #4
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e03d      	b.n	800113a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d1d6      	bne.n	800107a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f06f 0212 	mvn.w	r2, #18
 80010d4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d123      	bne.n	8001138 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d11f      	bne.n	8001138 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xca>
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f8bd 	bl	800137c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d057      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x190>
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d054      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d139      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001254:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001266:	2b00      	cmp	r3, #0
 8001268:	d12b      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d124      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11d      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d119      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800129c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d105      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 faa6 	bl	8001814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f06f 020c 	mvn.w	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <HAL_ADC_IRQHandler+0x1d6>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d014      	beq.n	8001318 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10d      	bne.n	8001318 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f841 	bl	8001390 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f06f 0201 	mvn.w	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001326:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <HAL_ADC_IRQHandler+0x218>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	f043 0202 	orr.w	r2, r3, #2
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 0220 	mvn.w	r2, #32
 8001348:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f82a 	bl	80013a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 0220 	mvn.w	r2, #32
 8001358:	601a      	str	r2, [r3, #0]
  }
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e113      	b.n	80015fc <HAL_ADC_ConfigChannel+0x244>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d925      	bls.n	8001430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1e      	subs	r3, #30
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43da      	mvns	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	400a      	ands	r2, r1
 8001408:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68d9      	ldr	r1, [r3, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	4603      	mov	r3, r0
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4403      	add	r3, r0
 8001422:	3b1e      	subs	r3, #30
 8001424:	409a      	lsls	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e022      	b.n	8001476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	2207      	movs	r2, #7
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4403      	add	r3, r0
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b06      	cmp	r3, #6
 800147c:	d824      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b05      	subs	r3, #5
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c6:	e04c      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d824      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	@ 0x23
 80014e2:	221f      	movs	r2, #31
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b23      	subs	r3, #35	@ 0x23
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
 8001518:	e023      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	@ 0x41
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b41      	subs	r3, #65	@ 0x41
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <HAL_ADC_ConfigChannel+0x250>)
 8001564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a28      	ldr	r2, [pc, #160]	@ (800160c <HAL_ADC_ConfigChannel+0x254>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d10f      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d10b      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <HAL_ADC_ConfigChannel+0x254>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x1f4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d122      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d111      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_ADC_ConfigChannel+0x25c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <HAL_ADC_ConfigChannel+0x260>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9a      	lsrs	r2, r3, #18
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40012300 	.word	0x40012300
 800160c:	40012000 	.word	0x40012000
 8001610:	10000012 	.word	0x10000012
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001624:	4b79      	ldr	r3, [pc, #484]	@ (800180c <ADC_Init+0x1f0>)
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	4a58      	ldr	r2, [pc, #352]	@ (8001810 <ADC_Init+0x1f4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00f      	b.n	800171a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0202 	bic.w	r2, r2, #2
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	005a      	lsls	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001756:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	035a      	lsls	r2, r3, #13
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e007      	b.n	8001790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	051a      	lsls	r2, r3, #20
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017d2:	025a      	lsls	r2, r3, #9
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	029a      	lsls	r2, r3, #10
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	0f000001 	.word	0x0f000001

08001814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	@ (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	@ (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	@ (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff3e 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff31 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa2 	bl	8001984 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e159      	b.n	8001d1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8148 	bne.w	8001d16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d005      	beq.n	8001a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d130      	bne.n	8001b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d017      	beq.n	8001b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a2 	beq.w	8001d16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b57      	ldr	r3, [pc, #348]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	4a56      	ldr	r2, [pc, #344]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be2:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bee:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_GPIO_Init+0x2ec>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a49      	ldr	r2, [pc, #292]	@ (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x202>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a48      	ldr	r2, [pc, #288]	@ (8001d40 <HAL_GPIO_Init+0x2f4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x1fe>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a47      	ldr	r2, [pc, #284]	@ (8001d44 <HAL_GPIO_Init+0x2f8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x1fa>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a46      	ldr	r2, [pc, #280]	@ (8001d48 <HAL_GPIO_Init+0x2fc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x1f6>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a45      	ldr	r2, [pc, #276]	@ (8001d4c <HAL_GPIO_Init+0x300>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x1f2>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x204>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x204>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x204>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x204>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x204>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	@ (8001d38 <HAL_GPIO_Init+0x2ec>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a2f      	ldr	r2, [pc, #188]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a24      	ldr	r2, [pc, #144]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <HAL_GPIO_Init+0x304>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f aea2 	bls.w	8001a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e267      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d075      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d00c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de2:	4b85      	ldr	r3, [pc, #532]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d112      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b82      	ldr	r3, [pc, #520]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d05b      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d157      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e242      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x74>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6c      	ldr	r2, [pc, #432]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e50:	4b69      	ldr	r3, [pc, #420]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a68      	ldr	r2, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7fe ffb4 	bl	8000ddc <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe ffb0 	bl	8000ddc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	@ 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e207      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xc0>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe ffa0 	bl	8000ddc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ff9c 	bl	8000ddc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1f3      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xe8>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ece:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1c7      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4937      	ldr	r1, [pc, #220]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e03a      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ff55 	bl	8000ddc <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7fe ff51 	bl	8000ddc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1a8      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4925      	ldr	r1, [pc, #148]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff34 	bl	8000ddc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7fe ff30 	bl	8000ddc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e187      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d036      	beq.n	8002010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe ff14 	bl	8000ddc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ff10 	bl	8000ddc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e167      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x200>
 8001fd6:	e01b      	b.n	8002010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe fefd 	bl	8000ddc <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	e00e      	b.n	8002004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe fef9 	bl	8000ddc <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d907      	bls.n	8002004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e150      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470000 	.word	0x42470000
 8002000:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b88      	ldr	r3, [pc, #544]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ea      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8097 	beq.w	800214c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b81      	ldr	r3, [pc, #516]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b7d      	ldr	r3, [pc, #500]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a7c      	ldr	r2, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b7a      	ldr	r3, [pc, #488]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b77      	ldr	r3, [pc, #476]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b74      	ldr	r3, [pc, #464]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a73      	ldr	r2, [pc, #460]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe feb9 	bl	8000ddc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe feb5 	bl	8000ddc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e10c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
 8002094:	4b64      	ldr	r3, [pc, #400]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	4a63      	ldr	r2, [pc, #396]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x30c>
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020c4:	4b58      	ldr	r3, [pc, #352]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a57      	ldr	r2, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d0:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d4:	4a54      	ldr	r2, [pc, #336]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d015      	beq.n	8002110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fe7a 	bl	8000ddc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fe76 	bl	8000ddc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0cb      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ee      	beq.n	80020ec <HAL_RCC_OscConfig+0x334>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe fe64 	bl	8000ddc <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fe60 	bl	8000ddc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0b5      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ee      	bne.n	8002118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a1 	beq.w	8002298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d05c      	beq.n	800221c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d141      	bne.n	80021ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fe34 	bl	8000ddc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fe30 	bl	8000ddc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e087      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	491b      	ldr	r1, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fe09 	bl	8000ddc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fe05 	bl	8000ddc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e05c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x416>
 80021ec:	e054      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fdf2 	bl	8000ddc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fdee 	bl	8000ddc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e045      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
 800221a:	e03d      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e038      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x4ec>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d028      	beq.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d121      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d11a      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800226a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cc      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d044      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d119      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d003      	beq.n	8002366 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e067      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4934      	ldr	r1, [pc, #208]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe fd20 	bl	8000ddc <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fd1c 	bl	8000ddc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fc80 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	08004254 	.word	0x08004254
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b094      	sub	sp, #80	@ 0x50
 800247a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	4b79      	ldr	r3, [pc, #484]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d00d      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002498:	2b08      	cmp	r3, #8
 800249a:	f200 80e1 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x3a>
 80024a6:	e0db      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b73      	ldr	r3, [pc, #460]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x204>)
 80024aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ac:	e0db      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4b73      	ldr	r3, [pc, #460]	@ (800267c <HAL_RCC_GetSysClockFreq+0x208>)
 80024b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024b2:	e0d8      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024be:	4b6d      	ldr	r3, [pc, #436]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	2200      	movs	r2, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024de:	2300      	movs	r3, #0
 80024e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024e6:	4622      	mov	r2, r4
 80024e8:	462b      	mov	r3, r5
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4621      	mov	r1, r4
 8002500:	1a51      	subs	r1, r2, r1
 8002502:	6139      	str	r1, [r7, #16]
 8002504:	4629      	mov	r1, r5
 8002506:	eb63 0301 	sbc.w	r3, r3, r1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002518:	4659      	mov	r1, fp
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002522:	4651      	mov	r1, sl
 8002524:	018a      	lsls	r2, r1, #6
 8002526:	4651      	mov	r1, sl
 8002528:	ebb2 0801 	subs.w	r8, r2, r1
 800252c:	4659      	mov	r1, fp
 800252e:	eb63 0901 	sbc.w	r9, r3, r1
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800253e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002546:	4690      	mov	r8, r2
 8002548:	4699      	mov	r9, r3
 800254a:	4623      	mov	r3, r4
 800254c:	eb18 0303 	adds.w	r3, r8, r3
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	462b      	mov	r3, r5
 8002554:	eb49 0303 	adc.w	r3, r9, r3
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002566:	4629      	mov	r1, r5
 8002568:	024b      	lsls	r3, r1, #9
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002570:	4621      	mov	r1, r4
 8002572:	024a      	lsls	r2, r1, #9
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800257a:	2200      	movs	r2, #0
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800257e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002584:	f7fd fe7c 	bl	8000280 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002590:	e058      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	4618      	mov	r0, r3
 800259c:	4611      	mov	r1, r2
 800259e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0159      	lsls	r1, r3, #5
 80025ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025be:	0150      	lsls	r0, r2, #5
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4641      	mov	r1, r8
 80025c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ca:	4649      	mov	r1, r9
 80025cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025e4:	ebb2 040a 	subs.w	r4, r2, sl
 80025e8:	eb63 050b 	sbc.w	r5, r3, fp
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	00eb      	lsls	r3, r5, #3
 80025f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fa:	00e2      	lsls	r2, r4, #3
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4643      	mov	r3, r8
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	464b      	mov	r3, r9
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261a:	4629      	mov	r1, r5
 800261c:	028b      	lsls	r3, r1, #10
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002624:	4621      	mov	r1, r4
 8002626:	028a      	lsls	r2, r1, #10
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800262e:	2200      	movs	r2, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	61fa      	str	r2, [r7, #28]
 8002634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002638:	f7fd fe22 	bl	8000280 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002654:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x204>)
 8002662:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002668:	4618      	mov	r0, r3
 800266a:	3750      	adds	r7, #80	@ 0x50
 800266c:	46bd      	mov	sp, r7
 800266e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	00f42400 	.word	0x00f42400
 800267c:	007a1200 	.word	0x007a1200

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08004264 	.word	0x08004264

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	@ (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08004264 	.word	0x08004264

080026e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e042      	b.n	8002780 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f99c 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	@ 0x24
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800272a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f973 	bl	8002a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d175      	bne.n	8002894 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Transmit+0x2c>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e06e      	b.n	8002896 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2221      	movs	r2, #33	@ 0x21
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c6:	f7fe fb09 	bl	8000ddc <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d108      	bne.n	80027f4 <HAL_UART_Transmit+0x6c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e003      	b.n	80027fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027fc:	e02e      	b.n	800285c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	@ 0x80
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f848 	bl	800289e <UART_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e03a      	b.n	8002896 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3302      	adds	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e007      	b.n	800284e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1cb      	bne.n	80027fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2140      	movs	r1, #64	@ 0x40
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f814 	bl	800289e <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ae:	e03b      	b.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d037      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b8:	f7fe fa90 	bl	8000ddc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <UART_WaitOnFlagUntilTimeout+0x30>
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e03a      	b.n	8002948 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b80      	cmp	r3, #128	@ 0x80
 80028e4:	d020      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b40      	cmp	r3, #64	@ 0x40
 80028ea:	d01d      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d116      	bne.n	8002928 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f81d 	bl	8002950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2208      	movs	r2, #8
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e00f      	b.n	8002948 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	429a      	cmp	r2, r3
 8002944:	d0b4      	beq.n	80028b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002950:	b480      	push	{r7}
 8002952:	b095      	sub	sp, #84	@ 0x54
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800296e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002978:	643a      	str	r2, [r7, #64]	@ 0x40
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800297e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	61fb      	str	r3, [r7, #28]
   return(result);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d119      	bne.n	80029fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f023 0310 	bic.w	r3, r3, #16
 80029de:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029e8:	61ba      	str	r2, [r7, #24]
 80029ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6979      	ldr	r1, [r7, #20]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	613b      	str	r3, [r7, #16]
   return(result);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a0a:	bf00      	nop
 8002a0c:	3754      	adds	r7, #84	@ 0x54
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b0c0      	sub	sp, #256	@ 0x100
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a34:	68d9      	ldr	r1, [r3, #12]
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	ea40 0301 	orr.w	r3, r0, r1
 8002a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a70:	f021 010c 	bic.w	r1, r1, #12
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	6999      	ldr	r1, [r3, #24]
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	ea40 0301 	orr.w	r3, r0, r1
 8002a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce4 <UART_SetConfig+0x2cc>)
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d005      	beq.n	8002ab8 <UART_SetConfig+0xa0>
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce8 <UART_SetConfig+0x2d0>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d104      	bne.n	8002ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff fe02 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8002abc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ac0:	e003      	b.n	8002aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ac2:	f7ff fde9 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad4:	f040 810c 	bne.w	8002cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	1891      	adds	r1, r2, r2
 8002af0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002af2:	415b      	adcs	r3, r3
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002afa:	4621      	mov	r1, r4
 8002afc:	eb12 0801 	adds.w	r8, r2, r1
 8002b00:	4629      	mov	r1, r5
 8002b02:	eb43 0901 	adc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb49 0303 	adc.w	r3, r9, r3
 8002b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b46:	460b      	mov	r3, r1
 8002b48:	18db      	adds	r3, r3, r3
 8002b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b5c:	f7fd fb90 	bl	8000280 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4b61      	ldr	r3, [pc, #388]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002b66:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	011c      	lsls	r4, r3, #4
 8002b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	1891      	adds	r1, r2, r2
 8002b86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b88:	415b      	adcs	r3, r3
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b90:	4641      	mov	r1, r8
 8002b92:	eb12 0a01 	adds.w	sl, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0b01 	adc.w	fp, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	4692      	mov	sl, r2
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	18db      	adds	r3, r3, r3
 8002be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002be2:	4613      	mov	r3, r2
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bf2:	f7fd fb45 	bl	8000280 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2264      	movs	r2, #100	@ 0x64
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	1acb      	subs	r3, r1, r3
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c12:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002c14:	fba3 2302 	umull	r2, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c20:	441c      	add	r4, r3
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c44:	4641      	mov	r1, r8
 8002c46:	1851      	adds	r1, r2, r1
 8002c48:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	414b      	adcs	r3, r1
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	00cb      	lsls	r3, r1, #3
 8002c60:	4651      	mov	r1, sl
 8002c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c66:	4651      	mov	r1, sl
 8002c68:	00ca      	lsls	r2, r1, #3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4642      	mov	r2, r8
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c78:	464b      	mov	r3, r9
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cae:	f7fd fae7 	bl	8000280 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	2164      	movs	r1, #100	@ 0x64
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3332      	adds	r3, #50	@ 0x32
 8002cca:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <UART_SetConfig+0x2d4>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4422      	add	r2, r4
 8002cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce0:	e106      	b.n	8002ef0 <UART_SetConfig+0x4d8>
 8002ce2:	bf00      	nop
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	6239      	str	r1, [r7, #32]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d12:	4641      	mov	r1, r8
 8002d14:	1854      	adds	r4, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb43 0501 	adc.w	r5, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	00eb      	lsls	r3, r5, #3
 8002d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2a:	00e2      	lsls	r2, r4, #3
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	461d      	mov	r5, r3
 8002d30:	4643      	mov	r3, r8
 8002d32:	18e3      	adds	r3, r4, r3
 8002d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d38:	464b      	mov	r3, r9
 8002d3a:	eb45 0303 	adc.w	r3, r5, r3
 8002d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d5e:	4629      	mov	r1, r5
 8002d60:	008b      	lsls	r3, r1, #2
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d68:	4621      	mov	r1, r4
 8002d6a:	008a      	lsls	r2, r1, #2
 8002d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d70:	f7fd fa86 	bl	8000280 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	011c      	lsls	r4, r3, #4
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d94:	4642      	mov	r2, r8
 8002d96:	464b      	mov	r3, r9
 8002d98:	1891      	adds	r1, r2, r2
 8002d9a:	61b9      	str	r1, [r7, #24]
 8002d9c:	415b      	adcs	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	4641      	mov	r1, r8
 8002da6:	1851      	adds	r1, r2, r1
 8002da8:	6139      	str	r1, [r7, #16]
 8002daa:	4649      	mov	r1, r9
 8002dac:	414b      	adcs	r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	00cb      	lsls	r3, r1, #3
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	00ca      	lsls	r2, r1, #3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	008b      	lsls	r3, r1, #2
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e06:	4641      	mov	r1, r8
 8002e08:	008a      	lsls	r2, r1, #2
 8002e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e0e:	f7fd fa37 	bl	8000280 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	@ 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	@ 0x32
 8002e2c:	4a33      	ldr	r2, [pc, #204]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e38:	441c      	add	r4, r3
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e42:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	415b      	adcs	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e58:	4641      	mov	r1, r8
 8002e5a:	1851      	adds	r1, r2, r1
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	4649      	mov	r1, r9
 8002e60:	414b      	adcs	r3, r1
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e70:	4659      	mov	r1, fp
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4642      	mov	r2, r8
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	eb42 0303 	adc.w	r3, r2, r3
 8002e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002eac:	4649      	mov	r1, r9
 8002eae:	008b      	lsls	r3, r1, #2
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	008a      	lsls	r2, r1, #2
 8002eba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ebe:	f7fd f9df 	bl	8000280 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	@ 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	3332      	adds	r3, #50	@ 0x32
 8002eda:	4a08      	ldr	r2, [pc, #32]	@ (8002efc <UART_SetConfig+0x4e4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4422      	add	r2, r4
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <std>:
 8002f00:	2300      	movs	r3, #0
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	e9c0 3300 	strd	r3, r3, [r0]
 8002f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f0e:	6083      	str	r3, [r0, #8]
 8002f10:	8181      	strh	r1, [r0, #12]
 8002f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f14:	81c2      	strh	r2, [r0, #14]
 8002f16:	6183      	str	r3, [r0, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	305c      	adds	r0, #92	@ 0x5c
 8002f1e:	f000 fa19 	bl	8003354 <memset>
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <std+0x58>)
 8002f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <std+0x5c>)
 8002f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <std+0x60>)
 8002f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <std+0x64>)
 8002f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <std+0x68>)
 8002f34:	6224      	str	r4, [r4, #32]
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d006      	beq.n	8002f48 <std+0x48>
 8002f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f3e:	4294      	cmp	r4, r2
 8002f40:	d002      	beq.n	8002f48 <std+0x48>
 8002f42:	33d0      	adds	r3, #208	@ 0xd0
 8002f44:	429c      	cmp	r4, r3
 8002f46:	d105      	bne.n	8002f54 <std+0x54>
 8002f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f000 ba78 	b.w	8003444 <__retarget_lock_init_recursive>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	080031a5 	.word	0x080031a5
 8002f5c:	080031c7 	.word	0x080031c7
 8002f60:	080031ff 	.word	0x080031ff
 8002f64:	08003223 	.word	0x08003223
 8002f68:	2000011c 	.word	0x2000011c

08002f6c <stdio_exit_handler>:
 8002f6c:	4a02      	ldr	r2, [pc, #8]	@ (8002f78 <stdio_exit_handler+0xc>)
 8002f6e:	4903      	ldr	r1, [pc, #12]	@ (8002f7c <stdio_exit_handler+0x10>)
 8002f70:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <stdio_exit_handler+0x14>)
 8002f72:	f000 b869 	b.w	8003048 <_fwalk_sglue>
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	08003f95 	.word	0x08003f95
 8002f80:	2000001c 	.word	0x2000001c

08002f84 <cleanup_stdio>:
 8002f84:	6841      	ldr	r1, [r0, #4]
 8002f86:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <cleanup_stdio+0x34>)
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	d001      	beq.n	8002f94 <cleanup_stdio+0x10>
 8002f90:	f001 f800 	bl	8003f94 <_fflush_r>
 8002f94:	68a1      	ldr	r1, [r4, #8]
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <cleanup_stdio+0x38>)
 8002f98:	4299      	cmp	r1, r3
 8002f9a:	d002      	beq.n	8002fa2 <cleanup_stdio+0x1e>
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 fff9 	bl	8003f94 <_fflush_r>
 8002fa2:	68e1      	ldr	r1, [r4, #12]
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <cleanup_stdio+0x3c>)
 8002fa6:	4299      	cmp	r1, r3
 8002fa8:	d004      	beq.n	8002fb4 <cleanup_stdio+0x30>
 8002faa:	4620      	mov	r0, r4
 8002fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb0:	f000 bff0 	b.w	8003f94 <_fflush_r>
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000011c 	.word	0x2000011c
 8002fbc:	20000184 	.word	0x20000184
 8002fc0:	200001ec 	.word	0x200001ec

08002fc4 <global_stdio_init.part.0>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <global_stdio_init.part.0+0x30>)
 8002fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8002ff8 <global_stdio_init.part.0+0x34>)
 8002fca:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <global_stdio_init.part.0+0x38>)
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4620      	mov	r0, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	f7ff ff94 	bl	8002f00 <std>
 8002fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2109      	movs	r1, #9
 8002fe0:	f7ff ff8e 	bl	8002f00 <std>
 8002fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002fe8:	2202      	movs	r2, #2
 8002fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fee:	2112      	movs	r1, #18
 8002ff0:	f7ff bf86 	b.w	8002f00 <std>
 8002ff4:	20000254 	.word	0x20000254
 8002ff8:	2000011c 	.word	0x2000011c
 8002ffc:	08002f6d 	.word	0x08002f6d

08003000 <__sfp_lock_acquire>:
 8003000:	4801      	ldr	r0, [pc, #4]	@ (8003008 <__sfp_lock_acquire+0x8>)
 8003002:	f000 ba20 	b.w	8003446 <__retarget_lock_acquire_recursive>
 8003006:	bf00      	nop
 8003008:	2000025d 	.word	0x2000025d

0800300c <__sfp_lock_release>:
 800300c:	4801      	ldr	r0, [pc, #4]	@ (8003014 <__sfp_lock_release+0x8>)
 800300e:	f000 ba1b 	b.w	8003448 <__retarget_lock_release_recursive>
 8003012:	bf00      	nop
 8003014:	2000025d 	.word	0x2000025d

08003018 <__sinit>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff0 	bl	8003000 <__sfp_lock_acquire>
 8003020:	6a23      	ldr	r3, [r4, #32]
 8003022:	b11b      	cbz	r3, 800302c <__sinit+0x14>
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003028:	f7ff bff0 	b.w	800300c <__sfp_lock_release>
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__sinit+0x28>)
 800302e:	6223      	str	r3, [r4, #32]
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__sinit+0x2c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f5      	bne.n	8003024 <__sinit+0xc>
 8003038:	f7ff ffc4 	bl	8002fc4 <global_stdio_init.part.0>
 800303c:	e7f2      	b.n	8003024 <__sinit+0xc>
 800303e:	bf00      	nop
 8003040:	08002f85 	.word	0x08002f85
 8003044:	20000254 	.word	0x20000254

08003048 <_fwalk_sglue>:
 8003048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800304c:	4607      	mov	r7, r0
 800304e:	4688      	mov	r8, r1
 8003050:	4614      	mov	r4, r2
 8003052:	2600      	movs	r6, #0
 8003054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003058:	f1b9 0901 	subs.w	r9, r9, #1
 800305c:	d505      	bpl.n	800306a <_fwalk_sglue+0x22>
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	2c00      	cmp	r4, #0
 8003062:	d1f7      	bne.n	8003054 <_fwalk_sglue+0xc>
 8003064:	4630      	mov	r0, r6
 8003066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306a:	89ab      	ldrh	r3, [r5, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d907      	bls.n	8003080 <_fwalk_sglue+0x38>
 8003070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003074:	3301      	adds	r3, #1
 8003076:	d003      	beq.n	8003080 <_fwalk_sglue+0x38>
 8003078:	4629      	mov	r1, r5
 800307a:	4638      	mov	r0, r7
 800307c:	47c0      	blx	r8
 800307e:	4306      	orrs	r6, r0
 8003080:	3568      	adds	r5, #104	@ 0x68
 8003082:	e7e9      	b.n	8003058 <_fwalk_sglue+0x10>

08003084 <iprintf>:
 8003084:	b40f      	push	{r0, r1, r2, r3}
 8003086:	b507      	push	{r0, r1, r2, lr}
 8003088:	4906      	ldr	r1, [pc, #24]	@ (80030a4 <iprintf+0x20>)
 800308a:	ab04      	add	r3, sp, #16
 800308c:	6808      	ldr	r0, [r1, #0]
 800308e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003092:	6881      	ldr	r1, [r0, #8]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	f000 fc53 	bl	8003940 <_vfiprintf_r>
 800309a:	b003      	add	sp, #12
 800309c:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a0:	b004      	add	sp, #16
 80030a2:	4770      	bx	lr
 80030a4:	20000018 	.word	0x20000018

080030a8 <_puts_r>:
 80030a8:	6a03      	ldr	r3, [r0, #32]
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	6884      	ldr	r4, [r0, #8]
 80030ae:	4605      	mov	r5, r0
 80030b0:	460e      	mov	r6, r1
 80030b2:	b90b      	cbnz	r3, 80030b8 <_puts_r+0x10>
 80030b4:	f7ff ffb0 	bl	8003018 <__sinit>
 80030b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ba:	07db      	lsls	r3, r3, #31
 80030bc:	d405      	bmi.n	80030ca <_puts_r+0x22>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0598      	lsls	r0, r3, #22
 80030c2:	d402      	bmi.n	80030ca <_puts_r+0x22>
 80030c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030c6:	f000 f9be 	bl	8003446 <__retarget_lock_acquire_recursive>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d502      	bpl.n	80030d6 <_puts_r+0x2e>
 80030d0:	6923      	ldr	r3, [r4, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d135      	bne.n	8003142 <_puts_r+0x9a>
 80030d6:	4621      	mov	r1, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 f8e5 	bl	80032a8 <__swsetup_r>
 80030de:	b380      	cbz	r0, 8003142 <_puts_r+0x9a>
 80030e0:	f04f 35ff 	mov.w	r5, #4294967295
 80030e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030e6:	07da      	lsls	r2, r3, #31
 80030e8:	d405      	bmi.n	80030f6 <_puts_r+0x4e>
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	059b      	lsls	r3, r3, #22
 80030ee:	d402      	bmi.n	80030f6 <_puts_r+0x4e>
 80030f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030f2:	f000 f9a9 	bl	8003448 <__retarget_lock_release_recursive>
 80030f6:	4628      	mov	r0, r5
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da04      	bge.n	8003108 <_puts_r+0x60>
 80030fe:	69a2      	ldr	r2, [r4, #24]
 8003100:	429a      	cmp	r2, r3
 8003102:	dc17      	bgt.n	8003134 <_puts_r+0x8c>
 8003104:	290a      	cmp	r1, #10
 8003106:	d015      	beq.n	8003134 <_puts_r+0x8c>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	6022      	str	r2, [r4, #0]
 800310e:	7019      	strb	r1, [r3, #0]
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003116:	3b01      	subs	r3, #1
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	2900      	cmp	r1, #0
 800311c:	d1ed      	bne.n	80030fa <_puts_r+0x52>
 800311e:	2b00      	cmp	r3, #0
 8003120:	da11      	bge.n	8003146 <_puts_r+0x9e>
 8003122:	4622      	mov	r2, r4
 8003124:	210a      	movs	r1, #10
 8003126:	4628      	mov	r0, r5
 8003128:	f000 f87f 	bl	800322a <__swbuf_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d0d7      	beq.n	80030e0 <_puts_r+0x38>
 8003130:	250a      	movs	r5, #10
 8003132:	e7d7      	b.n	80030e4 <_puts_r+0x3c>
 8003134:	4622      	mov	r2, r4
 8003136:	4628      	mov	r0, r5
 8003138:	f000 f877 	bl	800322a <__swbuf_r>
 800313c:	3001      	adds	r0, #1
 800313e:	d1e7      	bne.n	8003110 <_puts_r+0x68>
 8003140:	e7ce      	b.n	80030e0 <_puts_r+0x38>
 8003142:	3e01      	subs	r6, #1
 8003144:	e7e4      	b.n	8003110 <_puts_r+0x68>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	6022      	str	r2, [r4, #0]
 800314c:	220a      	movs	r2, #10
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e7ee      	b.n	8003130 <_puts_r+0x88>
	...

08003154 <puts>:
 8003154:	4b02      	ldr	r3, [pc, #8]	@ (8003160 <puts+0xc>)
 8003156:	4601      	mov	r1, r0
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f7ff bfa5 	b.w	80030a8 <_puts_r>
 800315e:	bf00      	nop
 8003160:	20000018 	.word	0x20000018

08003164 <siprintf>:
 8003164:	b40e      	push	{r1, r2, r3}
 8003166:	b500      	push	{lr}
 8003168:	b09c      	sub	sp, #112	@ 0x70
 800316a:	ab1d      	add	r3, sp, #116	@ 0x74
 800316c:	9002      	str	r0, [sp, #8]
 800316e:	9006      	str	r0, [sp, #24]
 8003170:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003174:	4809      	ldr	r0, [pc, #36]	@ (800319c <siprintf+0x38>)
 8003176:	9107      	str	r1, [sp, #28]
 8003178:	9104      	str	r1, [sp, #16]
 800317a:	4909      	ldr	r1, [pc, #36]	@ (80031a0 <siprintf+0x3c>)
 800317c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003180:	9105      	str	r1, [sp, #20]
 8003182:	6800      	ldr	r0, [r0, #0]
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	a902      	add	r1, sp, #8
 8003188:	f000 fab4 	bl	80036f4 <_svfiprintf_r>
 800318c:	9b02      	ldr	r3, [sp, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	b01c      	add	sp, #112	@ 0x70
 8003194:	f85d eb04 	ldr.w	lr, [sp], #4
 8003198:	b003      	add	sp, #12
 800319a:	4770      	bx	lr
 800319c:	20000018 	.word	0x20000018
 80031a0:	ffff0208 	.word	0xffff0208

080031a4 <__sread>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	460c      	mov	r4, r1
 80031a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ac:	f000 f8fc 	bl	80033a8 <_read_r>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	bfab      	itete	ge
 80031b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031b6:	89a3      	ldrhlt	r3, [r4, #12]
 80031b8:	181b      	addge	r3, r3, r0
 80031ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031be:	bfac      	ite	ge
 80031c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031c2:	81a3      	strhlt	r3, [r4, #12]
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <__swrite>:
 80031c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ca:	461f      	mov	r7, r3
 80031cc:	898b      	ldrh	r3, [r1, #12]
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	4605      	mov	r5, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	4616      	mov	r6, r2
 80031d6:	d505      	bpl.n	80031e4 <__swrite+0x1e>
 80031d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031dc:	2302      	movs	r3, #2
 80031de:	2200      	movs	r2, #0
 80031e0:	f000 f8d0 	bl	8003384 <_lseek_r>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031ee:	81a3      	strh	r3, [r4, #12]
 80031f0:	4632      	mov	r2, r6
 80031f2:	463b      	mov	r3, r7
 80031f4:	4628      	mov	r0, r5
 80031f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031fa:	f000 b8e7 	b.w	80033cc <_write_r>

080031fe <__sseek>:
 80031fe:	b510      	push	{r4, lr}
 8003200:	460c      	mov	r4, r1
 8003202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003206:	f000 f8bd 	bl	8003384 <_lseek_r>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	bf15      	itete	ne
 8003210:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800321a:	81a3      	strheq	r3, [r4, #12]
 800321c:	bf18      	it	ne
 800321e:	81a3      	strhne	r3, [r4, #12]
 8003220:	bd10      	pop	{r4, pc}

08003222 <__sclose>:
 8003222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003226:	f000 b89d 	b.w	8003364 <_close_r>

0800322a <__swbuf_r>:
 800322a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322c:	460e      	mov	r6, r1
 800322e:	4614      	mov	r4, r2
 8003230:	4605      	mov	r5, r0
 8003232:	b118      	cbz	r0, 800323c <__swbuf_r+0x12>
 8003234:	6a03      	ldr	r3, [r0, #32]
 8003236:	b90b      	cbnz	r3, 800323c <__swbuf_r+0x12>
 8003238:	f7ff feee 	bl	8003018 <__sinit>
 800323c:	69a3      	ldr	r3, [r4, #24]
 800323e:	60a3      	str	r3, [r4, #8]
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	071a      	lsls	r2, r3, #28
 8003244:	d501      	bpl.n	800324a <__swbuf_r+0x20>
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	b943      	cbnz	r3, 800325c <__swbuf_r+0x32>
 800324a:	4621      	mov	r1, r4
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f82b 	bl	80032a8 <__swsetup_r>
 8003252:	b118      	cbz	r0, 800325c <__swbuf_r+0x32>
 8003254:	f04f 37ff 	mov.w	r7, #4294967295
 8003258:	4638      	mov	r0, r7
 800325a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	6922      	ldr	r2, [r4, #16]
 8003260:	1a98      	subs	r0, r3, r2
 8003262:	6963      	ldr	r3, [r4, #20]
 8003264:	b2f6      	uxtb	r6, r6
 8003266:	4283      	cmp	r3, r0
 8003268:	4637      	mov	r7, r6
 800326a:	dc05      	bgt.n	8003278 <__swbuf_r+0x4e>
 800326c:	4621      	mov	r1, r4
 800326e:	4628      	mov	r0, r5
 8003270:	f000 fe90 	bl	8003f94 <_fflush_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	d1ed      	bne.n	8003254 <__swbuf_r+0x2a>
 8003278:	68a3      	ldr	r3, [r4, #8]
 800327a:	3b01      	subs	r3, #1
 800327c:	60a3      	str	r3, [r4, #8]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	6022      	str	r2, [r4, #0]
 8003284:	701e      	strb	r6, [r3, #0]
 8003286:	6962      	ldr	r2, [r4, #20]
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	429a      	cmp	r2, r3
 800328c:	d004      	beq.n	8003298 <__swbuf_r+0x6e>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	07db      	lsls	r3, r3, #31
 8003292:	d5e1      	bpl.n	8003258 <__swbuf_r+0x2e>
 8003294:	2e0a      	cmp	r6, #10
 8003296:	d1df      	bne.n	8003258 <__swbuf_r+0x2e>
 8003298:	4621      	mov	r1, r4
 800329a:	4628      	mov	r0, r5
 800329c:	f000 fe7a 	bl	8003f94 <_fflush_r>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d0d9      	beq.n	8003258 <__swbuf_r+0x2e>
 80032a4:	e7d6      	b.n	8003254 <__swbuf_r+0x2a>
	...

080032a8 <__swsetup_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <__swsetup_r+0xa8>)
 80032ac:	4605      	mov	r5, r0
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	460c      	mov	r4, r1
 80032b2:	b118      	cbz	r0, 80032bc <__swsetup_r+0x14>
 80032b4:	6a03      	ldr	r3, [r0, #32]
 80032b6:	b90b      	cbnz	r3, 80032bc <__swsetup_r+0x14>
 80032b8:	f7ff feae 	bl	8003018 <__sinit>
 80032bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c0:	0719      	lsls	r1, r3, #28
 80032c2:	d422      	bmi.n	800330a <__swsetup_r+0x62>
 80032c4:	06da      	lsls	r2, r3, #27
 80032c6:	d407      	bmi.n	80032d8 <__swsetup_r+0x30>
 80032c8:	2209      	movs	r2, #9
 80032ca:	602a      	str	r2, [r5, #0]
 80032cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	e033      	b.n	8003340 <__swsetup_r+0x98>
 80032d8:	0758      	lsls	r0, r3, #29
 80032da:	d512      	bpl.n	8003302 <__swsetup_r+0x5a>
 80032dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032de:	b141      	cbz	r1, 80032f2 <__swsetup_r+0x4a>
 80032e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032e4:	4299      	cmp	r1, r3
 80032e6:	d002      	beq.n	80032ee <__swsetup_r+0x46>
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 f8af 	bl	800344c <_free_r>
 80032ee:	2300      	movs	r3, #0
 80032f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	6063      	str	r3, [r4, #4]
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	b94b      	cbnz	r3, 8003322 <__swsetup_r+0x7a>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003318:	d003      	beq.n	8003322 <__swsetup_r+0x7a>
 800331a:	4621      	mov	r1, r4
 800331c:	4628      	mov	r0, r5
 800331e:	f000 fe87 	bl	8004030 <__smakebuf_r>
 8003322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003326:	f013 0201 	ands.w	r2, r3, #1
 800332a:	d00a      	beq.n	8003342 <__swsetup_r+0x9a>
 800332c:	2200      	movs	r2, #0
 800332e:	60a2      	str	r2, [r4, #8]
 8003330:	6962      	ldr	r2, [r4, #20]
 8003332:	4252      	negs	r2, r2
 8003334:	61a2      	str	r2, [r4, #24]
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	b942      	cbnz	r2, 800334c <__swsetup_r+0xa4>
 800333a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800333e:	d1c5      	bne.n	80032cc <__swsetup_r+0x24>
 8003340:	bd38      	pop	{r3, r4, r5, pc}
 8003342:	0799      	lsls	r1, r3, #30
 8003344:	bf58      	it	pl
 8003346:	6962      	ldrpl	r2, [r4, #20]
 8003348:	60a2      	str	r2, [r4, #8]
 800334a:	e7f4      	b.n	8003336 <__swsetup_r+0x8e>
 800334c:	2000      	movs	r0, #0
 800334e:	e7f7      	b.n	8003340 <__swsetup_r+0x98>
 8003350:	20000018 	.word	0x20000018

08003354 <memset>:
 8003354:	4402      	add	r2, r0
 8003356:	4603      	mov	r3, r0
 8003358:	4293      	cmp	r3, r2
 800335a:	d100      	bne.n	800335e <memset+0xa>
 800335c:	4770      	bx	lr
 800335e:	f803 1b01 	strb.w	r1, [r3], #1
 8003362:	e7f9      	b.n	8003358 <memset+0x4>

08003364 <_close_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d06      	ldr	r5, [pc, #24]	@ (8003380 <_close_r+0x1c>)
 8003368:	2300      	movs	r3, #0
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	602b      	str	r3, [r5, #0]
 8003370:	f7fd fc27 	bl	8000bc2 <_close>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_close_r+0x1a>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_close_r+0x1a>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	20000258 	.word	0x20000258

08003384 <_lseek_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d07      	ldr	r5, [pc, #28]	@ (80033a4 <_lseek_r+0x20>)
 8003388:	4604      	mov	r4, r0
 800338a:	4608      	mov	r0, r1
 800338c:	4611      	mov	r1, r2
 800338e:	2200      	movs	r2, #0
 8003390:	602a      	str	r2, [r5, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f7fd fc3c 	bl	8000c10 <_lseek>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d102      	bne.n	80033a2 <_lseek_r+0x1e>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	b103      	cbz	r3, 80033a2 <_lseek_r+0x1e>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
 80033a4:	20000258 	.word	0x20000258

080033a8 <_read_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4d07      	ldr	r5, [pc, #28]	@ (80033c8 <_read_r+0x20>)
 80033ac:	4604      	mov	r4, r0
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	602a      	str	r2, [r5, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7fd fbca 	bl	8000b50 <_read>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_read_r+0x1e>
 80033c0:	682b      	ldr	r3, [r5, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_read_r+0x1e>
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	20000258 	.word	0x20000258

080033cc <_write_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4d07      	ldr	r5, [pc, #28]	@ (80033ec <_write_r+0x20>)
 80033d0:	4604      	mov	r4, r0
 80033d2:	4608      	mov	r0, r1
 80033d4:	4611      	mov	r1, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	602a      	str	r2, [r5, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7fd fbd5 	bl	8000b8a <_write>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_write_r+0x1e>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_write_r+0x1e>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	20000258 	.word	0x20000258

080033f0 <__errno>:
 80033f0:	4b01      	ldr	r3, [pc, #4]	@ (80033f8 <__errno+0x8>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000018 	.word	0x20000018

080033fc <__libc_init_array>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003434 <__libc_init_array+0x38>)
 8003400:	4c0d      	ldr	r4, [pc, #52]	@ (8003438 <__libc_init_array+0x3c>)
 8003402:	1b64      	subs	r4, r4, r5
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	2600      	movs	r6, #0
 8003408:	42a6      	cmp	r6, r4
 800340a:	d109      	bne.n	8003420 <__libc_init_array+0x24>
 800340c:	4d0b      	ldr	r5, [pc, #44]	@ (800343c <__libc_init_array+0x40>)
 800340e:	4c0c      	ldr	r4, [pc, #48]	@ (8003440 <__libc_init_array+0x44>)
 8003410:	f000 feda 	bl	80041c8 <_init>
 8003414:	1b64      	subs	r4, r4, r5
 8003416:	10a4      	asrs	r4, r4, #2
 8003418:	2600      	movs	r6, #0
 800341a:	42a6      	cmp	r6, r4
 800341c:	d105      	bne.n	800342a <__libc_init_array+0x2e>
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	f855 3b04 	ldr.w	r3, [r5], #4
 8003424:	4798      	blx	r3
 8003426:	3601      	adds	r6, #1
 8003428:	e7ee      	b.n	8003408 <__libc_init_array+0xc>
 800342a:	f855 3b04 	ldr.w	r3, [r5], #4
 800342e:	4798      	blx	r3
 8003430:	3601      	adds	r6, #1
 8003432:	e7f2      	b.n	800341a <__libc_init_array+0x1e>
 8003434:	080042a8 	.word	0x080042a8
 8003438:	080042a8 	.word	0x080042a8
 800343c:	080042a8 	.word	0x080042a8
 8003440:	080042ac 	.word	0x080042ac

08003444 <__retarget_lock_init_recursive>:
 8003444:	4770      	bx	lr

08003446 <__retarget_lock_acquire_recursive>:
 8003446:	4770      	bx	lr

08003448 <__retarget_lock_release_recursive>:
 8003448:	4770      	bx	lr
	...

0800344c <_free_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4605      	mov	r5, r0
 8003450:	2900      	cmp	r1, #0
 8003452:	d041      	beq.n	80034d8 <_free_r+0x8c>
 8003454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003458:	1f0c      	subs	r4, r1, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	bfb8      	it	lt
 800345e:	18e4      	addlt	r4, r4, r3
 8003460:	f000 f8e0 	bl	8003624 <__malloc_lock>
 8003464:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <_free_r+0x90>)
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	b933      	cbnz	r3, 8003478 <_free_r+0x2c>
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	6014      	str	r4, [r2, #0]
 800346e:	4628      	mov	r0, r5
 8003470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003474:	f000 b8dc 	b.w	8003630 <__malloc_unlock>
 8003478:	42a3      	cmp	r3, r4
 800347a:	d908      	bls.n	800348e <_free_r+0x42>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	1821      	adds	r1, r4, r0
 8003480:	428b      	cmp	r3, r1
 8003482:	bf01      	itttt	eq
 8003484:	6819      	ldreq	r1, [r3, #0]
 8003486:	685b      	ldreq	r3, [r3, #4]
 8003488:	1809      	addeq	r1, r1, r0
 800348a:	6021      	streq	r1, [r4, #0]
 800348c:	e7ed      	b.n	800346a <_free_r+0x1e>
 800348e:	461a      	mov	r2, r3
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b10b      	cbz	r3, 8003498 <_free_r+0x4c>
 8003494:	42a3      	cmp	r3, r4
 8003496:	d9fa      	bls.n	800348e <_free_r+0x42>
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	1850      	adds	r0, r2, r1
 800349c:	42a0      	cmp	r0, r4
 800349e:	d10b      	bne.n	80034b8 <_free_r+0x6c>
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	4401      	add	r1, r0
 80034a4:	1850      	adds	r0, r2, r1
 80034a6:	4283      	cmp	r3, r0
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	d1e0      	bne.n	800346e <_free_r+0x22>
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	6053      	str	r3, [r2, #4]
 80034b2:	4408      	add	r0, r1
 80034b4:	6010      	str	r0, [r2, #0]
 80034b6:	e7da      	b.n	800346e <_free_r+0x22>
 80034b8:	d902      	bls.n	80034c0 <_free_r+0x74>
 80034ba:	230c      	movs	r3, #12
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	e7d6      	b.n	800346e <_free_r+0x22>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	1821      	adds	r1, r4, r0
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf04      	itt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	6063      	str	r3, [r4, #4]
 80034ce:	bf04      	itt	eq
 80034d0:	1809      	addeq	r1, r1, r0
 80034d2:	6021      	streq	r1, [r4, #0]
 80034d4:	6054      	str	r4, [r2, #4]
 80034d6:	e7ca      	b.n	800346e <_free_r+0x22>
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	20000264 	.word	0x20000264

080034e0 <sbrk_aligned>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003520 <sbrk_aligned+0x40>)
 80034e4:	460c      	mov	r4, r1
 80034e6:	6831      	ldr	r1, [r6, #0]
 80034e8:	4605      	mov	r5, r0
 80034ea:	b911      	cbnz	r1, 80034f2 <sbrk_aligned+0x12>
 80034ec:	f000 fe18 	bl	8004120 <_sbrk_r>
 80034f0:	6030      	str	r0, [r6, #0]
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 fe13 	bl	8004120 <_sbrk_r>
 80034fa:	1c43      	adds	r3, r0, #1
 80034fc:	d103      	bne.n	8003506 <sbrk_aligned+0x26>
 80034fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003502:	4620      	mov	r0, r4
 8003504:	bd70      	pop	{r4, r5, r6, pc}
 8003506:	1cc4      	adds	r4, r0, #3
 8003508:	f024 0403 	bic.w	r4, r4, #3
 800350c:	42a0      	cmp	r0, r4
 800350e:	d0f8      	beq.n	8003502 <sbrk_aligned+0x22>
 8003510:	1a21      	subs	r1, r4, r0
 8003512:	4628      	mov	r0, r5
 8003514:	f000 fe04 	bl	8004120 <_sbrk_r>
 8003518:	3001      	adds	r0, #1
 800351a:	d1f2      	bne.n	8003502 <sbrk_aligned+0x22>
 800351c:	e7ef      	b.n	80034fe <sbrk_aligned+0x1e>
 800351e:	bf00      	nop
 8003520:	20000260 	.word	0x20000260

08003524 <_malloc_r>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	1ccd      	adds	r5, r1, #3
 800352a:	f025 0503 	bic.w	r5, r5, #3
 800352e:	3508      	adds	r5, #8
 8003530:	2d0c      	cmp	r5, #12
 8003532:	bf38      	it	cc
 8003534:	250c      	movcc	r5, #12
 8003536:	2d00      	cmp	r5, #0
 8003538:	4606      	mov	r6, r0
 800353a:	db01      	blt.n	8003540 <_malloc_r+0x1c>
 800353c:	42a9      	cmp	r1, r5
 800353e:	d904      	bls.n	800354a <_malloc_r+0x26>
 8003540:	230c      	movs	r3, #12
 8003542:	6033      	str	r3, [r6, #0]
 8003544:	2000      	movs	r0, #0
 8003546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800354a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003620 <_malloc_r+0xfc>
 800354e:	f000 f869 	bl	8003624 <__malloc_lock>
 8003552:	f8d8 3000 	ldr.w	r3, [r8]
 8003556:	461c      	mov	r4, r3
 8003558:	bb44      	cbnz	r4, 80035ac <_malloc_r+0x88>
 800355a:	4629      	mov	r1, r5
 800355c:	4630      	mov	r0, r6
 800355e:	f7ff ffbf 	bl	80034e0 <sbrk_aligned>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	4604      	mov	r4, r0
 8003566:	d158      	bne.n	800361a <_malloc_r+0xf6>
 8003568:	f8d8 4000 	ldr.w	r4, [r8]
 800356c:	4627      	mov	r7, r4
 800356e:	2f00      	cmp	r7, #0
 8003570:	d143      	bne.n	80035fa <_malloc_r+0xd6>
 8003572:	2c00      	cmp	r4, #0
 8003574:	d04b      	beq.n	800360e <_malloc_r+0xea>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	4639      	mov	r1, r7
 800357a:	4630      	mov	r0, r6
 800357c:	eb04 0903 	add.w	r9, r4, r3
 8003580:	f000 fdce 	bl	8004120 <_sbrk_r>
 8003584:	4581      	cmp	r9, r0
 8003586:	d142      	bne.n	800360e <_malloc_r+0xea>
 8003588:	6821      	ldr	r1, [r4, #0]
 800358a:	1a6d      	subs	r5, r5, r1
 800358c:	4629      	mov	r1, r5
 800358e:	4630      	mov	r0, r6
 8003590:	f7ff ffa6 	bl	80034e0 <sbrk_aligned>
 8003594:	3001      	adds	r0, #1
 8003596:	d03a      	beq.n	800360e <_malloc_r+0xea>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	442b      	add	r3, r5
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	f8d8 3000 	ldr.w	r3, [r8]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	bb62      	cbnz	r2, 8003600 <_malloc_r+0xdc>
 80035a6:	f8c8 7000 	str.w	r7, [r8]
 80035aa:	e00f      	b.n	80035cc <_malloc_r+0xa8>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	1b52      	subs	r2, r2, r5
 80035b0:	d420      	bmi.n	80035f4 <_malloc_r+0xd0>
 80035b2:	2a0b      	cmp	r2, #11
 80035b4:	d917      	bls.n	80035e6 <_malloc_r+0xc2>
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	6025      	str	r5, [r4, #0]
 80035bc:	bf18      	it	ne
 80035be:	6059      	strne	r1, [r3, #4]
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	bf08      	it	eq
 80035c4:	f8c8 1000 	streq.w	r1, [r8]
 80035c8:	5162      	str	r2, [r4, r5]
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	4630      	mov	r0, r6
 80035ce:	f000 f82f 	bl	8003630 <__malloc_unlock>
 80035d2:	f104 000b 	add.w	r0, r4, #11
 80035d6:	1d23      	adds	r3, r4, #4
 80035d8:	f020 0007 	bic.w	r0, r0, #7
 80035dc:	1ac2      	subs	r2, r0, r3
 80035de:	bf1c      	itt	ne
 80035e0:	1a1b      	subne	r3, r3, r0
 80035e2:	50a3      	strne	r3, [r4, r2]
 80035e4:	e7af      	b.n	8003546 <_malloc_r+0x22>
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	bf0c      	ite	eq
 80035ec:	f8c8 2000 	streq.w	r2, [r8]
 80035f0:	605a      	strne	r2, [r3, #4]
 80035f2:	e7eb      	b.n	80035cc <_malloc_r+0xa8>
 80035f4:	4623      	mov	r3, r4
 80035f6:	6864      	ldr	r4, [r4, #4]
 80035f8:	e7ae      	b.n	8003558 <_malloc_r+0x34>
 80035fa:	463c      	mov	r4, r7
 80035fc:	687f      	ldr	r7, [r7, #4]
 80035fe:	e7b6      	b.n	800356e <_malloc_r+0x4a>
 8003600:	461a      	mov	r2, r3
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	42a3      	cmp	r3, r4
 8003606:	d1fb      	bne.n	8003600 <_malloc_r+0xdc>
 8003608:	2300      	movs	r3, #0
 800360a:	6053      	str	r3, [r2, #4]
 800360c:	e7de      	b.n	80035cc <_malloc_r+0xa8>
 800360e:	230c      	movs	r3, #12
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	4630      	mov	r0, r6
 8003614:	f000 f80c 	bl	8003630 <__malloc_unlock>
 8003618:	e794      	b.n	8003544 <_malloc_r+0x20>
 800361a:	6005      	str	r5, [r0, #0]
 800361c:	e7d6      	b.n	80035cc <_malloc_r+0xa8>
 800361e:	bf00      	nop
 8003620:	20000264 	.word	0x20000264

08003624 <__malloc_lock>:
 8003624:	4801      	ldr	r0, [pc, #4]	@ (800362c <__malloc_lock+0x8>)
 8003626:	f7ff bf0e 	b.w	8003446 <__retarget_lock_acquire_recursive>
 800362a:	bf00      	nop
 800362c:	2000025c 	.word	0x2000025c

08003630 <__malloc_unlock>:
 8003630:	4801      	ldr	r0, [pc, #4]	@ (8003638 <__malloc_unlock+0x8>)
 8003632:	f7ff bf09 	b.w	8003448 <__retarget_lock_release_recursive>
 8003636:	bf00      	nop
 8003638:	2000025c 	.word	0x2000025c

0800363c <__ssputs_r>:
 800363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	688e      	ldr	r6, [r1, #8]
 8003642:	461f      	mov	r7, r3
 8003644:	42be      	cmp	r6, r7
 8003646:	680b      	ldr	r3, [r1, #0]
 8003648:	4682      	mov	sl, r0
 800364a:	460c      	mov	r4, r1
 800364c:	4690      	mov	r8, r2
 800364e:	d82d      	bhi.n	80036ac <__ssputs_r+0x70>
 8003650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003654:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003658:	d026      	beq.n	80036a8 <__ssputs_r+0x6c>
 800365a:	6965      	ldr	r5, [r4, #20]
 800365c:	6909      	ldr	r1, [r1, #16]
 800365e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003662:	eba3 0901 	sub.w	r9, r3, r1
 8003666:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800366a:	1c7b      	adds	r3, r7, #1
 800366c:	444b      	add	r3, r9
 800366e:	106d      	asrs	r5, r5, #1
 8003670:	429d      	cmp	r5, r3
 8003672:	bf38      	it	cc
 8003674:	461d      	movcc	r5, r3
 8003676:	0553      	lsls	r3, r2, #21
 8003678:	d527      	bpl.n	80036ca <__ssputs_r+0x8e>
 800367a:	4629      	mov	r1, r5
 800367c:	f7ff ff52 	bl	8003524 <_malloc_r>
 8003680:	4606      	mov	r6, r0
 8003682:	b360      	cbz	r0, 80036de <__ssputs_r+0xa2>
 8003684:	6921      	ldr	r1, [r4, #16]
 8003686:	464a      	mov	r2, r9
 8003688:	f000 fd5a 	bl	8004140 <memcpy>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	6126      	str	r6, [r4, #16]
 800369a:	6165      	str	r5, [r4, #20]
 800369c:	444e      	add	r6, r9
 800369e:	eba5 0509 	sub.w	r5, r5, r9
 80036a2:	6026      	str	r6, [r4, #0]
 80036a4:	60a5      	str	r5, [r4, #8]
 80036a6:	463e      	mov	r6, r7
 80036a8:	42be      	cmp	r6, r7
 80036aa:	d900      	bls.n	80036ae <__ssputs_r+0x72>
 80036ac:	463e      	mov	r6, r7
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	4632      	mov	r2, r6
 80036b2:	4641      	mov	r1, r8
 80036b4:	f000 fcf8 	bl	80040a8 <memmove>
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	1b9b      	subs	r3, r3, r6
 80036bc:	60a3      	str	r3, [r4, #8]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	4433      	add	r3, r6
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	2000      	movs	r0, #0
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	462a      	mov	r2, r5
 80036cc:	f000 fd46 	bl	800415c <_realloc_r>
 80036d0:	4606      	mov	r6, r0
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d1e0      	bne.n	8003698 <__ssputs_r+0x5c>
 80036d6:	6921      	ldr	r1, [r4, #16]
 80036d8:	4650      	mov	r0, sl
 80036da:	f7ff feb7 	bl	800344c <_free_r>
 80036de:	230c      	movs	r3, #12
 80036e0:	f8ca 3000 	str.w	r3, [sl]
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	e7e9      	b.n	80036c6 <__ssputs_r+0x8a>
	...

080036f4 <_svfiprintf_r>:
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	4698      	mov	r8, r3
 80036fa:	898b      	ldrh	r3, [r1, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	b09d      	sub	sp, #116	@ 0x74
 8003700:	4607      	mov	r7, r0
 8003702:	460d      	mov	r5, r1
 8003704:	4614      	mov	r4, r2
 8003706:	d510      	bpl.n	800372a <_svfiprintf_r+0x36>
 8003708:	690b      	ldr	r3, [r1, #16]
 800370a:	b973      	cbnz	r3, 800372a <_svfiprintf_r+0x36>
 800370c:	2140      	movs	r1, #64	@ 0x40
 800370e:	f7ff ff09 	bl	8003524 <_malloc_r>
 8003712:	6028      	str	r0, [r5, #0]
 8003714:	6128      	str	r0, [r5, #16]
 8003716:	b930      	cbnz	r0, 8003726 <_svfiprintf_r+0x32>
 8003718:	230c      	movs	r3, #12
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	b01d      	add	sp, #116	@ 0x74
 8003722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003726:	2340      	movs	r3, #64	@ 0x40
 8003728:	616b      	str	r3, [r5, #20]
 800372a:	2300      	movs	r3, #0
 800372c:	9309      	str	r3, [sp, #36]	@ 0x24
 800372e:	2320      	movs	r3, #32
 8003730:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003734:	f8cd 800c 	str.w	r8, [sp, #12]
 8003738:	2330      	movs	r3, #48	@ 0x30
 800373a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038d8 <_svfiprintf_r+0x1e4>
 800373e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003742:	f04f 0901 	mov.w	r9, #1
 8003746:	4623      	mov	r3, r4
 8003748:	469a      	mov	sl, r3
 800374a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800374e:	b10a      	cbz	r2, 8003754 <_svfiprintf_r+0x60>
 8003750:	2a25      	cmp	r2, #37	@ 0x25
 8003752:	d1f9      	bne.n	8003748 <_svfiprintf_r+0x54>
 8003754:	ebba 0b04 	subs.w	fp, sl, r4
 8003758:	d00b      	beq.n	8003772 <_svfiprintf_r+0x7e>
 800375a:	465b      	mov	r3, fp
 800375c:	4622      	mov	r2, r4
 800375e:	4629      	mov	r1, r5
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ff6b 	bl	800363c <__ssputs_r>
 8003766:	3001      	adds	r0, #1
 8003768:	f000 80a7 	beq.w	80038ba <_svfiprintf_r+0x1c6>
 800376c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800376e:	445a      	add	r2, fp
 8003770:	9209      	str	r2, [sp, #36]	@ 0x24
 8003772:	f89a 3000 	ldrb.w	r3, [sl]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 809f 	beq.w	80038ba <_svfiprintf_r+0x1c6>
 800377c:	2300      	movs	r3, #0
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003786:	f10a 0a01 	add.w	sl, sl, #1
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	9307      	str	r3, [sp, #28]
 800378e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003792:	931a      	str	r3, [sp, #104]	@ 0x68
 8003794:	4654      	mov	r4, sl
 8003796:	2205      	movs	r2, #5
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	484e      	ldr	r0, [pc, #312]	@ (80038d8 <_svfiprintf_r+0x1e4>)
 800379e:	f7fc fd1f 	bl	80001e0 <memchr>
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	b9d8      	cbnz	r0, 80037de <_svfiprintf_r+0xea>
 80037a6:	06d0      	lsls	r0, r2, #27
 80037a8:	bf44      	itt	mi
 80037aa:	2320      	movmi	r3, #32
 80037ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037b0:	0711      	lsls	r1, r2, #28
 80037b2:	bf44      	itt	mi
 80037b4:	232b      	movmi	r3, #43	@ 0x2b
 80037b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037ba:	f89a 3000 	ldrb.w	r3, [sl]
 80037be:	2b2a      	cmp	r3, #42	@ 0x2a
 80037c0:	d015      	beq.n	80037ee <_svfiprintf_r+0xfa>
 80037c2:	9a07      	ldr	r2, [sp, #28]
 80037c4:	4654      	mov	r4, sl
 80037c6:	2000      	movs	r0, #0
 80037c8:	f04f 0c0a 	mov.w	ip, #10
 80037cc:	4621      	mov	r1, r4
 80037ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d2:	3b30      	subs	r3, #48	@ 0x30
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	d94b      	bls.n	8003870 <_svfiprintf_r+0x17c>
 80037d8:	b1b0      	cbz	r0, 8003808 <_svfiprintf_r+0x114>
 80037da:	9207      	str	r2, [sp, #28]
 80037dc:	e014      	b.n	8003808 <_svfiprintf_r+0x114>
 80037de:	eba0 0308 	sub.w	r3, r0, r8
 80037e2:	fa09 f303 	lsl.w	r3, r9, r3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	46a2      	mov	sl, r4
 80037ec:	e7d2      	b.n	8003794 <_svfiprintf_r+0xa0>
 80037ee:	9b03      	ldr	r3, [sp, #12]
 80037f0:	1d19      	adds	r1, r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	9103      	str	r1, [sp, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bfbb      	ittet	lt
 80037fa:	425b      	neglt	r3, r3
 80037fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003800:	9307      	strge	r3, [sp, #28]
 8003802:	9307      	strlt	r3, [sp, #28]
 8003804:	bfb8      	it	lt
 8003806:	9204      	strlt	r2, [sp, #16]
 8003808:	7823      	ldrb	r3, [r4, #0]
 800380a:	2b2e      	cmp	r3, #46	@ 0x2e
 800380c:	d10a      	bne.n	8003824 <_svfiprintf_r+0x130>
 800380e:	7863      	ldrb	r3, [r4, #1]
 8003810:	2b2a      	cmp	r3, #42	@ 0x2a
 8003812:	d132      	bne.n	800387a <_svfiprintf_r+0x186>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9203      	str	r2, [sp, #12]
 800381c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003820:	3402      	adds	r4, #2
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038e8 <_svfiprintf_r+0x1f4>
 8003828:	7821      	ldrb	r1, [r4, #0]
 800382a:	2203      	movs	r2, #3
 800382c:	4650      	mov	r0, sl
 800382e:	f7fc fcd7 	bl	80001e0 <memchr>
 8003832:	b138      	cbz	r0, 8003844 <_svfiprintf_r+0x150>
 8003834:	9b04      	ldr	r3, [sp, #16]
 8003836:	eba0 000a 	sub.w	r0, r0, sl
 800383a:	2240      	movs	r2, #64	@ 0x40
 800383c:	4082      	lsls	r2, r0
 800383e:	4313      	orrs	r3, r2
 8003840:	3401      	adds	r4, #1
 8003842:	9304      	str	r3, [sp, #16]
 8003844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003848:	4824      	ldr	r0, [pc, #144]	@ (80038dc <_svfiprintf_r+0x1e8>)
 800384a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800384e:	2206      	movs	r2, #6
 8003850:	f7fc fcc6 	bl	80001e0 <memchr>
 8003854:	2800      	cmp	r0, #0
 8003856:	d036      	beq.n	80038c6 <_svfiprintf_r+0x1d2>
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <_svfiprintf_r+0x1ec>)
 800385a:	bb1b      	cbnz	r3, 80038a4 <_svfiprintf_r+0x1b0>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	3307      	adds	r3, #7
 8003860:	f023 0307 	bic.w	r3, r3, #7
 8003864:	3308      	adds	r3, #8
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800386a:	4433      	add	r3, r6
 800386c:	9309      	str	r3, [sp, #36]	@ 0x24
 800386e:	e76a      	b.n	8003746 <_svfiprintf_r+0x52>
 8003870:	fb0c 3202 	mla	r2, ip, r2, r3
 8003874:	460c      	mov	r4, r1
 8003876:	2001      	movs	r0, #1
 8003878:	e7a8      	b.n	80037cc <_svfiprintf_r+0xd8>
 800387a:	2300      	movs	r3, #0
 800387c:	3401      	adds	r4, #1
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0c0a 	mov.w	ip, #10
 8003886:	4620      	mov	r0, r4
 8003888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800388c:	3a30      	subs	r2, #48	@ 0x30
 800388e:	2a09      	cmp	r2, #9
 8003890:	d903      	bls.n	800389a <_svfiprintf_r+0x1a6>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0c6      	beq.n	8003824 <_svfiprintf_r+0x130>
 8003896:	9105      	str	r1, [sp, #20]
 8003898:	e7c4      	b.n	8003824 <_svfiprintf_r+0x130>
 800389a:	fb0c 2101 	mla	r1, ip, r1, r2
 800389e:	4604      	mov	r4, r0
 80038a0:	2301      	movs	r3, #1
 80038a2:	e7f0      	b.n	8003886 <_svfiprintf_r+0x192>
 80038a4:	ab03      	add	r3, sp, #12
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	462a      	mov	r2, r5
 80038aa:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <_svfiprintf_r+0x1f0>)
 80038ac:	a904      	add	r1, sp, #16
 80038ae:	4638      	mov	r0, r7
 80038b0:	f3af 8000 	nop.w
 80038b4:	1c42      	adds	r2, r0, #1
 80038b6:	4606      	mov	r6, r0
 80038b8:	d1d6      	bne.n	8003868 <_svfiprintf_r+0x174>
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	065b      	lsls	r3, r3, #25
 80038be:	f53f af2d 	bmi.w	800371c <_svfiprintf_r+0x28>
 80038c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038c4:	e72c      	b.n	8003720 <_svfiprintf_r+0x2c>
 80038c6:	ab03      	add	r3, sp, #12
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	462a      	mov	r2, r5
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <_svfiprintf_r+0x1f0>)
 80038ce:	a904      	add	r1, sp, #16
 80038d0:	4638      	mov	r0, r7
 80038d2:	f000 f9bb 	bl	8003c4c <_printf_i>
 80038d6:	e7ed      	b.n	80038b4 <_svfiprintf_r+0x1c0>
 80038d8:	0800426c 	.word	0x0800426c
 80038dc:	08004276 	.word	0x08004276
 80038e0:	00000000 	.word	0x00000000
 80038e4:	0800363d 	.word	0x0800363d
 80038e8:	08004272 	.word	0x08004272

080038ec <__sfputc_r>:
 80038ec:	6893      	ldr	r3, [r2, #8]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	b410      	push	{r4}
 80038f4:	6093      	str	r3, [r2, #8]
 80038f6:	da08      	bge.n	800390a <__sfputc_r+0x1e>
 80038f8:	6994      	ldr	r4, [r2, #24]
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	db01      	blt.n	8003902 <__sfputc_r+0x16>
 80038fe:	290a      	cmp	r1, #10
 8003900:	d103      	bne.n	800390a <__sfputc_r+0x1e>
 8003902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003906:	f7ff bc90 	b.w	800322a <__swbuf_r>
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	1c58      	adds	r0, r3, #1
 800390e:	6010      	str	r0, [r2, #0]
 8003910:	7019      	strb	r1, [r3, #0]
 8003912:	4608      	mov	r0, r1
 8003914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003918:	4770      	bx	lr

0800391a <__sfputs_r>:
 800391a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391c:	4606      	mov	r6, r0
 800391e:	460f      	mov	r7, r1
 8003920:	4614      	mov	r4, r2
 8003922:	18d5      	adds	r5, r2, r3
 8003924:	42ac      	cmp	r4, r5
 8003926:	d101      	bne.n	800392c <__sfputs_r+0x12>
 8003928:	2000      	movs	r0, #0
 800392a:	e007      	b.n	800393c <__sfputs_r+0x22>
 800392c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003930:	463a      	mov	r2, r7
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff ffda 	bl	80038ec <__sfputc_r>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d1f3      	bne.n	8003924 <__sfputs_r+0xa>
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003940 <_vfiprintf_r>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	460d      	mov	r5, r1
 8003946:	b09d      	sub	sp, #116	@ 0x74
 8003948:	4614      	mov	r4, r2
 800394a:	4698      	mov	r8, r3
 800394c:	4606      	mov	r6, r0
 800394e:	b118      	cbz	r0, 8003958 <_vfiprintf_r+0x18>
 8003950:	6a03      	ldr	r3, [r0, #32]
 8003952:	b90b      	cbnz	r3, 8003958 <_vfiprintf_r+0x18>
 8003954:	f7ff fb60 	bl	8003018 <__sinit>
 8003958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800395a:	07d9      	lsls	r1, r3, #31
 800395c:	d405      	bmi.n	800396a <_vfiprintf_r+0x2a>
 800395e:	89ab      	ldrh	r3, [r5, #12]
 8003960:	059a      	lsls	r2, r3, #22
 8003962:	d402      	bmi.n	800396a <_vfiprintf_r+0x2a>
 8003964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003966:	f7ff fd6e 	bl	8003446 <__retarget_lock_acquire_recursive>
 800396a:	89ab      	ldrh	r3, [r5, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	d501      	bpl.n	8003974 <_vfiprintf_r+0x34>
 8003970:	692b      	ldr	r3, [r5, #16]
 8003972:	b99b      	cbnz	r3, 800399c <_vfiprintf_r+0x5c>
 8003974:	4629      	mov	r1, r5
 8003976:	4630      	mov	r0, r6
 8003978:	f7ff fc96 	bl	80032a8 <__swsetup_r>
 800397c:	b170      	cbz	r0, 800399c <_vfiprintf_r+0x5c>
 800397e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003980:	07dc      	lsls	r4, r3, #31
 8003982:	d504      	bpl.n	800398e <_vfiprintf_r+0x4e>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	b01d      	add	sp, #116	@ 0x74
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	89ab      	ldrh	r3, [r5, #12]
 8003990:	0598      	lsls	r0, r3, #22
 8003992:	d4f7      	bmi.n	8003984 <_vfiprintf_r+0x44>
 8003994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003996:	f7ff fd57 	bl	8003448 <__retarget_lock_release_recursive>
 800399a:	e7f3      	b.n	8003984 <_vfiprintf_r+0x44>
 800399c:	2300      	movs	r3, #0
 800399e:	9309      	str	r3, [sp, #36]	@ 0x24
 80039a0:	2320      	movs	r3, #32
 80039a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039aa:	2330      	movs	r3, #48	@ 0x30
 80039ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003b5c <_vfiprintf_r+0x21c>
 80039b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039b4:	f04f 0901 	mov.w	r9, #1
 80039b8:	4623      	mov	r3, r4
 80039ba:	469a      	mov	sl, r3
 80039bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c0:	b10a      	cbz	r2, 80039c6 <_vfiprintf_r+0x86>
 80039c2:	2a25      	cmp	r2, #37	@ 0x25
 80039c4:	d1f9      	bne.n	80039ba <_vfiprintf_r+0x7a>
 80039c6:	ebba 0b04 	subs.w	fp, sl, r4
 80039ca:	d00b      	beq.n	80039e4 <_vfiprintf_r+0xa4>
 80039cc:	465b      	mov	r3, fp
 80039ce:	4622      	mov	r2, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7ff ffa1 	bl	800391a <__sfputs_r>
 80039d8:	3001      	adds	r0, #1
 80039da:	f000 80a7 	beq.w	8003b2c <_vfiprintf_r+0x1ec>
 80039de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039e0:	445a      	add	r2, fp
 80039e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80039e4:	f89a 3000 	ldrb.w	r3, [sl]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 809f 	beq.w	8003b2c <_vfiprintf_r+0x1ec>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f8:	f10a 0a01 	add.w	sl, sl, #1
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	9307      	str	r3, [sp, #28]
 8003a00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a06:	4654      	mov	r4, sl
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0e:	4853      	ldr	r0, [pc, #332]	@ (8003b5c <_vfiprintf_r+0x21c>)
 8003a10:	f7fc fbe6 	bl	80001e0 <memchr>
 8003a14:	9a04      	ldr	r2, [sp, #16]
 8003a16:	b9d8      	cbnz	r0, 8003a50 <_vfiprintf_r+0x110>
 8003a18:	06d1      	lsls	r1, r2, #27
 8003a1a:	bf44      	itt	mi
 8003a1c:	2320      	movmi	r3, #32
 8003a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a22:	0713      	lsls	r3, r2, #28
 8003a24:	bf44      	itt	mi
 8003a26:	232b      	movmi	r3, #43	@ 0x2b
 8003a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a32:	d015      	beq.n	8003a60 <_vfiprintf_r+0x120>
 8003a34:	9a07      	ldr	r2, [sp, #28]
 8003a36:	4654      	mov	r4, sl
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f04f 0c0a 	mov.w	ip, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a44:	3b30      	subs	r3, #48	@ 0x30
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d94b      	bls.n	8003ae2 <_vfiprintf_r+0x1a2>
 8003a4a:	b1b0      	cbz	r0, 8003a7a <_vfiprintf_r+0x13a>
 8003a4c:	9207      	str	r2, [sp, #28]
 8003a4e:	e014      	b.n	8003a7a <_vfiprintf_r+0x13a>
 8003a50:	eba0 0308 	sub.w	r3, r0, r8
 8003a54:	fa09 f303 	lsl.w	r3, r9, r3
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	9304      	str	r3, [sp, #16]
 8003a5c:	46a2      	mov	sl, r4
 8003a5e:	e7d2      	b.n	8003a06 <_vfiprintf_r+0xc6>
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	1d19      	adds	r1, r3, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	9103      	str	r1, [sp, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bfbb      	ittet	lt
 8003a6c:	425b      	neglt	r3, r3
 8003a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a72:	9307      	strge	r3, [sp, #28]
 8003a74:	9307      	strlt	r3, [sp, #28]
 8003a76:	bfb8      	it	lt
 8003a78:	9204      	strlt	r2, [sp, #16]
 8003a7a:	7823      	ldrb	r3, [r4, #0]
 8003a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a7e:	d10a      	bne.n	8003a96 <_vfiprintf_r+0x156>
 8003a80:	7863      	ldrb	r3, [r4, #1]
 8003a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a84:	d132      	bne.n	8003aec <_vfiprintf_r+0x1ac>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	1d1a      	adds	r2, r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	9203      	str	r2, [sp, #12]
 8003a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a92:	3402      	adds	r4, #2
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003b6c <_vfiprintf_r+0x22c>
 8003a9a:	7821      	ldrb	r1, [r4, #0]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4650      	mov	r0, sl
 8003aa0:	f7fc fb9e 	bl	80001e0 <memchr>
 8003aa4:	b138      	cbz	r0, 8003ab6 <_vfiprintf_r+0x176>
 8003aa6:	9b04      	ldr	r3, [sp, #16]
 8003aa8:	eba0 000a 	sub.w	r0, r0, sl
 8003aac:	2240      	movs	r2, #64	@ 0x40
 8003aae:	4082      	lsls	r2, r0
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	3401      	adds	r4, #1
 8003ab4:	9304      	str	r3, [sp, #16]
 8003ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aba:	4829      	ldr	r0, [pc, #164]	@ (8003b60 <_vfiprintf_r+0x220>)
 8003abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ac0:	2206      	movs	r2, #6
 8003ac2:	f7fc fb8d 	bl	80001e0 <memchr>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d03f      	beq.n	8003b4a <_vfiprintf_r+0x20a>
 8003aca:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <_vfiprintf_r+0x224>)
 8003acc:	bb1b      	cbnz	r3, 8003b16 <_vfiprintf_r+0x1d6>
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	9303      	str	r3, [sp, #12]
 8003ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003adc:	443b      	add	r3, r7
 8003ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae0:	e76a      	b.n	80039b8 <_vfiprintf_r+0x78>
 8003ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	2001      	movs	r0, #1
 8003aea:	e7a8      	b.n	8003a3e <_vfiprintf_r+0xfe>
 8003aec:	2300      	movs	r3, #0
 8003aee:	3401      	adds	r4, #1
 8003af0:	9305      	str	r3, [sp, #20]
 8003af2:	4619      	mov	r1, r3
 8003af4:	f04f 0c0a 	mov.w	ip, #10
 8003af8:	4620      	mov	r0, r4
 8003afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003afe:	3a30      	subs	r2, #48	@ 0x30
 8003b00:	2a09      	cmp	r2, #9
 8003b02:	d903      	bls.n	8003b0c <_vfiprintf_r+0x1cc>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0c6      	beq.n	8003a96 <_vfiprintf_r+0x156>
 8003b08:	9105      	str	r1, [sp, #20]
 8003b0a:	e7c4      	b.n	8003a96 <_vfiprintf_r+0x156>
 8003b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b10:	4604      	mov	r4, r0
 8003b12:	2301      	movs	r3, #1
 8003b14:	e7f0      	b.n	8003af8 <_vfiprintf_r+0x1b8>
 8003b16:	ab03      	add	r3, sp, #12
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	462a      	mov	r2, r5
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <_vfiprintf_r+0x228>)
 8003b1e:	a904      	add	r1, sp, #16
 8003b20:	4630      	mov	r0, r6
 8003b22:	f3af 8000 	nop.w
 8003b26:	4607      	mov	r7, r0
 8003b28:	1c78      	adds	r0, r7, #1
 8003b2a:	d1d6      	bne.n	8003ada <_vfiprintf_r+0x19a>
 8003b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b2e:	07d9      	lsls	r1, r3, #31
 8003b30:	d405      	bmi.n	8003b3e <_vfiprintf_r+0x1fe>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	059a      	lsls	r2, r3, #22
 8003b36:	d402      	bmi.n	8003b3e <_vfiprintf_r+0x1fe>
 8003b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b3a:	f7ff fc85 	bl	8003448 <__retarget_lock_release_recursive>
 8003b3e:	89ab      	ldrh	r3, [r5, #12]
 8003b40:	065b      	lsls	r3, r3, #25
 8003b42:	f53f af1f 	bmi.w	8003984 <_vfiprintf_r+0x44>
 8003b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b48:	e71e      	b.n	8003988 <_vfiprintf_r+0x48>
 8003b4a:	ab03      	add	r3, sp, #12
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <_vfiprintf_r+0x228>)
 8003b52:	a904      	add	r1, sp, #16
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 f879 	bl	8003c4c <_printf_i>
 8003b5a:	e7e4      	b.n	8003b26 <_vfiprintf_r+0x1e6>
 8003b5c:	0800426c 	.word	0x0800426c
 8003b60:	08004276 	.word	0x08004276
 8003b64:	00000000 	.word	0x00000000
 8003b68:	0800391b 	.word	0x0800391b
 8003b6c:	08004272 	.word	0x08004272

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4616      	mov	r6, r2
 8003b76:	4698      	mov	r8, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bfb8      	it	lt
 8003b84:	4613      	movlt	r3, r2
 8003b86:	6033      	str	r3, [r6, #0]
 8003b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	b10a      	cbz	r2, 8003b96 <_printf_common+0x26>
 8003b92:	3301      	adds	r3, #1
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	0699      	lsls	r1, r3, #26
 8003b9a:	bf42      	ittt	mi
 8003b9c:	6833      	ldrmi	r3, [r6, #0]
 8003b9e:	3302      	addmi	r3, #2
 8003ba0:	6033      	strmi	r3, [r6, #0]
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	f015 0506 	ands.w	r5, r5, #6
 8003ba8:	d106      	bne.n	8003bb8 <_printf_common+0x48>
 8003baa:	f104 0a19 	add.w	sl, r4, #25
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	6832      	ldr	r2, [r6, #0]
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	dc26      	bgt.n	8003c06 <_printf_common+0x96>
 8003bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	3b00      	subs	r3, #0
 8003bc0:	bf18      	it	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	0692      	lsls	r2, r2, #26
 8003bc6:	d42b      	bmi.n	8003c20 <_printf_common+0xb0>
 8003bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bcc:	4641      	mov	r1, r8
 8003bce:	4638      	mov	r0, r7
 8003bd0:	47c8      	blx	r9
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d01e      	beq.n	8003c14 <_printf_common+0xa4>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf02      	ittt	eq
 8003be2:	68e5      	ldreq	r5, [r4, #12]
 8003be4:	6833      	ldreq	r3, [r6, #0]
 8003be6:	1aed      	subeq	r5, r5, r3
 8003be8:	68a3      	ldr	r3, [r4, #8]
 8003bea:	bf0c      	ite	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	2500      	movne	r5, #0
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bfc4      	itt	gt
 8003bf6:	1a9b      	subgt	r3, r3, r2
 8003bf8:	18ed      	addgt	r5, r5, r3
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	341a      	adds	r4, #26
 8003bfe:	42b5      	cmp	r5, r6
 8003c00:	d11a      	bne.n	8003c38 <_printf_common+0xc8>
 8003c02:	2000      	movs	r0, #0
 8003c04:	e008      	b.n	8003c18 <_printf_common+0xa8>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4652      	mov	r2, sl
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	47c8      	blx	r9
 8003c10:	3001      	adds	r0, #1
 8003c12:	d103      	bne.n	8003c1c <_printf_common+0xac>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7c6      	b.n	8003bae <_printf_common+0x3e>
 8003c20:	18e1      	adds	r1, r4, r3
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	2030      	movs	r0, #48	@ 0x30
 8003c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c2a:	4422      	add	r2, r4
 8003c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c34:	3302      	adds	r3, #2
 8003c36:	e7c7      	b.n	8003bc8 <_printf_common+0x58>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	4638      	mov	r0, r7
 8003c40:	47c8      	blx	r9
 8003c42:	3001      	adds	r0, #1
 8003c44:	d0e6      	beq.n	8003c14 <_printf_common+0xa4>
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7d9      	b.n	8003bfe <_printf_common+0x8e>
	...

08003c4c <_printf_i>:
 8003c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	7e0f      	ldrb	r7, [r1, #24]
 8003c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c54:	2f78      	cmp	r7, #120	@ 0x78
 8003c56:	4691      	mov	r9, r2
 8003c58:	4680      	mov	r8, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	469a      	mov	sl, r3
 8003c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c62:	d807      	bhi.n	8003c74 <_printf_i+0x28>
 8003c64:	2f62      	cmp	r7, #98	@ 0x62
 8003c66:	d80a      	bhi.n	8003c7e <_printf_i+0x32>
 8003c68:	2f00      	cmp	r7, #0
 8003c6a:	f000 80d2 	beq.w	8003e12 <_printf_i+0x1c6>
 8003c6e:	2f58      	cmp	r7, #88	@ 0x58
 8003c70:	f000 80b9 	beq.w	8003de6 <_printf_i+0x19a>
 8003c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c7c:	e03a      	b.n	8003cf4 <_printf_i+0xa8>
 8003c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c82:	2b15      	cmp	r3, #21
 8003c84:	d8f6      	bhi.n	8003c74 <_printf_i+0x28>
 8003c86:	a101      	add	r1, pc, #4	@ (adr r1, 8003c8c <_printf_i+0x40>)
 8003c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003cf9 	.word	0x08003cf9
 8003c94:	08003c75 	.word	0x08003c75
 8003c98:	08003c75 	.word	0x08003c75
 8003c9c:	08003c75 	.word	0x08003c75
 8003ca0:	08003c75 	.word	0x08003c75
 8003ca4:	08003cf9 	.word	0x08003cf9
 8003ca8:	08003c75 	.word	0x08003c75
 8003cac:	08003c75 	.word	0x08003c75
 8003cb0:	08003c75 	.word	0x08003c75
 8003cb4:	08003c75 	.word	0x08003c75
 8003cb8:	08003df9 	.word	0x08003df9
 8003cbc:	08003d23 	.word	0x08003d23
 8003cc0:	08003db3 	.word	0x08003db3
 8003cc4:	08003c75 	.word	0x08003c75
 8003cc8:	08003c75 	.word	0x08003c75
 8003ccc:	08003e1b 	.word	0x08003e1b
 8003cd0:	08003c75 	.word	0x08003c75
 8003cd4:	08003d23 	.word	0x08003d23
 8003cd8:	08003c75 	.word	0x08003c75
 8003cdc:	08003c75 	.word	0x08003c75
 8003ce0:	08003dbb 	.word	0x08003dbb
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6032      	str	r2, [r6, #0]
 8003cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e09d      	b.n	8003e34 <_printf_i+0x1e8>
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	1d19      	adds	r1, r3, #4
 8003cfe:	6031      	str	r1, [r6, #0]
 8003d00:	0606      	lsls	r6, r0, #24
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0xbc>
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	e003      	b.n	8003d10 <_printf_i+0xc4>
 8003d08:	0645      	lsls	r5, r0, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0xb8>
 8003d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	da03      	bge.n	8003d1c <_printf_i+0xd0>
 8003d14:	232d      	movs	r3, #45	@ 0x2d
 8003d16:	426d      	negs	r5, r5
 8003d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d1c:	4859      	ldr	r0, [pc, #356]	@ (8003e84 <_printf_i+0x238>)
 8003d1e:	230a      	movs	r3, #10
 8003d20:	e011      	b.n	8003d46 <_printf_i+0xfa>
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	6833      	ldr	r3, [r6, #0]
 8003d26:	0608      	lsls	r0, r1, #24
 8003d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d2c:	d402      	bmi.n	8003d34 <_printf_i+0xe8>
 8003d2e:	0649      	lsls	r1, r1, #25
 8003d30:	bf48      	it	mi
 8003d32:	b2ad      	uxthmi	r5, r5
 8003d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d36:	4853      	ldr	r0, [pc, #332]	@ (8003e84 <_printf_i+0x238>)
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	bf14      	ite	ne
 8003d3c:	230a      	movne	r3, #10
 8003d3e:	2308      	moveq	r3, #8
 8003d40:	2100      	movs	r1, #0
 8003d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d46:	6866      	ldr	r6, [r4, #4]
 8003d48:	60a6      	str	r6, [r4, #8]
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	bfa2      	ittt	ge
 8003d4e:	6821      	ldrge	r1, [r4, #0]
 8003d50:	f021 0104 	bicge.w	r1, r1, #4
 8003d54:	6021      	strge	r1, [r4, #0]
 8003d56:	b90d      	cbnz	r5, 8003d5c <_printf_i+0x110>
 8003d58:	2e00      	cmp	r6, #0
 8003d5a:	d04b      	beq.n	8003df4 <_printf_i+0x1a8>
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d62:	fb03 5711 	mls	r7, r3, r1, r5
 8003d66:	5dc7      	ldrb	r7, [r0, r7]
 8003d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d6c:	462f      	mov	r7, r5
 8003d6e:	42bb      	cmp	r3, r7
 8003d70:	460d      	mov	r5, r1
 8003d72:	d9f4      	bls.n	8003d5e <_printf_i+0x112>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <_printf_i+0x144>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07df      	lsls	r7, r3, #31
 8003d7c:	d508      	bpl.n	8003d90 <_printf_i+0x144>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6861      	ldr	r1, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	bfde      	ittt	le
 8003d86:	2330      	movle	r3, #48	@ 0x30
 8003d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d90:	1b92      	subs	r2, r2, r6
 8003d92:	6122      	str	r2, [r4, #16]
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	464b      	mov	r3, r9
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fee6 	bl	8003b70 <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14a      	bne.n	8003e3e <_printf_i+0x1f2>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b004      	add	sp, #16
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	4833      	ldr	r0, [pc, #204]	@ (8003e88 <_printf_i+0x23c>)
 8003dbc:	2778      	movs	r7, #120	@ 0x78
 8003dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	6831      	ldr	r1, [r6, #0]
 8003dc6:	061f      	lsls	r7, r3, #24
 8003dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dcc:	d402      	bmi.n	8003dd4 <_printf_i+0x188>
 8003dce:	065f      	lsls	r7, r3, #25
 8003dd0:	bf48      	it	mi
 8003dd2:	b2ad      	uxthmi	r5, r5
 8003dd4:	6031      	str	r1, [r6, #0]
 8003dd6:	07d9      	lsls	r1, r3, #31
 8003dd8:	bf44      	itt	mi
 8003dda:	f043 0320 	orrmi.w	r3, r3, #32
 8003dde:	6023      	strmi	r3, [r4, #0]
 8003de0:	b11d      	cbz	r5, 8003dea <_printf_i+0x19e>
 8003de2:	2310      	movs	r3, #16
 8003de4:	e7ac      	b.n	8003d40 <_printf_i+0xf4>
 8003de6:	4827      	ldr	r0, [pc, #156]	@ (8003e84 <_printf_i+0x238>)
 8003de8:	e7e9      	b.n	8003dbe <_printf_i+0x172>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	f023 0320 	bic.w	r3, r3, #32
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	e7f6      	b.n	8003de2 <_printf_i+0x196>
 8003df4:	4616      	mov	r6, r2
 8003df6:	e7bd      	b.n	8003d74 <_printf_i+0x128>
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	6961      	ldr	r1, [r4, #20]
 8003dfe:	1d18      	adds	r0, r3, #4
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	062e      	lsls	r6, r5, #24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	d501      	bpl.n	8003e0c <_printf_i+0x1c0>
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <_printf_i+0x1c6>
 8003e0c:	0668      	lsls	r0, r5, #25
 8003e0e:	d5fb      	bpl.n	8003e08 <_printf_i+0x1bc>
 8003e10:	8019      	strh	r1, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	4616      	mov	r6, r2
 8003e18:	e7bc      	b.n	8003d94 <_printf_i+0x148>
 8003e1a:	6833      	ldr	r3, [r6, #0]
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	6032      	str	r2, [r6, #0]
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7fc f9da 	bl	80001e0 <memchr>
 8003e2c:	b108      	cbz	r0, 8003e32 <_printf_i+0x1e6>
 8003e2e:	1b80      	subs	r0, r0, r6
 8003e30:	6060      	str	r0, [r4, #4]
 8003e32:	6863      	ldr	r3, [r4, #4]
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	2300      	movs	r3, #0
 8003e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e3c:	e7aa      	b.n	8003d94 <_printf_i+0x148>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	4632      	mov	r2, r6
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	47d0      	blx	sl
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0ad      	beq.n	8003da8 <_printf_i+0x15c>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	079b      	lsls	r3, r3, #30
 8003e50:	d413      	bmi.n	8003e7a <_printf_i+0x22e>
 8003e52:	68e0      	ldr	r0, [r4, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	4298      	cmp	r0, r3
 8003e58:	bfb8      	it	lt
 8003e5a:	4618      	movlt	r0, r3
 8003e5c:	e7a6      	b.n	8003dac <_printf_i+0x160>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4632      	mov	r2, r6
 8003e62:	4649      	mov	r1, r9
 8003e64:	4640      	mov	r0, r8
 8003e66:	47d0      	blx	sl
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d09d      	beq.n	8003da8 <_printf_i+0x15c>
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	9903      	ldr	r1, [sp, #12]
 8003e72:	1a5b      	subs	r3, r3, r1
 8003e74:	42ab      	cmp	r3, r5
 8003e76:	dcf2      	bgt.n	8003e5e <_printf_i+0x212>
 8003e78:	e7eb      	b.n	8003e52 <_printf_i+0x206>
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	f104 0619 	add.w	r6, r4, #25
 8003e80:	e7f5      	b.n	8003e6e <_printf_i+0x222>
 8003e82:	bf00      	nop
 8003e84:	0800427d 	.word	0x0800427d
 8003e88:	0800428e 	.word	0x0800428e

08003e8c <__sflush_r>:
 8003e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	0716      	lsls	r6, r2, #28
 8003e96:	4605      	mov	r5, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	d454      	bmi.n	8003f46 <__sflush_r+0xba>
 8003e9c:	684b      	ldr	r3, [r1, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	dc02      	bgt.n	8003ea8 <__sflush_r+0x1c>
 8003ea2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	dd48      	ble.n	8003f3a <__sflush_r+0xae>
 8003ea8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	d045      	beq.n	8003f3a <__sflush_r+0xae>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003eb4:	682f      	ldr	r7, [r5, #0]
 8003eb6:	6a21      	ldr	r1, [r4, #32]
 8003eb8:	602b      	str	r3, [r5, #0]
 8003eba:	d030      	beq.n	8003f1e <__sflush_r+0x92>
 8003ebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	0759      	lsls	r1, r3, #29
 8003ec2:	d505      	bpl.n	8003ed0 <__sflush_r+0x44>
 8003ec4:	6863      	ldr	r3, [r4, #4]
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003eca:	b10b      	cbz	r3, 8003ed0 <__sflush_r+0x44>
 8003ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ed4:	6a21      	ldr	r1, [r4, #32]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b0      	blx	r6
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	d106      	bne.n	8003eee <__sflush_r+0x62>
 8003ee0:	6829      	ldr	r1, [r5, #0]
 8003ee2:	291d      	cmp	r1, #29
 8003ee4:	d82b      	bhi.n	8003f3e <__sflush_r+0xb2>
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f90 <__sflush_r+0x104>)
 8003ee8:	410a      	asrs	r2, r1
 8003eea:	07d6      	lsls	r6, r2, #31
 8003eec:	d427      	bmi.n	8003f3e <__sflush_r+0xb2>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	6062      	str	r2, [r4, #4]
 8003ef2:	04d9      	lsls	r1, r3, #19
 8003ef4:	6922      	ldr	r2, [r4, #16]
 8003ef6:	6022      	str	r2, [r4, #0]
 8003ef8:	d504      	bpl.n	8003f04 <__sflush_r+0x78>
 8003efa:	1c42      	adds	r2, r0, #1
 8003efc:	d101      	bne.n	8003f02 <__sflush_r+0x76>
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	b903      	cbnz	r3, 8003f04 <__sflush_r+0x78>
 8003f02:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f06:	602f      	str	r7, [r5, #0]
 8003f08:	b1b9      	cbz	r1, 8003f3a <__sflush_r+0xae>
 8003f0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d002      	beq.n	8003f18 <__sflush_r+0x8c>
 8003f12:	4628      	mov	r0, r5
 8003f14:	f7ff fa9a 	bl	800344c <_free_r>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f1c:	e00d      	b.n	8003f3a <__sflush_r+0xae>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b0      	blx	r6
 8003f24:	4602      	mov	r2, r0
 8003f26:	1c50      	adds	r0, r2, #1
 8003f28:	d1c9      	bne.n	8003ebe <__sflush_r+0x32>
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0c6      	beq.n	8003ebe <__sflush_r+0x32>
 8003f30:	2b1d      	cmp	r3, #29
 8003f32:	d001      	beq.n	8003f38 <__sflush_r+0xac>
 8003f34:	2b16      	cmp	r3, #22
 8003f36:	d11e      	bne.n	8003f76 <__sflush_r+0xea>
 8003f38:	602f      	str	r7, [r5, #0]
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	e022      	b.n	8003f84 <__sflush_r+0xf8>
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f42:	b21b      	sxth	r3, r3
 8003f44:	e01b      	b.n	8003f7e <__sflush_r+0xf2>
 8003f46:	690f      	ldr	r7, [r1, #16]
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	d0f6      	beq.n	8003f3a <__sflush_r+0xae>
 8003f4c:	0793      	lsls	r3, r2, #30
 8003f4e:	680e      	ldr	r6, [r1, #0]
 8003f50:	bf08      	it	eq
 8003f52:	694b      	ldreq	r3, [r1, #20]
 8003f54:	600f      	str	r7, [r1, #0]
 8003f56:	bf18      	it	ne
 8003f58:	2300      	movne	r3, #0
 8003f5a:	eba6 0807 	sub.w	r8, r6, r7
 8003f5e:	608b      	str	r3, [r1, #8]
 8003f60:	f1b8 0f00 	cmp.w	r8, #0
 8003f64:	dde9      	ble.n	8003f3a <__sflush_r+0xae>
 8003f66:	6a21      	ldr	r1, [r4, #32]
 8003f68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f6a:	4643      	mov	r3, r8
 8003f6c:	463a      	mov	r2, r7
 8003f6e:	4628      	mov	r0, r5
 8003f70:	47b0      	blx	r6
 8003f72:	2800      	cmp	r0, #0
 8003f74:	dc08      	bgt.n	8003f88 <__sflush_r+0xfc>
 8003f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f88:	4407      	add	r7, r0
 8003f8a:	eba8 0800 	sub.w	r8, r8, r0
 8003f8e:	e7e7      	b.n	8003f60 <__sflush_r+0xd4>
 8003f90:	dfbffffe 	.word	0xdfbffffe

08003f94 <_fflush_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	690b      	ldr	r3, [r1, #16]
 8003f98:	4605      	mov	r5, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	b913      	cbnz	r3, 8003fa4 <_fflush_r+0x10>
 8003f9e:	2500      	movs	r5, #0
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	b118      	cbz	r0, 8003fae <_fflush_r+0x1a>
 8003fa6:	6a03      	ldr	r3, [r0, #32]
 8003fa8:	b90b      	cbnz	r3, 8003fae <_fflush_r+0x1a>
 8003faa:	f7ff f835 	bl	8003018 <__sinit>
 8003fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f3      	beq.n	8003f9e <_fflush_r+0xa>
 8003fb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fb8:	07d0      	lsls	r0, r2, #31
 8003fba:	d404      	bmi.n	8003fc6 <_fflush_r+0x32>
 8003fbc:	0599      	lsls	r1, r3, #22
 8003fbe:	d402      	bmi.n	8003fc6 <_fflush_r+0x32>
 8003fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fc2:	f7ff fa40 	bl	8003446 <__retarget_lock_acquire_recursive>
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	4621      	mov	r1, r4
 8003fca:	f7ff ff5f 	bl	8003e8c <__sflush_r>
 8003fce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fd0:	07da      	lsls	r2, r3, #31
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	d4e4      	bmi.n	8003fa0 <_fflush_r+0xc>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	059b      	lsls	r3, r3, #22
 8003fda:	d4e1      	bmi.n	8003fa0 <_fflush_r+0xc>
 8003fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fde:	f7ff fa33 	bl	8003448 <__retarget_lock_release_recursive>
 8003fe2:	e7dd      	b.n	8003fa0 <_fflush_r+0xc>

08003fe4 <__swhatbuf_r>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fec:	2900      	cmp	r1, #0
 8003fee:	b096      	sub	sp, #88	@ 0x58
 8003ff0:	4615      	mov	r5, r2
 8003ff2:	461e      	mov	r6, r3
 8003ff4:	da0d      	bge.n	8004012 <__swhatbuf_r+0x2e>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	bf14      	ite	ne
 8004002:	2340      	movne	r3, #64	@ 0x40
 8004004:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004008:	2000      	movs	r0, #0
 800400a:	6031      	str	r1, [r6, #0]
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	b016      	add	sp, #88	@ 0x58
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	466a      	mov	r2, sp
 8004014:	f000 f862 	bl	80040dc <_fstat_r>
 8004018:	2800      	cmp	r0, #0
 800401a:	dbec      	blt.n	8003ff6 <__swhatbuf_r+0x12>
 800401c:	9901      	ldr	r1, [sp, #4]
 800401e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004022:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004026:	4259      	negs	r1, r3
 8004028:	4159      	adcs	r1, r3
 800402a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800402e:	e7eb      	b.n	8004008 <__swhatbuf_r+0x24>

08004030 <__smakebuf_r>:
 8004030:	898b      	ldrh	r3, [r1, #12]
 8004032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004034:	079d      	lsls	r5, r3, #30
 8004036:	4606      	mov	r6, r0
 8004038:	460c      	mov	r4, r1
 800403a:	d507      	bpl.n	800404c <__smakebuf_r+0x1c>
 800403c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	2301      	movs	r3, #1
 8004046:	6163      	str	r3, [r4, #20]
 8004048:	b003      	add	sp, #12
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404c:	ab01      	add	r3, sp, #4
 800404e:	466a      	mov	r2, sp
 8004050:	f7ff ffc8 	bl	8003fe4 <__swhatbuf_r>
 8004054:	9f00      	ldr	r7, [sp, #0]
 8004056:	4605      	mov	r5, r0
 8004058:	4639      	mov	r1, r7
 800405a:	4630      	mov	r0, r6
 800405c:	f7ff fa62 	bl	8003524 <_malloc_r>
 8004060:	b948      	cbnz	r0, 8004076 <__smakebuf_r+0x46>
 8004062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004066:	059a      	lsls	r2, r3, #22
 8004068:	d4ee      	bmi.n	8004048 <__smakebuf_r+0x18>
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	e7e2      	b.n	800403c <__smakebuf_r+0xc>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	6020      	str	r0, [r4, #0]
 800407a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	9b01      	ldr	r3, [sp, #4]
 8004082:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004086:	b15b      	cbz	r3, 80040a0 <__smakebuf_r+0x70>
 8004088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800408c:	4630      	mov	r0, r6
 800408e:	f000 f837 	bl	8004100 <_isatty_r>
 8004092:	b128      	cbz	r0, 80040a0 <__smakebuf_r+0x70>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	431d      	orrs	r5, r3
 80040a4:	81a5      	strh	r5, [r4, #12]
 80040a6:	e7cf      	b.n	8004048 <__smakebuf_r+0x18>

080040a8 <memmove>:
 80040a8:	4288      	cmp	r0, r1
 80040aa:	b510      	push	{r4, lr}
 80040ac:	eb01 0402 	add.w	r4, r1, r2
 80040b0:	d902      	bls.n	80040b8 <memmove+0x10>
 80040b2:	4284      	cmp	r4, r0
 80040b4:	4623      	mov	r3, r4
 80040b6:	d807      	bhi.n	80040c8 <memmove+0x20>
 80040b8:	1e43      	subs	r3, r0, #1
 80040ba:	42a1      	cmp	r1, r4
 80040bc:	d008      	beq.n	80040d0 <memmove+0x28>
 80040be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040c6:	e7f8      	b.n	80040ba <memmove+0x12>
 80040c8:	4402      	add	r2, r0
 80040ca:	4601      	mov	r1, r0
 80040cc:	428a      	cmp	r2, r1
 80040ce:	d100      	bne.n	80040d2 <memmove+0x2a>
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040da:	e7f7      	b.n	80040cc <memmove+0x24>

080040dc <_fstat_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d07      	ldr	r5, [pc, #28]	@ (80040fc <_fstat_r+0x20>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	f7fc fd76 	bl	8000bda <_fstat>
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	d102      	bne.n	80040f8 <_fstat_r+0x1c>
 80040f2:	682b      	ldr	r3, [r5, #0]
 80040f4:	b103      	cbz	r3, 80040f8 <_fstat_r+0x1c>
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	bd38      	pop	{r3, r4, r5, pc}
 80040fa:	bf00      	nop
 80040fc:	20000258 	.word	0x20000258

08004100 <_isatty_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d06      	ldr	r5, [pc, #24]	@ (800411c <_isatty_r+0x1c>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	f7fc fd75 	bl	8000bfa <_isatty>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_isatty_r+0x1a>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_isatty_r+0x1a>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20000258 	.word	0x20000258

08004120 <_sbrk_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d06      	ldr	r5, [pc, #24]	@ (800413c <_sbrk_r+0x1c>)
 8004124:	2300      	movs	r3, #0
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	f7fc fd7e 	bl	8000c2c <_sbrk>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_sbrk_r+0x1a>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_sbrk_r+0x1a>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	20000258 	.word	0x20000258

08004140 <memcpy>:
 8004140:	440a      	add	r2, r1
 8004142:	4291      	cmp	r1, r2
 8004144:	f100 33ff 	add.w	r3, r0, #4294967295
 8004148:	d100      	bne.n	800414c <memcpy+0xc>
 800414a:	4770      	bx	lr
 800414c:	b510      	push	{r4, lr}
 800414e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004156:	4291      	cmp	r1, r2
 8004158:	d1f9      	bne.n	800414e <memcpy+0xe>
 800415a:	bd10      	pop	{r4, pc}

0800415c <_realloc_r>:
 800415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004160:	4680      	mov	r8, r0
 8004162:	4615      	mov	r5, r2
 8004164:	460c      	mov	r4, r1
 8004166:	b921      	cbnz	r1, 8004172 <_realloc_r+0x16>
 8004168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800416c:	4611      	mov	r1, r2
 800416e:	f7ff b9d9 	b.w	8003524 <_malloc_r>
 8004172:	b92a      	cbnz	r2, 8004180 <_realloc_r+0x24>
 8004174:	f7ff f96a 	bl	800344c <_free_r>
 8004178:	2400      	movs	r4, #0
 800417a:	4620      	mov	r0, r4
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	f000 f81a 	bl	80041b8 <_malloc_usable_size_r>
 8004184:	4285      	cmp	r5, r0
 8004186:	4606      	mov	r6, r0
 8004188:	d802      	bhi.n	8004190 <_realloc_r+0x34>
 800418a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800418e:	d8f4      	bhi.n	800417a <_realloc_r+0x1e>
 8004190:	4629      	mov	r1, r5
 8004192:	4640      	mov	r0, r8
 8004194:	f7ff f9c6 	bl	8003524 <_malloc_r>
 8004198:	4607      	mov	r7, r0
 800419a:	2800      	cmp	r0, #0
 800419c:	d0ec      	beq.n	8004178 <_realloc_r+0x1c>
 800419e:	42b5      	cmp	r5, r6
 80041a0:	462a      	mov	r2, r5
 80041a2:	4621      	mov	r1, r4
 80041a4:	bf28      	it	cs
 80041a6:	4632      	movcs	r2, r6
 80041a8:	f7ff ffca 	bl	8004140 <memcpy>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7ff f94c 	bl	800344c <_free_r>
 80041b4:	463c      	mov	r4, r7
 80041b6:	e7e0      	b.n	800417a <_realloc_r+0x1e>

080041b8 <_malloc_usable_size_r>:
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f18      	subs	r0, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfbc      	itt	lt
 80041c2:	580b      	ldrlt	r3, [r1, r0]
 80041c4:	18c0      	addlt	r0, r0, r3
 80041c6:	4770      	bx	lr

080041c8 <_init>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr

080041d4 <_fini>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr
