
test005_LCD_1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe4  08005fe4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fec  08005fec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00006fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00006ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ff4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  0800605c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800605c  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c490  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002031  00000000  00000000  00013528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00015560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00016050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e05  00000000  00000000  000168c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5d7  00000000  00000000  0002d6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a12d  00000000  00000000  0003bca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5dd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  000c5e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c9408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f0c 	.word	0x08005f0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005f0c 	.word	0x08005f0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <i2c_init>:
	dd[3] = n2 | 0x08;
	HAL_I2C_MasterTransmit(hi2c);
}

int i2c_init(I2C_HandleTypeDef *p)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <i2c_init+0x1c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000084 	.word	0x20000084

08000590 <i2c_scan>:

int i2c_scan()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <i2c_scan+0x64>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d024      	beq.n	80005e8 <i2c_scan+0x58>
	for(int addr = 0; addr < 128 ; addr++)
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e01d      	b.n	80005e0 <i2c_scan+0x50>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK)
 80005a4:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <i2c_scan+0x64>)
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	230a      	movs	r3, #10
 80005ae:	2201      	movs	r2, #1
 80005b0:	f001 fa48 	bl	8001a44 <HAL_I2C_IsDeviceReady>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d104      	bne.n	80005c4 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <i2c_scan+0x68>)
 80005be:	f004 fc03 	bl	8004dc8 <iprintf>
 80005c2:	e002      	b.n	80005ca <i2c_scan+0x3a>
		}
		else
		{
			printf("  .  ");
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <i2c_scan+0x6c>)
 80005c6:	f004 fbff 	bl	8004dc8 <iprintf>
		}
		if((addr % 16) == 0) printf("\r\n");
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f003 030f 	and.w	r3, r3, #15
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <i2c_scan+0x4a>
 80005d4:	480a      	ldr	r0, [pc, #40]	@ (8000600 <i2c_scan+0x70>)
 80005d6:	f004 fc5f 	bl	8004e98 <puts>
	for(int addr = 0; addr < 128 ; addr++)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005e4:	ddde      	ble.n	80005a4 <i2c_scan+0x14>
 80005e6:	e000      	b.n	80005ea <i2c_scan+0x5a>
	if(hi2c == NULL) return;
 80005e8:	bf00      	nop
	}

}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000084 	.word	0x20000084
 80005f8:	08005f24 	.word	0x08005f24
 80005fc:	08005f2c 	.word	0x08005f2c
 8000600:	08005f34 	.word	0x08005f34

08000604 <lcd_command>:

void lcd_command(char cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3) | (1<<2) |0|0;
 800061c:	230c      	movs	r3, #12
 800061e:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3) |  0 	 |0|0;
 8000620:	2308      	movs	r3, #8
 8000622:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000624:	7bfa      	ldrb	r2, [r7, #15]
 8000626:	7b7b      	ldrb	r3, [r7, #13]
 8000628:	4313      	orrs	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800062e:	7bfa      	ldrb	r2, [r7, #15]
 8000630:	7b3b      	ldrb	r3, [r7, #12]
 8000632:	4313      	orrs	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000638:	7bba      	ldrb	r2, [r7, #14]
 800063a:	7b7b      	ldrb	r3, [r7, #13]
 800063c:	4313      	orrs	r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 8000642:	7bba      	ldrb	r2, [r7, #14]
 8000644:	7b3b      	ldrb	r3, [r7, #12]
 8000646:	4313      	orrs	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <lcd_command+0x64>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f107 0208 	add.w	r2, r7, #8
 8000654:	230a      	movs	r3, #10
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2304      	movs	r3, #4
 800065a:	214e      	movs	r1, #78	@ 0x4e
 800065c:	f001 f8f4 	bl	8001848 <HAL_I2C_Master_Transmit>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084

0800066c <lcd_data>:

void lcd_data(char ch)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3) | (1<<2) |0|(1<<0);
 8000684:	230d      	movs	r3, #13
 8000686:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3) |  0 	 |0|(1<<0);
 8000688:	2309      	movs	r3, #9
 800068a:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 800068c:	7bfa      	ldrb	r2, [r7, #15]
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	4313      	orrs	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 8000696:	7bfa      	ldrb	r2, [r7, #15]
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	4313      	orrs	r3, r2
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80006a0:	7bba      	ldrb	r2, [r7, #14]
 80006a2:	7b7b      	ldrb	r3, [r7, #13]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80006aa:	7bba      	ldrb	r2, [r7, #14]
 80006ac:	7b3b      	ldrb	r3, [r7, #12]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <lcd_data+0x70>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	f107 0208 	add.w	r2, r7, #8
 80006bc:	230a      	movs	r3, #10
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2304      	movs	r3, #4
 80006c2:	214e      	movs	r1, #78	@ 0x4e
 80006c4:	f001 f8c0 	bl	8001848 <HAL_I2C_Master_Transmit>
	printf("%c\r\n",ch);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <lcd_data+0x74>)
 80006ce:	f004 fb7b 	bl	8004dc8 <iprintf>

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000084 	.word	0x20000084
 80006e0:	08005f38 	.word	0x08005f38

080006e4 <lcd_init>:

void lcd_init()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff8b 	bl	8000604 <lcd_command>
	lcd_command(0x02); // Cursor home
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff ff88 	bl	8000604 <lcd_command>
	lcd_command(0x06);
 80006f4:	2006      	movs	r0, #6
 80006f6:	f7ff ff85 	bl	8000604 <lcd_command>
	lcd_command(0x0f);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f7ff ff82 	bl	8000604 <lcd_command>
	HAL_Delay(50);
 8000700:	2032      	movs	r0, #50	@ 0x32
 8000702:	f000 fc2b 	bl	8000f5c <HAL_Delay>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_test>:


void lcd_test()
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0

	lcd_data('H');
 800070e:	2048      	movs	r0, #72	@ 0x48
 8000710:	f7ff ffac 	bl	800066c <lcd_data>
	lcd_data('e');
 8000714:	2065      	movs	r0, #101	@ 0x65
 8000716:	f7ff ffa9 	bl	800066c <lcd_data>
	lcd_data('l');
 800071a:	206c      	movs	r0, #108	@ 0x6c
 800071c:	f7ff ffa6 	bl	800066c <lcd_data>
	lcd_data('l');
 8000720:	206c      	movs	r0, #108	@ 0x6c
 8000722:	f7ff ffa3 	bl	800066c <lcd_data>
	lcd_data('o');
 8000726:	206f      	movs	r0, #111	@ 0x6f
 8000728:	f7ff ffa0 	bl	800066c <lcd_data>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fba0 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f81c 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f8dc 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f8b0 	bl	80008a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000744:	f000 f880 	bl	8000848 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("LCD (1602)");
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <main+0x3c>)
 800074a:	f000 f96b 	bl	8000a24 <ProgramStart>
  i2c_init(&hi2c1);
 800074e:	4808      	ldr	r0, [pc, #32]	@ (8000770 <main+0x40>)
 8000750:	f7ff ff0e 	bl	8000570 <i2c_init>
  i2c_scan();
 8000754:	f7ff ff1c 	bl	8000590 <i2c_scan>

  lcd_init(); HAL_Delay(10);
 8000758:	f7ff ffc4 	bl	80006e4 <lcd_init>
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fbfd 	bl	8000f5c <HAL_Delay>
  lcd_test();
 8000762:	f7ff ffd2 	bl	800070a <lcd_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <main+0x36>
 800076a:	bf00      	nop
 800076c:	08005f40 	.word	0x08005f40
 8000770:	20000088 	.word	0x20000088

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	@ 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	@ 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fc88 	bl	8005098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a27      	ldr	r2, [pc, #156]	@ (8000840 <SystemClock_Config+0xcc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <SystemClock_Config+0xd0>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e4:	2310      	movs	r3, #16
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 f97e 	bl	8003afc <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000806:	f000 f8e5 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fbe0 	bl	8003fec <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000832:	f000 f8cf 	bl	80009d4 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C1_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	@ (800089c <MX_I2C1_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_I2C1_Init+0x58>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000866:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_I2C1_Init+0x50>)
 8000886:	f000 fe85 	bl	8001594 <HAL_I2C_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000890:	f000 f8a0 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000088 	.word	0x20000088
 800089c:	40005400 	.word	0x40005400
 80008a0:	000186a0 	.word	0x000186a0

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f003 fda6 	bl	800442c <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f875 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000dc 	.word	0x200000dc
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2c      	ldr	r2, [pc, #176]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4812      	ldr	r0, [pc, #72]	@ (80009cc <MX_GPIO_Init+0xd4>)
 8000984:	f000 fdec 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_GPIO_Init+0xd8>)
 80009a0:	f000 fc42 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0xd4>)
 80009bc:	f000 fc34 	bl	8001228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <__io_putchar>:
//I2C_HandleTypeDef *hi2c = NULL;
//void hi2c = NULL;


int __io_putchar(int ch)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch, 1, 10);
 80009e8:	1d39      	adds	r1, r7, #4
 80009ea:	230a      	movs	r3, #10
 80009ec:	2201      	movs	r2, #1
 80009ee:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <__io_putchar+0x20>)
 80009f0:	f003 fd6c 	bl	80044cc <HAL_UART_Transmit>
	return ch;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc

08000a04 <StandBy>:
void StandBy()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	//printf()
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000a08:	bf00      	nop
 8000a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0e:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <StandBy+0x1c>)
 8000a10:	f000 fd8e 	bl	8001530 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f7      	bne.n	8000a0a <StandBy+0x6>
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020800 	.word	0x40020800

08000a24 <ProgramStart>:
void ProgramStart(char * str)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 8000a2c:	f000 f816 	bl	8000a5c <cls>
	Cursor(0,0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f81c 	bl	8000a70 <Cursor>
	printf("Program Start - %s", str);
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <ProgramStart+0x30>)
 8000a3c:	f004 f9c4 	bl	8004dc8 <iprintf>
	printf("Press Blue_button(B1) to Start...\r\n");
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <ProgramStart+0x34>)
 8000a42:	f004 fa29 	bl	8004e98 <puts>
	StandBy();
 8000a46:	f7ff ffdd 	bl	8000a04 <StandBy>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08005f4c 	.word	0x08005f4c
 8000a58:	08005f60 	.word	0x08005f60

08000a5c <cls>:
void cls()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <cls+0x10>)
 8000a62:	f004 f9b1 	bl	8004dc8 <iprintf>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08005f84 	.word	0x08005f84

08000a70 <Cursor>:
void Cursor(int x, int y)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", x, y);
 8000a7a:	f107 000c 	add.w	r0, r7, #12
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4906      	ldr	r1, [pc, #24]	@ (8000a9c <Cursor+0x2c>)
 8000a84:	f004 fa10 	bl	8004ea8 <siprintf>
	//printf("%s", buf);
	puts(buf); //string output function
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fa03 	bl	8004e98 <puts>
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08005f8c 	.word	0x08005f8c

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f000 fb30 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <HAL_I2C_MspInit+0xa4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13c      	bne.n	8000b8c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <HAL_I2C_MspInit+0xac>)
 8000b4c:	f000 fb6c 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	201f      	movs	r0, #31
 8000b72:	f000 faf2 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b76:	201f      	movs	r0, #31
 8000b78:	f000 fb0b 	bl	8001192 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2020      	movs	r0, #32
 8000b82:	f000 faea 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b86:	2020      	movs	r0, #32
 8000b88:	f000 fb03 	bl	8001192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <HAL_UART_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_UART_MspInit+0x8c>)
 8000c16:	f000 fb07 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	@ 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f949 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <I2C1_EV_IRQHandler+0x10>)
 8000c96:	f001 f803 	bl	8001ca0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000088 	.word	0x20000088

08000ca4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <I2C1_ER_IRQHandler+0x10>)
 8000caa:	f001 f94c 	bl	8001f46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000088 	.word	0x20000088

08000cb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
  }

  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e009      	b.n	8000d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe67 	bl	80009e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf1      	blt.n	8000d04 <_write+0x12>
  }
  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
  return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f004 f9b6 	bl	8005134 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000124 	.word	0x20000124
 8000dfc:	20000278 	.word	0x20000278

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e28:	f7ff ffea 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f004 f975 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fc6b 	bl	8000730 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e68:	08005ff4 	.word	0x08005ff4
  ldr r2, =_sbss
 8000e6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e70:	20000278 	.word	0x20000278

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f94f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fdf8 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f967 	bl	80011ae <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f92f 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000128 	.word	0x20000128

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000128 	.word	0x20000128

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	@ (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d004      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00c      	b.n	80011fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e159      	b.n	80014f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 8148 	bne.w	80014f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a2 	beq.w	80014f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b57      	ldr	r3, [pc, #348]	@ (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a56      	ldr	r2, [pc, #344]	@ (8001510 <HAL_GPIO_Init+0x2e8>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b54      	ldr	r3, [pc, #336]	@ (8001510 <HAL_GPIO_Init+0x2e8>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a52      	ldr	r2, [pc, #328]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	@ (8001518 <HAL_GPIO_Init+0x2f0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x202>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a48      	ldr	r2, [pc, #288]	@ (800151c <HAL_GPIO_Init+0x2f4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x1fe>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <HAL_GPIO_Init+0x2f8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x1fa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <HAL_GPIO_Init+0x2fc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x1f6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a45      	ldr	r2, [pc, #276]	@ (8001528 <HAL_GPIO_Init+0x300>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x1f2>
 8001416:	2304      	movs	r3, #4
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141a:	2307      	movs	r3, #7
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x204>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x204>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x204>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b38      	ldr	r3, [pc, #224]	@ (800152c <HAL_GPIO_Init+0x304>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a2f      	ldr	r2, [pc, #188]	@ (800152c <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_GPIO_Init+0x304>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a24      	ldr	r2, [pc, #144]	@ (800152c <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_GPIO_Init+0x304>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1a      	ldr	r2, [pc, #104]	@ (800152c <HAL_GPIO_Init+0x304>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_GPIO_Init+0x304>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <HAL_GPIO_Init+0x304>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f aea2 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e12b      	b.n	80017fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fa98 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	@ 0x24
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015f8:	f002 fef0 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a81      	ldr	r2, [pc, #516]	@ (8001808 <HAL_I2C_Init+0x274>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d807      	bhi.n	8001618 <HAL_I2C_Init+0x84>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a80      	ldr	r2, [pc, #512]	@ (800180c <HAL_I2C_Init+0x278>)
 800160c:	4293      	cmp	r3, r2
 800160e:	bf94      	ite	ls
 8001610:	2301      	movls	r3, #1
 8001612:	2300      	movhi	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e006      	b.n	8001626 <HAL_I2C_Init+0x92>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a7d      	ldr	r2, [pc, #500]	@ (8001810 <HAL_I2C_Init+0x27c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	bf94      	ite	ls
 8001620:	2301      	movls	r3, #1
 8001622:	2300      	movhi	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0e7      	b.n	80017fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a78      	ldr	r2, [pc, #480]	@ (8001814 <HAL_I2C_Init+0x280>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a6a      	ldr	r2, [pc, #424]	@ (8001808 <HAL_I2C_Init+0x274>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d802      	bhi.n	8001668 <HAL_I2C_Init+0xd4>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3301      	adds	r3, #1
 8001666:	e009      	b.n	800167c <HAL_I2C_Init+0xe8>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a69      	ldr	r2, [pc, #420]	@ (8001818 <HAL_I2C_Init+0x284>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	3301      	adds	r3, #1
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	430b      	orrs	r3, r1
 8001682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800168e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	495c      	ldr	r1, [pc, #368]	@ (8001808 <HAL_I2C_Init+0x274>)
 8001698:	428b      	cmp	r3, r1
 800169a:	d819      	bhi.n	80016d0 <HAL_I2C_Init+0x13c>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e59      	subs	r1, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016aa:	1c59      	adds	r1, r3, #1
 80016ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016b0:	400b      	ands	r3, r1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HAL_I2C_Init+0x138>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e59      	subs	r1, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	e051      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e04f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_I2C_Init+0x168>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e012      	b.n	8001722 <HAL_I2C_Init+0x18e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	0099      	lsls	r1, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Init+0x196>
 8001726:	2301      	movs	r3, #1
 8001728:	e022      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10e      	bne.n	8001750 <HAL_I2C_Init+0x1bc>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e58      	subs	r0, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	fbb0 f3f3 	udiv	r3, r0, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800174e:	e00f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e58      	subs	r0, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	0099      	lsls	r1, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	6809      	ldr	r1, [r1, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800179e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6911      	ldr	r1, [r2, #16]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	000186a0 	.word	0x000186a0
 800180c:	001e847f 	.word	0x001e847f
 8001810:	003d08ff 	.word	0x003d08ff
 8001814:	431bde83 	.word	0x431bde83
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182e:	2b80      	cmp	r3, #128	@ 0x80
 8001830:	d103      	bne.n	800183a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	4613      	mov	r3, r2
 800185a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fb72 	bl	8000f44 <HAL_GetTick>
 8001860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b20      	cmp	r3, #32
 800186c:	f040 80e0 	bne.w	8001a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2319      	movs	r3, #25
 8001876:	2201      	movs	r2, #1
 8001878:	4970      	ldr	r1, [pc, #448]	@ (8001a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f001 ff18 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001886:	2302      	movs	r3, #2
 8001888:	e0d3      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x50>
 8001894:	2302      	movs	r3, #2
 8001896:	e0cc      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d007      	beq.n	80018be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2221      	movs	r2, #33	@ 0x21
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2210      	movs	r2, #16
 80018da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	893a      	ldrh	r2, [r7, #8]
 80018ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a50      	ldr	r2, [pc, #320]	@ (8001a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001900:	8979      	ldrh	r1, [r7, #10]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f001 fda8 	bl	800345c <I2C_MasterRequestWrite>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e08d      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800192c:	e066      	b.n	80019fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	6a39      	ldr	r1, [r7, #32]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 ffd6 	bl	80038e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	2b04      	cmp	r3, #4
 8001944:	d107      	bne.n	8001956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06b      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b04      	cmp	r3, #4
 8001996:	d11b      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x188>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	d017      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	6a39      	ldr	r1, [r7, #32]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f001 ffcd 	bl	8003974 <I2C_WaitOnBTFFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d107      	bne.n	80019f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01a      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d194      	bne.n	800192e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	00100002 	.word	0x00100002
 8001a40:	ffff0000 	.word	0xffff0000

08001a44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	460b      	mov	r3, r1
 8001a52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fa76 	bl	8000f44 <HAL_GetTick>
 8001a58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	f040 8111 	bne.w	8001c8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2319      	movs	r3, #25
 8001a72:	2201      	movs	r2, #1
 8001a74:	4988      	ldr	r1, [pc, #544]	@ (8001c98 <HAL_I2C_IsDeviceReady+0x254>)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f001 fe1a 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	e104      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2C_IsDeviceReady+0x50>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e0fd      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d007      	beq.n	8001aba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2224      	movs	r2, #36	@ 0x24
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a70      	ldr	r2, [pc, #448]	@ (8001c9c <HAL_I2C_IsDeviceReady+0x258>)
 8001adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f001 fdd8 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b14:	d103      	bne.n	8001b1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0b6      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fa07 	bl	8000f44 <HAL_GetTick>
 8001b36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b66:	e025      	b.n	8001bb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b68:	f7ff f9ec 	bl	8000f44 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d302      	bcc.n	8001b7e <HAL_I2C_IsDeviceReady+0x13a>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22a0      	movs	r2, #160	@ 0xa0
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bbe:	d005      	beq.n	8001bcc <HAL_I2C_IsDeviceReady+0x188>
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_I2C_IsDeviceReady+0x188>
 8001bc6:	7dbb      	ldrb	r3, [r7, #22]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0cd      	beq.n	8001b68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d129      	bne.n	8001c36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2319      	movs	r3, #25
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4921      	ldr	r1, [pc, #132]	@ (8001c98 <HAL_I2C_IsDeviceReady+0x254>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f001 fd4c 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e036      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e02c      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2319      	movs	r3, #25
 8001c56:	2201      	movs	r2, #1
 8001c58:	490f      	ldr	r1, [pc, #60]	@ (8001c98 <HAL_I2C_IsDeviceReady+0x254>)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f001 fd28 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e012      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f4ff af32 	bcc.w	8001ade <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	00100002 	.word	0x00100002
 8001c9c:	ffff0000 	.word	0xffff0000

08001ca0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d003      	beq.n	8001cd8 <HAL_I2C_EV_IRQHandler+0x38>
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b40      	cmp	r3, #64	@ 0x40
 8001cd4:	f040 80b1 	bne.w	8001e3a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_I2C_EV_IRQHandler+0x6e>
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001cf8:	d003      	beq.n	8001d02 <HAL_I2C_EV_IRQHandler+0x62>
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_EV_IRQHandler+0x66>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_I2C_EV_IRQHandler+0x68>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f000 8114 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_I2C_EV_IRQHandler+0x90>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fecf 	bl	8003ac6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fd7a 	bl	8002822 <I2C_Master_SB>
 8001d2e:	e083      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0xac>
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fdf2 	bl	800292e <I2C_Master_ADD10>
 8001d4a:	e075      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0xc8>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fe0e 	bl	8002982 <I2C_Master_ADDR>
 8001d66:	e067      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d80:	f000 80db 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9d6 	bl	8002154 <I2C_MasterTransmit_TXE>
 8001da8:	e046      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80c2 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80bc 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b21      	cmp	r3, #33	@ 0x21
 8001dc6:	d103      	bne.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fa5f 	bl	800228c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dce:	e0b4      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b40      	cmp	r3, #64	@ 0x40
 8001dd4:	f040 80b1 	bne.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 facd 	bl	8002378 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dde:	e0ac      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dee:	f000 80a4 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fb49 	bl	80024a8 <I2C_MasterReceive_RXNE>
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 808b 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8085 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fc01 	bl	8002638 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	e080      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e38:	e07f      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e007      	b.n	8001e5c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d011      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 ffcc 	bl	8002e20 <I2C_Slave_ADDR>
 8001e88:	e05a      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x206>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f001 f806 	bl	8002eb0 <I2C_Slave_STOPF>
 8001ea4:	e04c      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b21      	cmp	r3, #33	@ 0x21
 8001eaa:	d002      	beq.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x212>
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2b29      	cmp	r3, #41	@ 0x29
 8001eb0:	d120      	bne.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fee7 	bl	8002ca4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed6:	e032      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02d      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d028      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 ff16 	bl	8002d1e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef2:	e024      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ff24 	bl	8002d60 <I2C_SlaveReceive_RXNE>
 8001f18:	e012      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 ff54 	bl	8002ddc <I2C_SlaveReceive_BTF>
 8001f34:	e004      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08a      	sub	sp, #40	@ 0x28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4a>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x70>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001fb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03e      	beq.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d039      	beq.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001fca:	7efb      	ldrb	r3, [r7, #27]
 8001fcc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fe4:	7ebb      	ldrb	r3, [r7, #26]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d112      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b21      	cmp	r3, #33	@ 0x21
 8001ff4:	d008      	beq.n	8002008 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b29      	cmp	r3, #41	@ 0x29
 8001ffa:	d005      	beq.n	8002008 <HAL_I2C_ER_IRQHandler+0xc2>
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b28      	cmp	r3, #40	@ 0x28
 8002000:	d106      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b21      	cmp	r3, #33	@ 0x21
 8002006:	d103      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 f881 	bl	8003110 <I2C_Slave_AF>
 800200e:	e016      	b.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002018:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002022:	7efb      	ldrb	r3, [r7, #27]
 8002024:	2b10      	cmp	r3, #16
 8002026:	d002      	beq.n	800202e <HAL_I2C_ER_IRQHandler+0xe8>
 8002028:	7efb      	ldrb	r3, [r7, #27]
 800202a:	2b40      	cmp	r3, #64	@ 0x40
 800202c:	d107      	bne.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <HAL_I2C_ER_IRQHandler+0x11e>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002062:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f001 f8be 	bl	80031f8 <I2C_ITError>
  }
}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	@ 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002162:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800216a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d150      	bne.n	800221c <I2C_MasterTransmit_TXE+0xc8>
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b21      	cmp	r3, #33	@ 0x21
 800217e:	d14d      	bne.n	800221c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b08      	cmp	r3, #8
 8002184:	d01d      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b20      	cmp	r3, #32
 800218a:	d01a      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002192:	d016      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2211      	movs	r2, #17
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff62 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021c0:	e060      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d107      	bne.n	800220c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff7d 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220a:	e03b      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff35 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800221a:	e033      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b21      	cmp	r3, #33	@ 0x21
 8002220:	d005      	beq.n	800222e <I2C_MasterTransmit_TXE+0xda>
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d12d      	bne.n	8002284 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b22      	cmp	r3, #34	@ 0x22
 800222c:	d12a      	bne.n	8002284 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d108      	bne.n	800224a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002246:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002248:	e01c      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d103      	bne.n	800225e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f88e 	bl	8002378 <I2C_MemoryTransmit_TXE_BTF>
}
 800225c:	e012      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002282:	e7ff      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b21      	cmp	r3, #33	@ 0x21
 80022a4:	d164      	bne.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022d4:	e04c      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d01d      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d01a      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022e8:	d016      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2211      	movs	r2, #17
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff feb7 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
}
 8002316:	e02b      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002326:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002336:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d107      	bne.n	8002362 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fed2 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
}
 8002360:	e006      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fe8a 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002386:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11d      	bne.n	80023cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d10b      	bne.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a8:	1c9a      	adds	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80023ae:	e077      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	121b      	asrs	r3, r3, #8
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023ca:	e069      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10b      	bne.n	80023ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023ea:	e059      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d152      	bne.n	800249a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b22      	cmp	r3, #34	@ 0x22
 80023f8:	d10d      	bne.n	8002416 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002408:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002414:	e044      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b21      	cmp	r3, #33	@ 0x21
 8002424:	d112      	bne.n	800244c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800244a:	e029      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d124      	bne.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b21      	cmp	r3, #33	@ 0x21
 800245a:	d121      	bne.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800246a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fe36 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
}
 8002498:	e002      	b.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff f9be 	bl	800181c <I2C_Flush_DR>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b22      	cmp	r3, #34	@ 0x22
 80024ba:	f040 80b9 	bne.w	8002630 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d921      	bls.n	8002516 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b03      	cmp	r3, #3
 8002500:	f040 8096 	bne.w	8002630 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002512:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002514:	e08c      	b.n	8002630 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	2b02      	cmp	r3, #2
 800251c:	d07f      	beq.n	800261e <I2C_MasterReceive_RXNE+0x176>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d002      	beq.n	800252a <I2C_MasterReceive_RXNE+0x82>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d179      	bne.n	800261e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f001 fa6a 	bl	8003a04 <I2C_WaitOnSTOPRequestThroughIT>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d14c      	bne.n	80025d0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002544:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002554:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b40      	cmp	r3, #64	@ 0x40
 800258e:	d10a      	bne.n	80025a6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fdba 	bl	8002118 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025a4:	e044      	b.n	8002630 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d002      	beq.n	80025ba <I2C_MasterReceive_RXNE+0x112>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d103      	bne.n	80025c2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30
 80025c0:	e002      	b.n	80025c8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2212      	movs	r2, #18
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fd65 	bl	8002098 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025ce:	e02f      	b.n	8002630 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fd88 	bl	800212c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800261c:	e008      	b.n	8002630 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262c:	605a      	str	r2, [r3, #4]
}
 800262e:	e7ff      	b.n	8002630 <I2C_MasterReceive_RXNE+0x188>
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b04      	cmp	r3, #4
 800264e:	d11b      	bne.n	8002688 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002686:	e0c8      	b.n	800281a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d129      	bne.n	80026e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00a      	beq.n	80026be <I2C_MasterReceive_BTF+0x86>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d007      	beq.n	80026be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026e4:	e099      	b.n	800281a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	f040 8081 	bne.w	80027f4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d002      	beq.n	80026fe <I2C_MasterReceive_BTF+0xc6>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d108      	bne.n	8002710 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e019      	b.n	8002744 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <I2C_MasterReceive_BTF+0xe4>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d108      	bne.n	800272e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e00a      	b.n	8002744 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d007      	beq.n	8002744 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002742:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800279e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d10a      	bne.n	80027ca <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fca8 	bl	8002118 <HAL_I2C_MemRxCpltCallback>
}
 80027c8:	e027      	b.n	800281a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d002      	beq.n	80027de <I2C_MasterReceive_BTF+0x1a6>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d103      	bne.n	80027e6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e4:	e002      	b.n	80027ec <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2212      	movs	r2, #18
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc53 	bl	8002098 <HAL_I2C_MasterRxCpltCallback>
}
 80027f2:	e012      	b.n	800281a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d117      	bne.n	8002866 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800284e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002850:	e067      	b.n	8002922 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]
}
 8002864:	e05d      	b.n	8002922 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800286e:	d133      	bne.n	80028d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b21      	cmp	r3, #33	@ 0x21
 800287a:	d109      	bne.n	8002890 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	e008      	b.n	80028a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <I2C_Master_SB+0x92>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d032      	beq.n	8002922 <I2C_Master_SB+0x100>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02d      	beq.n	8002922 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d4:	605a      	str	r2, [r3, #4]
}
 80028d6:	e024      	b.n	8002922 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10e      	bne.n	80028fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	11db      	asrs	r3, r3, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0306 	and.w	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 030f 	orn	r3, r3, #15
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
}
 80028fc:	e011      	b.n	8002922 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002902:	2b01      	cmp	r3, #1
 8002904:	d10d      	bne.n	8002922 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	b29b      	uxth	r3, r3
 800290c:	11db      	asrs	r3, r3, #7
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 0306 	and.w	r3, r3, #6
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f063 030e 	orn	r3, r3, #14
 800291a:	b2da      	uxtb	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	611a      	str	r2, [r3, #16]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	b2da      	uxtb	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <I2C_Master_ADD10+0x26>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <I2C_Master_ADD10+0x48>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002974:	605a      	str	r2, [r3, #4]
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b091      	sub	sp, #68	@ 0x44
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002990:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b22      	cmp	r3, #34	@ 0x22
 80029aa:	f040 8169 	bne.w	8002c80 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <I2C_Master_ADDR+0x54>
 80029b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d10b      	bne.n	80029d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	e160      	b.n	8002c98 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <I2C_Master_ADDR+0x98>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029e6:	d118      	bne.n	8002a1a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a18:	e13e      	b.n	8002c98 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e115      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 808a 	bne.w	8002b6c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a5e:	d137      	bne.n	8002ad0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a7e:	d113      	bne.n	8002aa8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	e0e7      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e0d3      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d02e      	beq.n	8002b34 <I2C_Master_ADDR+0x1b2>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d02b      	beq.n	8002b34 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d102      	bne.n	8002ae8 <I2C_Master_ADDR+0x166>
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d125      	bne.n	8002b34 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00e      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d00b      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d008      	beq.n	8002b0c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b1a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	e0a1      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b42:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e085      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d14d      	bne.n	8002c12 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d016      	beq.n	8002baa <I2C_Master_ADDR+0x228>
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d013      	beq.n	8002baa <I2C_Master_ADDR+0x228>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d010      	beq.n	8002baa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e007      	b.n	8002bba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bb8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc8:	d117      	bne.n	8002bfa <I2C_Master_ADDR+0x278>
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bd0:	d00b      	beq.n	8002bea <I2C_Master_ADDR+0x268>
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d008      	beq.n	8002bea <I2C_Master_ADDR+0x268>
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d005      	beq.n	8002bea <I2C_Master_ADDR+0x268>
 8002bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d002      	beq.n	8002bea <I2C_Master_ADDR+0x268>
 8002be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d107      	bne.n	8002bfa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bf8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	e032      	b.n	8002c78 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c20:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c30:	d117      	bne.n	8002c62 <I2C_Master_ADDR+0x2e0>
 8002c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c38:	d00b      	beq.n	8002c52 <I2C_Master_ADDR+0x2d0>
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d008      	beq.n	8002c52 <I2C_Master_ADDR+0x2d0>
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d005      	beq.n	8002c52 <I2C_Master_ADDR+0x2d0>
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d002      	beq.n	8002c52 <I2C_Master_ADDR+0x2d0>
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d107      	bne.n	8002c62 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c7e:	e00b      	b.n	8002c98 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
}
 8002c96:	e7ff      	b.n	8002c98 <I2C_Master_ADDR+0x316>
 8002c98:	bf00      	nop
 8002c9a:	3744      	adds	r7, #68	@ 0x44
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02b      	beq.n	8002d16 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d114      	bne.n	8002d16 <I2C_SlaveTransmit_TXE+0x72>
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b29      	cmp	r3, #41	@ 0x29
 8002cf0:	d111      	bne.n	8002d16 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2221      	movs	r2, #33	@ 0x21
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2228      	movs	r2, #40	@ 0x28
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff f9cb 	bl	80020ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02c      	beq.n	8002dd4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d114      	bne.n	8002dd4 <I2C_SlaveReceive_RXNE+0x74>
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dae:	d111      	bne.n	8002dd4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2222      	movs	r2, #34	@ 0x22
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2228      	movs	r2, #40	@ 0x28
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff f976 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e3a:	2b28      	cmp	r3, #40	@ 0x28
 8002e3c:	d125      	bne.n	8002e8a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	81bb      	strh	r3, [r7, #12]
 8002e6c:	e002      	b.n	8002e74 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e7c:	89ba      	ldrh	r2, [r7, #12]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff f926 	bl	80020d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e88:	e00e      	b.n	8002ea8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ece:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f0c:	d172      	bne.n	8002ff4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b22      	cmp	r3, #34	@ 0x22
 8002f12:	d002      	beq.n	8002f1a <I2C_Slave_STOPF+0x6a>
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f18:	d135      	bne.n	8002f86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f959 	bl	800120a <HAL_DMA_GetState>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d049      	beq.n	8002ff2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f62:	4a69      	ldr	r2, [pc, #420]	@ (8003108 <I2C_Slave_STOPF+0x258>)
 8002f64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f92b 	bl	80011c6 <HAL_DMA_Abort_IT>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03d      	beq.n	8002ff2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f80:	4610      	mov	r0, r2
 8002f82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f84:	e035      	b.n	8002ff2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe f923 	bl	800120a <HAL_DMA_GetState>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d014      	beq.n	8002ff4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	4a4e      	ldr	r2, [pc, #312]	@ (8003108 <I2C_Slave_STOPF+0x258>)
 8002fd0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f8f5 	bl	80011c6 <HAL_DMA_Abort_IT>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fec:	4610      	mov	r0, r2
 8002fee:	4798      	blx	r3
 8002ff0:	e000      	b.n	8002ff4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03e      	beq.n	800307c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d112      	bne.n	8003032 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	d112      	bne.n	8003066 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8b7 	bl	80031f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800308a:	e039      	b.n	8003100 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003090:	d109      	bne.n	80030a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2228      	movs	r2, #40	@ 0x28
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff f80d 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b28      	cmp	r3, #40	@ 0x28
 80030b0:	d111      	bne.n	80030d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a15      	ldr	r2, [pc, #84]	@ (800310c <I2C_Slave_STOPF+0x25c>)
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff f80e 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
}
 80030d4:	e014      	b.n	8003100 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	2b22      	cmp	r3, #34	@ 0x22
 80030dc:	d002      	beq.n	80030e4 <I2C_Slave_STOPF+0x234>
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b22      	cmp	r3, #34	@ 0x22
 80030e2:	d10d      	bne.n	8003100 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe ffe0 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	08003561 	.word	0x08003561
 800310c:	ffff0000 	.word	0xffff0000

08003110 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d002      	beq.n	8003132 <I2C_Slave_AF+0x22>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d129      	bne.n	8003186 <I2C_Slave_AF+0x76>
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b28      	cmp	r3, #40	@ 0x28
 8003136:	d126      	bne.n	8003186 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <I2C_Slave_AF+0xe4>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800314c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003156:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe ffb6 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003184:	e031      	b.n	80031ea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b21      	cmp	r3, #33	@ 0x21
 800318a:	d129      	bne.n	80031e0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a19      	ldr	r2, [pc, #100]	@ (80031f4 <I2C_Slave_AF+0xe4>)
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2221      	movs	r2, #33	@ 0x21
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe fb22 	bl	800181c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fe ff67 	bl	80020ac <HAL_I2C_SlaveTxCpltCallback>
}
 80031de:	e004      	b.n	80031ea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	ffff0000 	.word	0xffff0000

080031f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800320e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003210:	7bbb      	ldrb	r3, [r7, #14]
 8003212:	2b10      	cmp	r3, #16
 8003214:	d002      	beq.n	800321c <I2C_ITError+0x24>
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d10a      	bne.n	8003232 <I2C_ITError+0x3a>
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b22      	cmp	r3, #34	@ 0x22
 8003220:	d107      	bne.n	8003232 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003230:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003238:	2b28      	cmp	r3, #40	@ 0x28
 800323a:	d107      	bne.n	800324c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2228      	movs	r2, #40	@ 0x28
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800324a:	e015      	b.n	8003278 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800325a:	d00a      	beq.n	8003272 <I2C_ITError+0x7a>
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b60      	cmp	r3, #96	@ 0x60
 8003260:	d007      	beq.n	8003272 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003286:	d162      	bne.n	800334e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003296:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d020      	beq.n	80032e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003454 <I2C_ITError+0x25c>)
 80032ac:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff87 	bl	80011c6 <HAL_DMA_Abort_IT>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8089 	beq.w	80033d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032e2:	4610      	mov	r0, r2
 80032e4:	4798      	blx	r3
 80032e6:	e074      	b.n	80033d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	4a59      	ldr	r2, [pc, #356]	@ (8003454 <I2C_ITError+0x25c>)
 80032ee:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd ff66 	bl	80011c6 <HAL_DMA_Abort_IT>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d068      	beq.n	80033d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d10b      	bne.n	8003326 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
 800334c:	e041      	b.n	80033d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b60      	cmp	r3, #96	@ 0x60
 8003358:	d125      	bne.n	80033a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	d10b      	bne.n	800338e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fece 	bl	8002140 <HAL_I2C_AbortCpltCallback>
 80033a4:	e015      	b.n	80033d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d10b      	bne.n	80033cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fe fead 	bl	800212c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10e      	bne.n	8003400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003416:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d113      	bne.n	800344c <I2C_ITError+0x254>
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b28      	cmp	r3, #40	@ 0x28
 8003428:	d110      	bne.n	800344c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <I2C_ITError+0x260>)
 800342e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe fe52 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	08003561 	.word	0x08003561
 8003458:	ffff0000 	.word	0xffff0000

0800345c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d006      	beq.n	8003486 <I2C_MasterRequestWrite+0x2a>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d003      	beq.n	8003486 <I2C_MasterRequestWrite+0x2a>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003484:	d108      	bne.n	8003498 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e00b      	b.n	80034b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	2b12      	cmp	r3, #18
 800349e:	d107      	bne.n	80034b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f8f7 	bl	80036b0 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d6:	d103      	bne.n	80034e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e035      	b.n	8003550 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ec:	d108      	bne.n	8003500 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034fc:	611a      	str	r2, [r3, #16]
 80034fe:	e01b      	b.n	8003538 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003500:	897b      	ldrh	r3, [r7, #10]
 8003502:	11db      	asrs	r3, r3, #7
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f003 0306 	and.w	r3, r3, #6
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f063 030f 	orn	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	490e      	ldr	r1, [pc, #56]	@ (8003558 <I2C_MasterRequestWrite+0xfc>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f940 	bl	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e010      	b.n	8003550 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4907      	ldr	r1, [pc, #28]	@ (800355c <I2C_MasterRequestWrite+0x100>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f930 	bl	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00010008 	.word	0x00010008
 800355c:	00010002 	.word	0x00010002

08003560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003578:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800357a:	4b4b      	ldr	r3, [pc, #300]	@ (80036a8 <I2C_DMAAbort+0x148>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	08db      	lsrs	r3, r3, #3
 8003580:	4a4a      	ldr	r2, [pc, #296]	@ (80036ac <I2C_DMAAbort+0x14c>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0a1a      	lsrs	r2, r3, #8
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00da      	lsls	r2, r3, #3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80035a6:	e00a      	b.n	80035be <I2C_DMAAbort+0x5e>
    }
    count--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035bc:	d0ea      	beq.n	8003594 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	2200      	movs	r2, #0
 80035cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	2200      	movs	r2, #0
 80035dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	2200      	movs	r2, #0
 8003612:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b60      	cmp	r3, #96	@ 0x60
 800362e:	d10e      	bne.n	800364e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7fe fd7a 	bl	8002140 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800364c:	e027      	b.n	800369e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003654:	2b28      	cmp	r3, #40	@ 0x28
 8003656:	d117      	bne.n	8003688 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2228      	movs	r2, #40	@ 0x28
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003686:	e007      	b.n	8003698 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7fe fd47 	bl	800212c <HAL_I2C_ErrorCallback>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000000 	.word	0x20000000
 80036ac:	14f8b589 	.word	0x14f8b589

080036b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c0:	e048      	b.n	8003754 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d044      	beq.n	8003754 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fd fc3b 	bl	8000f44 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d139      	bne.n	8003754 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	e00c      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d116      	bne.n	8003754 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e023      	b.n	800379c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10d      	bne.n	800377a <I2C_WaitOnFlagUntilTimeout+0xca>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	e00c      	b.n	8003794 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	429a      	cmp	r2, r3
 8003798:	d093      	beq.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b2:	e071      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d123      	bne.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e067      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d041      	beq.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7fd fb96 	bl	8000f44 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d302      	bcc.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d136      	bne.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d10c      	bne.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e00b      	b.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	43da      	mvns	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e021      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10c      	bne.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	43da      	mvns	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e00b      	b.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f47f af6d 	bne.w	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f0:	e034      	b.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f8b8 	bl	8003a68 <I2C_IsAcknowledgeFailed>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e034      	b.n	800396c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d028      	beq.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd fb1b 	bl	8000f44 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d11d      	bne.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b80      	cmp	r3, #128	@ 0x80
 800392c:	d016      	beq.n	800395c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e007      	b.n	800396c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	2b80      	cmp	r3, #128	@ 0x80
 8003968:	d1c3      	bne.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003980:	e034      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f870 	bl	8003a68 <I2C_IsAcknowledgeFailed>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e034      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d028      	beq.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fd fad3 	bl	8000f44 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11d      	bne.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d016      	beq.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d1c3      	bne.n	8003982 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	4a13      	ldr	r2, [pc, #76]	@ (8003a64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	0a1a      	lsrs	r2, r3, #8
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e008      	b.n	8003a54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a50:	d0e9      	beq.n	8003a26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	20000000 	.word	0x20000000
 8003a64:	14f8b589 	.word	0x14f8b589

08003a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7e:	d11b      	bne.n	8003ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003ad6:	d103      	bne.n	8003ae0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ade:	e007      	b.n	8003af0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ae8:	d102      	bne.n	8003af0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2208      	movs	r2, #8
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e267      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d075      	beq.n	8003c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b1a:	4b88      	ldr	r3, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d00c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b85      	ldr	r3, [pc, #532]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d112      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b32:	4b82      	ldr	r3, [pc, #520]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	4b7e      	ldr	r3, [pc, #504]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05b      	beq.n	8003c04 <HAL_RCC_OscConfig+0x108>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d157      	bne.n	8003c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e242      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCC_OscConfig+0x74>
 8003b62:	4b76      	ldr	r3, [pc, #472]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a75      	ldr	r2, [pc, #468]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x98>
 8003b7a:	4b70      	ldr	r3, [pc, #448]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6d      	ldr	r3, [pc, #436]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6c      	ldr	r2, [pc, #432]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b94:	4b69      	ldr	r3, [pc, #420]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a68      	ldr	r2, [pc, #416]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b66      	ldr	r3, [pc, #408]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a65      	ldr	r2, [pc, #404]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd f9c6 	bl	8000f44 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd f9c2 	bl	8000f44 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	@ 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e207      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5b      	ldr	r3, [pc, #364]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xc0>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd f9b2 	bl	8000f44 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd f9ae 	bl	8000f44 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1f3      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b51      	ldr	r3, [pc, #324]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0xe8>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c12:	4b4a      	ldr	r3, [pc, #296]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b47      	ldr	r3, [pc, #284]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2a:	4b44      	ldr	r3, [pc, #272]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b41      	ldr	r3, [pc, #260]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c7      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4937      	ldr	r1, [pc, #220]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b34      	ldr	r3, [pc, #208]	@ (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd f967 	bl	8000f44 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd f963 	bl	8000f44 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a8      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4925      	ldr	r1, [pc, #148]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f946 	bl	8000f44 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fd f942 	bl	8000f44 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e187      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d036      	beq.n	8003d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b15      	ldr	r3, [pc, #84]	@ (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd f926 	bl	8000f44 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd f922 	bl	8000f44 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e167      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x200>
 8003d1a:	e01b      	b.n	8003d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d22:	f7fd f90f 	bl	8000f44 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	e00e      	b.n	8003d48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fd f90b 	bl	8000f44 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d907      	bls.n	8003d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e150      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	42470000 	.word	0x42470000
 8003d44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b88      	ldr	r3, [pc, #544]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ea      	bne.n	8003d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8097 	beq.w	8003e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b81      	ldr	r3, [pc, #516]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	4b7d      	ldr	r3, [pc, #500]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d82:	4b7a      	ldr	r3, [pc, #488]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b77      	ldr	r3, [pc, #476]	@ (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b74      	ldr	r3, [pc, #464]	@ (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a73      	ldr	r2, [pc, #460]	@ (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fd f8cb 	bl	8000f44 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fd f8c7 	bl	8000f44 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e10c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2ea>
 8003dd8:	4b64      	ldr	r3, [pc, #400]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	4a63      	ldr	r2, [pc, #396]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x30c>
 8003dee:	4b5f      	ldr	r3, [pc, #380]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003e08:	4b58      	ldr	r3, [pc, #352]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a57      	ldr	r2, [pc, #348]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	4b55      	ldr	r3, [pc, #340]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a54      	ldr	r2, [pc, #336]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd f88c 	bl	8000f44 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd f888 	bl	8000f44 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0cb      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b49      	ldr	r3, [pc, #292]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCC_OscConfig+0x334>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e54:	f7fd f876 	bl	8000f44 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fd f872 	bl	8000f44 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0b5      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e72:	4b3e      	ldr	r3, [pc, #248]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ee      	bne.n	8003e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	4a38      	ldr	r2, [pc, #224]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a1 	beq.w	8003fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d05c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d141      	bne.n	8003f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f846 	bl	8000f44 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd f842 	bl	8000f44 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e087      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	491b      	ldr	r1, [pc, #108]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fd f81b 	bl	8000f44 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fd f817 	bl	8000f44 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e05c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x416>
 8003f30:	e054      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b10      	ldr	r3, [pc, #64]	@ (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd f804 	bl	8000f44 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd f800 	bl	8000f44 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e045      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x444>
 8003f5e:	e03d      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e038      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x4ec>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d121      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0cc      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b68      	ldr	r3, [pc, #416]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d90c      	bls.n	8004028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b65      	ldr	r3, [pc, #404]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d119      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e067      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b37      	ldr	r3, [pc, #220]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4934      	ldr	r1, [pc, #208]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fc ff32 	bl	8000f44 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fc ff2e 	bl	8000f44 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e04f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2b      	ldr	r3, [pc, #172]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b25      	ldr	r3, [pc, #148]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b22      	ldr	r3, [pc, #136]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc fe92 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08005f98 	.word	0x08005f98
 80041b0:	20000000 	.word	0x20000000
 80041b4:	20000004 	.word	0x20000004

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b094      	sub	sp, #80	@ 0x50
 80041be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d0:	4b79      	ldr	r3, [pc, #484]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d00d      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x40>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	f200 80e1 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x34>
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ea:	e0db      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b73      	ldr	r3, [pc, #460]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041f0:	e0db      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f2:	4b73      	ldr	r3, [pc, #460]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041f6:	e0d8      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b6f      	ldr	r3, [pc, #444]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004202:	4b6d      	ldr	r3, [pc, #436]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004218:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	2300      	movs	r3, #0
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34
 8004226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	6139      	str	r1, [r7, #16]
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800425c:	4659      	mov	r1, fp
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4651      	mov	r1, sl
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4651      	mov	r1, sl
 800426c:	ebb2 0801 	subs.w	r8, r2, r1
 8004270:	4659      	mov	r1, fp
 8004272:	eb63 0901 	sbc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	462b      	mov	r3, r5
 8004298:	eb49 0303 	adc.w	r3, r9, r3
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042aa:	4629      	mov	r1, r5
 80042ac:	024b      	lsls	r3, r1, #9
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b4:	4621      	mov	r1, r4
 80042b6:	024a      	lsls	r2, r1, #9
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c8:	f7fb ffda 	bl	8000280 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d4:	e058      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b38      	ldr	r3, [pc, #224]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	4611      	mov	r1, r2
 80042e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004302:	0150      	lsls	r0, r2, #5
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4641      	mov	r1, r8
 800430a:	ebb2 0a01 	subs.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb63 0b01 	sbc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004328:	ebb2 040a 	subs.w	r4, r2, sl
 800432c:	eb63 050b 	sbc.w	r5, r3, fp
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	464b      	mov	r3, r9
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	61fa      	str	r2, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	f7fb ff80 	bl	8000280 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800439a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3750      	adds	r7, #80	@ 0x50
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	@ (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08005fa8 	.word	0x08005fa8

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	@ (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08005fa8 	.word	0x08005fa8

0800442c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e042      	b.n	80044c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fba4 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	@ 0x24
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800446e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f973 	bl	800475c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d175      	bne.n	80045d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x2c>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e06e      	b.n	80045da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	@ 0x21
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fc fd1b 	bl	8000f44 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	d108      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004540:	e02e      	b.n	80045a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	@ 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f848 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e03a      	b.n	80045da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3302      	adds	r3, #2
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e007      	b.n	8004592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3301      	adds	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1cb      	bne.n	8004542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2140      	movs	r1, #64	@ 0x40
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f814 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	e03b      	b.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d037      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fc fca2 	bl	8000f44 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	6a3a      	ldr	r2, [r7, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <UART_WaitOnFlagUntilTimeout+0x30>
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e03a      	b.n	800468c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d023      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b80      	cmp	r3, #128	@ 0x80
 8004628:	d020      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d01d      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b08      	cmp	r3, #8
 800463c:	d116      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f81d 	bl	8004694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2208      	movs	r2, #8
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e00f      	b.n	800468c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	d0b4      	beq.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b095      	sub	sp, #84	@ 0x54
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	2b01      	cmp	r3, #1
 800470a:	d119      	bne.n	8004740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	60bb      	str	r3, [r7, #8]
   return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	647b      	str	r3, [r7, #68]	@ 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800472c:	61ba      	str	r2, [r7, #24]
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	613b      	str	r3, [r7, #16]
   return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800474e:	bf00      	nop
 8004750:	3754      	adds	r7, #84	@ 0x54
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0c0      	sub	sp, #256	@ 0x100
 8004762:	af00      	add	r7, sp, #0
 8004764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	68d9      	ldr	r1, [r3, #12]
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	ea40 0301 	orr.w	r3, r0, r1
 8004784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047b4:	f021 010c 	bic.w	r1, r1, #12
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047c2:	430b      	orrs	r3, r1
 80047c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	ea40 0301 	orr.w	r3, r0, r1
 80047e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004a28 <UART_SetConfig+0x2cc>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d005      	beq.n	80047fc <UART_SetConfig+0xa0>
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a2c <UART_SetConfig+0x2d0>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d104      	bne.n	8004806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7ff fe02 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8004800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004804:	e003      	b.n	800480e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004806:	f7ff fde9 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 800480a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004818:	f040 810c 	bne.w	8004a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800482a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	1891      	adds	r1, r2, r2
 8004834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004836:	415b      	adcs	r3, r3
 8004838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800483a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800483e:	4621      	mov	r1, r4
 8004840:	eb12 0801 	adds.w	r8, r2, r1
 8004844:	4629      	mov	r1, r5
 8004846:	eb43 0901 	adc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800486c:	462b      	mov	r3, r5
 800486e:	eb49 0303 	adc.w	r3, r9, r3
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800488a:	460b      	mov	r3, r1
 800488c:	18db      	adds	r3, r3, r3
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004890:	4613      	mov	r3, r2
 8004892:	eb42 0303 	adc.w	r3, r2, r3
 8004896:	657b      	str	r3, [r7, #84]	@ 0x54
 8004898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800489c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048a0:	f7fb fcee 	bl	8000280 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <UART_SetConfig+0x2d4>)
 80048aa:	fba3 2302 	umull	r2, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	011c      	lsls	r4, r3, #4
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048cc:	415b      	adcs	r3, r3
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048d4:	4641      	mov	r1, r8
 80048d6:	eb12 0a01 	adds.w	sl, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb43 0b01 	adc.w	fp, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f4:	4692      	mov	sl, r2
 80048f6:	469b      	mov	fp, r3
 80048f8:	4643      	mov	r3, r8
 80048fa:	eb1a 0303 	adds.w	r3, sl, r3
 80048fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004902:	464b      	mov	r3, r9
 8004904:	eb4b 0303 	adc.w	r3, fp, r3
 8004908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800491c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004920:	460b      	mov	r3, r1
 8004922:	18db      	adds	r3, r3, r3
 8004924:	643b      	str	r3, [r7, #64]	@ 0x40
 8004926:	4613      	mov	r3, r2
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	647b      	str	r3, [r7, #68]	@ 0x44
 800492e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004936:	f7fb fca3 	bl	8000280 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4611      	mov	r1, r2
 8004940:	4b3b      	ldr	r3, [pc, #236]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004942:	fba3 2301 	umull	r2, r3, r3, r1
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2264      	movs	r2, #100	@ 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004956:	4b36      	ldr	r3, [pc, #216]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004958:	fba3 2302 	umull	r2, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004964:	441c      	add	r4, r3
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004980:	415b      	adcs	r3, r3
 8004982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004988:	4641      	mov	r1, r8
 800498a:	1851      	adds	r1, r2, r1
 800498c:	6339      	str	r1, [r7, #48]	@ 0x30
 800498e:	4649      	mov	r1, r9
 8004990:	414b      	adcs	r3, r1
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049a0:	4659      	mov	r1, fp
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4651      	mov	r1, sl
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4642      	mov	r2, r8
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049bc:	464b      	mov	r3, r9
 80049be:	460a      	mov	r2, r1
 80049c0:	eb42 0303 	adc.w	r3, r2, r3
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049dc:	460b      	mov	r3, r1
 80049de:	18db      	adds	r3, r3, r3
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e2:	4613      	mov	r3, r2
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049f2:	f7fb fc45 	bl	8000280 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	@ 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <UART_SetConfig+0x2d4>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 0207 	and.w	r2, r3, #7
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4422      	add	r2, r4
 8004a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a24:	e106      	b.n	8004c34 <UART_SetConfig+0x4d8>
 8004a26:	bf00      	nop
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40011400 	.word	0x40011400
 8004a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	1891      	adds	r1, r2, r2
 8004a4c:	6239      	str	r1, [r7, #32]
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a56:	4641      	mov	r1, r8
 8004a58:	1854      	adds	r4, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0501 	adc.w	r5, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	00eb      	lsls	r3, r5, #3
 8004a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a6e:	00e2      	lsls	r2, r4, #3
 8004a70:	4614      	mov	r4, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	18e3      	adds	r3, r4, r3
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	eb45 0303 	adc.w	r3, r5, r3
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	008b      	lsls	r3, r1, #2
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aac:	4621      	mov	r1, r4
 8004aae:	008a      	lsls	r2, r1, #2
 8004ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ab4:	f7fb fbe4 	bl	8000280 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b60      	ldr	r3, [pc, #384]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	61b9      	str	r1, [r7, #24]
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	4641      	mov	r1, r8
 8004aea:	1851      	adds	r1, r2, r1
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	4649      	mov	r1, r9
 8004af0:	414b      	adcs	r3, r1
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b00:	4659      	mov	r1, fp
 8004b02:	00cb      	lsls	r3, r1, #3
 8004b04:	4651      	mov	r1, sl
 8004b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	00ca      	lsls	r2, r1, #3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4642      	mov	r2, r8
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	460a      	mov	r2, r1
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b52:	f7fb fb95 	bl	8000280 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4b38      	ldr	r3, [pc, #224]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2264      	movs	r2, #100	@ 0x64
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	1acb      	subs	r3, r1, r3
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	3332      	adds	r3, #50	@ 0x32
 8004b70:	4a33      	ldr	r2, [pc, #204]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b7c:	441c      	add	r4, r3
 8004b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b82:	2200      	movs	r2, #0
 8004b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	415b      	adcs	r3, r3
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bce:	464b      	mov	r3, r9
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	eb42 0303 	adc.w	r3, r2, r3
 8004bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	008b      	lsls	r3, r1, #2
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	008a      	lsls	r2, r1, #2
 8004bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c02:	f7fb fb3d 	bl	8000280 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	@ 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	@ 0x32
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <UART_SetConfig+0x4e4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4422      	add	r2, r4
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c40:	51eb851f 	.word	0x51eb851f

08004c44 <std>:
 8004c44:	2300      	movs	r3, #0
 8004c46:	b510      	push	{r4, lr}
 8004c48:	4604      	mov	r4, r0
 8004c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c52:	6083      	str	r3, [r0, #8]
 8004c54:	8181      	strh	r1, [r0, #12]
 8004c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c58:	81c2      	strh	r2, [r0, #14]
 8004c5a:	6183      	str	r3, [r0, #24]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2208      	movs	r2, #8
 8004c60:	305c      	adds	r0, #92	@ 0x5c
 8004c62:	f000 fa19 	bl	8005098 <memset>
 8004c66:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <std+0x58>)
 8004c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <std+0x5c>)
 8004c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <std+0x60>)
 8004c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <std+0x64>)
 8004c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <std+0x68>)
 8004c78:	6224      	str	r4, [r4, #32]
 8004c7a:	429c      	cmp	r4, r3
 8004c7c:	d006      	beq.n	8004c8c <std+0x48>
 8004c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c82:	4294      	cmp	r4, r2
 8004c84:	d002      	beq.n	8004c8c <std+0x48>
 8004c86:	33d0      	adds	r3, #208	@ 0xd0
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	d105      	bne.n	8004c98 <std+0x54>
 8004c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c94:	f000 ba78 	b.w	8005188 <__retarget_lock_init_recursive>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	bf00      	nop
 8004c9c:	08004ee9 	.word	0x08004ee9
 8004ca0:	08004f0b 	.word	0x08004f0b
 8004ca4:	08004f43 	.word	0x08004f43
 8004ca8:	08004f67 	.word	0x08004f67
 8004cac:	2000012c 	.word	0x2000012c

08004cb0 <stdio_exit_handler>:
 8004cb0:	4a02      	ldr	r2, [pc, #8]	@ (8004cbc <stdio_exit_handler+0xc>)
 8004cb2:	4903      	ldr	r1, [pc, #12]	@ (8004cc0 <stdio_exit_handler+0x10>)
 8004cb4:	4803      	ldr	r0, [pc, #12]	@ (8004cc4 <stdio_exit_handler+0x14>)
 8004cb6:	f000 b869 	b.w	8004d8c <_fwalk_sglue>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	08005cd9 	.word	0x08005cd9
 8004cc4:	2000001c 	.word	0x2000001c

08004cc8 <cleanup_stdio>:
 8004cc8:	6841      	ldr	r1, [r0, #4]
 8004cca:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <cleanup_stdio+0x34>)
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	d001      	beq.n	8004cd8 <cleanup_stdio+0x10>
 8004cd4:	f001 f800 	bl	8005cd8 <_fflush_r>
 8004cd8:	68a1      	ldr	r1, [r4, #8]
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <cleanup_stdio+0x38>)
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <cleanup_stdio+0x1e>
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 fff9 	bl	8005cd8 <_fflush_r>
 8004ce6:	68e1      	ldr	r1, [r4, #12]
 8004ce8:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <cleanup_stdio+0x3c>)
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d004      	beq.n	8004cf8 <cleanup_stdio+0x30>
 8004cee:	4620      	mov	r0, r4
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f000 bff0 	b.w	8005cd8 <_fflush_r>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000012c 	.word	0x2000012c
 8004d00:	20000194 	.word	0x20000194
 8004d04:	200001fc 	.word	0x200001fc

08004d08 <global_stdio_init.part.0>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <global_stdio_init.part.0+0x30>)
 8004d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d3c <global_stdio_init.part.0+0x34>)
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d40 <global_stdio_init.part.0+0x38>)
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	4620      	mov	r0, r4
 8004d14:	2200      	movs	r2, #0
 8004d16:	2104      	movs	r1, #4
 8004d18:	f7ff ff94 	bl	8004c44 <std>
 8004d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d20:	2201      	movs	r2, #1
 8004d22:	2109      	movs	r1, #9
 8004d24:	f7ff ff8e 	bl	8004c44 <std>
 8004d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d32:	2112      	movs	r1, #18
 8004d34:	f7ff bf86 	b.w	8004c44 <std>
 8004d38:	20000264 	.word	0x20000264
 8004d3c:	2000012c 	.word	0x2000012c
 8004d40:	08004cb1 	.word	0x08004cb1

08004d44 <__sfp_lock_acquire>:
 8004d44:	4801      	ldr	r0, [pc, #4]	@ (8004d4c <__sfp_lock_acquire+0x8>)
 8004d46:	f000 ba20 	b.w	800518a <__retarget_lock_acquire_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	2000026d 	.word	0x2000026d

08004d50 <__sfp_lock_release>:
 8004d50:	4801      	ldr	r0, [pc, #4]	@ (8004d58 <__sfp_lock_release+0x8>)
 8004d52:	f000 ba1b 	b.w	800518c <__retarget_lock_release_recursive>
 8004d56:	bf00      	nop
 8004d58:	2000026d 	.word	0x2000026d

08004d5c <__sinit>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4604      	mov	r4, r0
 8004d60:	f7ff fff0 	bl	8004d44 <__sfp_lock_acquire>
 8004d64:	6a23      	ldr	r3, [r4, #32]
 8004d66:	b11b      	cbz	r3, 8004d70 <__sinit+0x14>
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	f7ff bff0 	b.w	8004d50 <__sfp_lock_release>
 8004d70:	4b04      	ldr	r3, [pc, #16]	@ (8004d84 <__sinit+0x28>)
 8004d72:	6223      	str	r3, [r4, #32]
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <__sinit+0x2c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f5      	bne.n	8004d68 <__sinit+0xc>
 8004d7c:	f7ff ffc4 	bl	8004d08 <global_stdio_init.part.0>
 8004d80:	e7f2      	b.n	8004d68 <__sinit+0xc>
 8004d82:	bf00      	nop
 8004d84:	08004cc9 	.word	0x08004cc9
 8004d88:	20000264 	.word	0x20000264

08004d8c <_fwalk_sglue>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	4607      	mov	r7, r0
 8004d92:	4688      	mov	r8, r1
 8004d94:	4614      	mov	r4, r2
 8004d96:	2600      	movs	r6, #0
 8004d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004da0:	d505      	bpl.n	8004dae <_fwalk_sglue+0x22>
 8004da2:	6824      	ldr	r4, [r4, #0]
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	d1f7      	bne.n	8004d98 <_fwalk_sglue+0xc>
 8004da8:	4630      	mov	r0, r6
 8004daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d907      	bls.n	8004dc4 <_fwalk_sglue+0x38>
 8004db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004db8:	3301      	adds	r3, #1
 8004dba:	d003      	beq.n	8004dc4 <_fwalk_sglue+0x38>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	4306      	orrs	r6, r0
 8004dc4:	3568      	adds	r5, #104	@ 0x68
 8004dc6:	e7e9      	b.n	8004d9c <_fwalk_sglue+0x10>

08004dc8 <iprintf>:
 8004dc8:	b40f      	push	{r0, r1, r2, r3}
 8004dca:	b507      	push	{r0, r1, r2, lr}
 8004dcc:	4906      	ldr	r1, [pc, #24]	@ (8004de8 <iprintf+0x20>)
 8004dce:	ab04      	add	r3, sp, #16
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd6:	6881      	ldr	r1, [r0, #8]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	f000 fc53 	bl	8005684 <_vfiprintf_r>
 8004dde:	b003      	add	sp, #12
 8004de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de4:	b004      	add	sp, #16
 8004de6:	4770      	bx	lr
 8004de8:	20000018 	.word	0x20000018

08004dec <_puts_r>:
 8004dec:	6a03      	ldr	r3, [r0, #32]
 8004dee:	b570      	push	{r4, r5, r6, lr}
 8004df0:	6884      	ldr	r4, [r0, #8]
 8004df2:	4605      	mov	r5, r0
 8004df4:	460e      	mov	r6, r1
 8004df6:	b90b      	cbnz	r3, 8004dfc <_puts_r+0x10>
 8004df8:	f7ff ffb0 	bl	8004d5c <__sinit>
 8004dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dfe:	07db      	lsls	r3, r3, #31
 8004e00:	d405      	bmi.n	8004e0e <_puts_r+0x22>
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	0598      	lsls	r0, r3, #22
 8004e06:	d402      	bmi.n	8004e0e <_puts_r+0x22>
 8004e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e0a:	f000 f9be 	bl	800518a <__retarget_lock_acquire_recursive>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	0719      	lsls	r1, r3, #28
 8004e12:	d502      	bpl.n	8004e1a <_puts_r+0x2e>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d135      	bne.n	8004e86 <_puts_r+0x9a>
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 f8e5 	bl	8004fec <__swsetup_r>
 8004e22:	b380      	cbz	r0, 8004e86 <_puts_r+0x9a>
 8004e24:	f04f 35ff 	mov.w	r5, #4294967295
 8004e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e2a:	07da      	lsls	r2, r3, #31
 8004e2c:	d405      	bmi.n	8004e3a <_puts_r+0x4e>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	059b      	lsls	r3, r3, #22
 8004e32:	d402      	bmi.n	8004e3a <_puts_r+0x4e>
 8004e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e36:	f000 f9a9 	bl	800518c <__retarget_lock_release_recursive>
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da04      	bge.n	8004e4c <_puts_r+0x60>
 8004e42:	69a2      	ldr	r2, [r4, #24]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	dc17      	bgt.n	8004e78 <_puts_r+0x8c>
 8004e48:	290a      	cmp	r1, #10
 8004e4a:	d015      	beq.n	8004e78 <_puts_r+0x8c>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	7019      	strb	r1, [r3, #0]
 8004e54:	68a3      	ldr	r3, [r4, #8]
 8004e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	d1ed      	bne.n	8004e3e <_puts_r+0x52>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da11      	bge.n	8004e8a <_puts_r+0x9e>
 8004e66:	4622      	mov	r2, r4
 8004e68:	210a      	movs	r1, #10
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f87f 	bl	8004f6e <__swbuf_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0d7      	beq.n	8004e24 <_puts_r+0x38>
 8004e74:	250a      	movs	r5, #10
 8004e76:	e7d7      	b.n	8004e28 <_puts_r+0x3c>
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f877 	bl	8004f6e <__swbuf_r>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d1e7      	bne.n	8004e54 <_puts_r+0x68>
 8004e84:	e7ce      	b.n	8004e24 <_puts_r+0x38>
 8004e86:	3e01      	subs	r6, #1
 8004e88:	e7e4      	b.n	8004e54 <_puts_r+0x68>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	6022      	str	r2, [r4, #0]
 8004e90:	220a      	movs	r2, #10
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e7ee      	b.n	8004e74 <_puts_r+0x88>
	...

08004e98 <puts>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	@ (8004ea4 <puts+0xc>)
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f7ff bfa5 	b.w	8004dec <_puts_r>
 8004ea2:	bf00      	nop
 8004ea4:	20000018 	.word	0x20000018

08004ea8 <siprintf>:
 8004ea8:	b40e      	push	{r1, r2, r3}
 8004eaa:	b500      	push	{lr}
 8004eac:	b09c      	sub	sp, #112	@ 0x70
 8004eae:	ab1d      	add	r3, sp, #116	@ 0x74
 8004eb0:	9002      	str	r0, [sp, #8]
 8004eb2:	9006      	str	r0, [sp, #24]
 8004eb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004eb8:	4809      	ldr	r0, [pc, #36]	@ (8004ee0 <siprintf+0x38>)
 8004eba:	9107      	str	r1, [sp, #28]
 8004ebc:	9104      	str	r1, [sp, #16]
 8004ebe:	4909      	ldr	r1, [pc, #36]	@ (8004ee4 <siprintf+0x3c>)
 8004ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec4:	9105      	str	r1, [sp, #20]
 8004ec6:	6800      	ldr	r0, [r0, #0]
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	a902      	add	r1, sp, #8
 8004ecc:	f000 fab4 	bl	8005438 <_svfiprintf_r>
 8004ed0:	9b02      	ldr	r3, [sp, #8]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	b01c      	add	sp, #112	@ 0x70
 8004ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004edc:	b003      	add	sp, #12
 8004ede:	4770      	bx	lr
 8004ee0:	20000018 	.word	0x20000018
 8004ee4:	ffff0208 	.word	0xffff0208

08004ee8 <__sread>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	460c      	mov	r4, r1
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	f000 f8fc 	bl	80050ec <_read_r>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	bfab      	itete	ge
 8004ef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004efa:	89a3      	ldrhlt	r3, [r4, #12]
 8004efc:	181b      	addge	r3, r3, r0
 8004efe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f02:	bfac      	ite	ge
 8004f04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f06:	81a3      	strhlt	r3, [r4, #12]
 8004f08:	bd10      	pop	{r4, pc}

08004f0a <__swrite>:
 8004f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	461f      	mov	r7, r3
 8004f10:	898b      	ldrh	r3, [r1, #12]
 8004f12:	05db      	lsls	r3, r3, #23
 8004f14:	4605      	mov	r5, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	4616      	mov	r6, r2
 8004f1a:	d505      	bpl.n	8004f28 <__swrite+0x1e>
 8004f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f20:	2302      	movs	r3, #2
 8004f22:	2200      	movs	r2, #0
 8004f24:	f000 f8d0 	bl	80050c8 <_lseek_r>
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	4632      	mov	r2, r6
 8004f36:	463b      	mov	r3, r7
 8004f38:	4628      	mov	r0, r5
 8004f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3e:	f000 b8e7 	b.w	8005110 <_write_r>

08004f42 <__sseek>:
 8004f42:	b510      	push	{r4, lr}
 8004f44:	460c      	mov	r4, r1
 8004f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4a:	f000 f8bd 	bl	80050c8 <_lseek_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	bf15      	itete	ne
 8004f54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f5e:	81a3      	strheq	r3, [r4, #12]
 8004f60:	bf18      	it	ne
 8004f62:	81a3      	strhne	r3, [r4, #12]
 8004f64:	bd10      	pop	{r4, pc}

08004f66 <__sclose>:
 8004f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6a:	f000 b89d 	b.w	80050a8 <_close_r>

08004f6e <__swbuf_r>:
 8004f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f70:	460e      	mov	r6, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	4605      	mov	r5, r0
 8004f76:	b118      	cbz	r0, 8004f80 <__swbuf_r+0x12>
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	b90b      	cbnz	r3, 8004f80 <__swbuf_r+0x12>
 8004f7c:	f7ff feee 	bl	8004d5c <__sinit>
 8004f80:	69a3      	ldr	r3, [r4, #24]
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	071a      	lsls	r2, r3, #28
 8004f88:	d501      	bpl.n	8004f8e <__swbuf_r+0x20>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	b943      	cbnz	r3, 8004fa0 <__swbuf_r+0x32>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f82b 	bl	8004fec <__swsetup_r>
 8004f96:	b118      	cbz	r0, 8004fa0 <__swbuf_r+0x32>
 8004f98:	f04f 37ff 	mov.w	r7, #4294967295
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	6922      	ldr	r2, [r4, #16]
 8004fa4:	1a98      	subs	r0, r3, r2
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	b2f6      	uxtb	r6, r6
 8004faa:	4283      	cmp	r3, r0
 8004fac:	4637      	mov	r7, r6
 8004fae:	dc05      	bgt.n	8004fbc <__swbuf_r+0x4e>
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 fe90 	bl	8005cd8 <_fflush_r>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d1ed      	bne.n	8004f98 <__swbuf_r+0x2a>
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60a3      	str	r3, [r4, #8]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	6022      	str	r2, [r4, #0]
 8004fc8:	701e      	strb	r6, [r3, #0]
 8004fca:	6962      	ldr	r2, [r4, #20]
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d004      	beq.n	8004fdc <__swbuf_r+0x6e>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	07db      	lsls	r3, r3, #31
 8004fd6:	d5e1      	bpl.n	8004f9c <__swbuf_r+0x2e>
 8004fd8:	2e0a      	cmp	r6, #10
 8004fda:	d1df      	bne.n	8004f9c <__swbuf_r+0x2e>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fe7a 	bl	8005cd8 <_fflush_r>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d0d9      	beq.n	8004f9c <__swbuf_r+0x2e>
 8004fe8:	e7d6      	b.n	8004f98 <__swbuf_r+0x2a>
	...

08004fec <__swsetup_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4b29      	ldr	r3, [pc, #164]	@ (8005094 <__swsetup_r+0xa8>)
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	b118      	cbz	r0, 8005000 <__swsetup_r+0x14>
 8004ff8:	6a03      	ldr	r3, [r0, #32]
 8004ffa:	b90b      	cbnz	r3, 8005000 <__swsetup_r+0x14>
 8004ffc:	f7ff feae 	bl	8004d5c <__sinit>
 8005000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005004:	0719      	lsls	r1, r3, #28
 8005006:	d422      	bmi.n	800504e <__swsetup_r+0x62>
 8005008:	06da      	lsls	r2, r3, #27
 800500a:	d407      	bmi.n	800501c <__swsetup_r+0x30>
 800500c:	2209      	movs	r2, #9
 800500e:	602a      	str	r2, [r5, #0]
 8005010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	e033      	b.n	8005084 <__swsetup_r+0x98>
 800501c:	0758      	lsls	r0, r3, #29
 800501e:	d512      	bpl.n	8005046 <__swsetup_r+0x5a>
 8005020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005022:	b141      	cbz	r1, 8005036 <__swsetup_r+0x4a>
 8005024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005028:	4299      	cmp	r1, r3
 800502a:	d002      	beq.n	8005032 <__swsetup_r+0x46>
 800502c:	4628      	mov	r0, r5
 800502e:	f000 f8af 	bl	8005190 <_free_r>
 8005032:	2300      	movs	r3, #0
 8005034:	6363      	str	r3, [r4, #52]	@ 0x34
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	2300      	movs	r3, #0
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	89a3      	ldrh	r3, [r4, #12]
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	b94b      	cbnz	r3, 8005066 <__swsetup_r+0x7a>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505c:	d003      	beq.n	8005066 <__swsetup_r+0x7a>
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 fe87 	bl	8005d74 <__smakebuf_r>
 8005066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506a:	f013 0201 	ands.w	r2, r3, #1
 800506e:	d00a      	beq.n	8005086 <__swsetup_r+0x9a>
 8005070:	2200      	movs	r2, #0
 8005072:	60a2      	str	r2, [r4, #8]
 8005074:	6962      	ldr	r2, [r4, #20]
 8005076:	4252      	negs	r2, r2
 8005078:	61a2      	str	r2, [r4, #24]
 800507a:	6922      	ldr	r2, [r4, #16]
 800507c:	b942      	cbnz	r2, 8005090 <__swsetup_r+0xa4>
 800507e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005082:	d1c5      	bne.n	8005010 <__swsetup_r+0x24>
 8005084:	bd38      	pop	{r3, r4, r5, pc}
 8005086:	0799      	lsls	r1, r3, #30
 8005088:	bf58      	it	pl
 800508a:	6962      	ldrpl	r2, [r4, #20]
 800508c:	60a2      	str	r2, [r4, #8]
 800508e:	e7f4      	b.n	800507a <__swsetup_r+0x8e>
 8005090:	2000      	movs	r0, #0
 8005092:	e7f7      	b.n	8005084 <__swsetup_r+0x98>
 8005094:	20000018 	.word	0x20000018

08005098 <memset>:
 8005098:	4402      	add	r2, r0
 800509a:	4603      	mov	r3, r0
 800509c:	4293      	cmp	r3, r2
 800509e:	d100      	bne.n	80050a2 <memset+0xa>
 80050a0:	4770      	bx	lr
 80050a2:	f803 1b01 	strb.w	r1, [r3], #1
 80050a6:	e7f9      	b.n	800509c <memset+0x4>

080050a8 <_close_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d06      	ldr	r5, [pc, #24]	@ (80050c4 <_close_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fb fe39 	bl	8000d2a <_close>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_close_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_close_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	20000268 	.word	0x20000268

080050c8 <_lseek_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d07      	ldr	r5, [pc, #28]	@ (80050e8 <_lseek_r+0x20>)
 80050cc:	4604      	mov	r4, r0
 80050ce:	4608      	mov	r0, r1
 80050d0:	4611      	mov	r1, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	602a      	str	r2, [r5, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f7fb fe4e 	bl	8000d78 <_lseek>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_lseek_r+0x1e>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_lseek_r+0x1e>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000268 	.word	0x20000268

080050ec <_read_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d07      	ldr	r5, [pc, #28]	@ (800510c <_read_r+0x20>)
 80050f0:	4604      	mov	r4, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7fb fddc 	bl	8000cb8 <_read>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_read_r+0x1e>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_read_r+0x1e>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000268 	.word	0x20000268

08005110 <_write_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	@ (8005130 <_write_r+0x20>)
 8005114:	4604      	mov	r4, r0
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	2200      	movs	r2, #0
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f7fb fde7 	bl	8000cf2 <_write>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_write_r+0x1e>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_write_r+0x1e>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000268 	.word	0x20000268

08005134 <__errno>:
 8005134:	4b01      	ldr	r3, [pc, #4]	@ (800513c <__errno+0x8>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000018 	.word	0x20000018

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	@ (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	@ (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	@ (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	@ (8005184 <__libc_init_array+0x44>)
 8005154:	f000 feda 	bl	8005f0c <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08005fec 	.word	0x08005fec
 800517c:	08005fec 	.word	0x08005fec
 8005180:	08005fec 	.word	0x08005fec
 8005184:	08005ff0 	.word	0x08005ff0

08005188 <__retarget_lock_init_recursive>:
 8005188:	4770      	bx	lr

0800518a <__retarget_lock_acquire_recursive>:
 800518a:	4770      	bx	lr

0800518c <__retarget_lock_release_recursive>:
 800518c:	4770      	bx	lr
	...

08005190 <_free_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4605      	mov	r5, r0
 8005194:	2900      	cmp	r1, #0
 8005196:	d041      	beq.n	800521c <_free_r+0x8c>
 8005198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519c:	1f0c      	subs	r4, r1, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfb8      	it	lt
 80051a2:	18e4      	addlt	r4, r4, r3
 80051a4:	f000 f8e0 	bl	8005368 <__malloc_lock>
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <_free_r+0x90>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	b933      	cbnz	r3, 80051bc <_free_r+0x2c>
 80051ae:	6063      	str	r3, [r4, #4]
 80051b0:	6014      	str	r4, [r2, #0]
 80051b2:	4628      	mov	r0, r5
 80051b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051b8:	f000 b8dc 	b.w	8005374 <__malloc_unlock>
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d908      	bls.n	80051d2 <_free_r+0x42>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	1821      	adds	r1, r4, r0
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf01      	itttt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	1809      	addeq	r1, r1, r0
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	e7ed      	b.n	80051ae <_free_r+0x1e>
 80051d2:	461a      	mov	r2, r3
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	b10b      	cbz	r3, 80051dc <_free_r+0x4c>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d9fa      	bls.n	80051d2 <_free_r+0x42>
 80051dc:	6811      	ldr	r1, [r2, #0]
 80051de:	1850      	adds	r0, r2, r1
 80051e0:	42a0      	cmp	r0, r4
 80051e2:	d10b      	bne.n	80051fc <_free_r+0x6c>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	4401      	add	r1, r0
 80051e8:	1850      	adds	r0, r2, r1
 80051ea:	4283      	cmp	r3, r0
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	d1e0      	bne.n	80051b2 <_free_r+0x22>
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	6053      	str	r3, [r2, #4]
 80051f6:	4408      	add	r0, r1
 80051f8:	6010      	str	r0, [r2, #0]
 80051fa:	e7da      	b.n	80051b2 <_free_r+0x22>
 80051fc:	d902      	bls.n	8005204 <_free_r+0x74>
 80051fe:	230c      	movs	r3, #12
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	e7d6      	b.n	80051b2 <_free_r+0x22>
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	1821      	adds	r1, r4, r0
 8005208:	428b      	cmp	r3, r1
 800520a:	bf04      	itt	eq
 800520c:	6819      	ldreq	r1, [r3, #0]
 800520e:	685b      	ldreq	r3, [r3, #4]
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	bf04      	itt	eq
 8005214:	1809      	addeq	r1, r1, r0
 8005216:	6021      	streq	r1, [r4, #0]
 8005218:	6054      	str	r4, [r2, #4]
 800521a:	e7ca      	b.n	80051b2 <_free_r+0x22>
 800521c:	bd38      	pop	{r3, r4, r5, pc}
 800521e:	bf00      	nop
 8005220:	20000274 	.word	0x20000274

08005224 <sbrk_aligned>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4e0f      	ldr	r6, [pc, #60]	@ (8005264 <sbrk_aligned+0x40>)
 8005228:	460c      	mov	r4, r1
 800522a:	6831      	ldr	r1, [r6, #0]
 800522c:	4605      	mov	r5, r0
 800522e:	b911      	cbnz	r1, 8005236 <sbrk_aligned+0x12>
 8005230:	f000 fe18 	bl	8005e64 <_sbrk_r>
 8005234:	6030      	str	r0, [r6, #0]
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fe13 	bl	8005e64 <_sbrk_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d103      	bne.n	800524a <sbrk_aligned+0x26>
 8005242:	f04f 34ff 	mov.w	r4, #4294967295
 8005246:	4620      	mov	r0, r4
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	1cc4      	adds	r4, r0, #3
 800524c:	f024 0403 	bic.w	r4, r4, #3
 8005250:	42a0      	cmp	r0, r4
 8005252:	d0f8      	beq.n	8005246 <sbrk_aligned+0x22>
 8005254:	1a21      	subs	r1, r4, r0
 8005256:	4628      	mov	r0, r5
 8005258:	f000 fe04 	bl	8005e64 <_sbrk_r>
 800525c:	3001      	adds	r0, #1
 800525e:	d1f2      	bne.n	8005246 <sbrk_aligned+0x22>
 8005260:	e7ef      	b.n	8005242 <sbrk_aligned+0x1e>
 8005262:	bf00      	nop
 8005264:	20000270 	.word	0x20000270

08005268 <_malloc_r>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	1ccd      	adds	r5, r1, #3
 800526e:	f025 0503 	bic.w	r5, r5, #3
 8005272:	3508      	adds	r5, #8
 8005274:	2d0c      	cmp	r5, #12
 8005276:	bf38      	it	cc
 8005278:	250c      	movcc	r5, #12
 800527a:	2d00      	cmp	r5, #0
 800527c:	4606      	mov	r6, r0
 800527e:	db01      	blt.n	8005284 <_malloc_r+0x1c>
 8005280:	42a9      	cmp	r1, r5
 8005282:	d904      	bls.n	800528e <_malloc_r+0x26>
 8005284:	230c      	movs	r3, #12
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	2000      	movs	r0, #0
 800528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005364 <_malloc_r+0xfc>
 8005292:	f000 f869 	bl	8005368 <__malloc_lock>
 8005296:	f8d8 3000 	ldr.w	r3, [r8]
 800529a:	461c      	mov	r4, r3
 800529c:	bb44      	cbnz	r4, 80052f0 <_malloc_r+0x88>
 800529e:	4629      	mov	r1, r5
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7ff ffbf 	bl	8005224 <sbrk_aligned>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	4604      	mov	r4, r0
 80052aa:	d158      	bne.n	800535e <_malloc_r+0xf6>
 80052ac:	f8d8 4000 	ldr.w	r4, [r8]
 80052b0:	4627      	mov	r7, r4
 80052b2:	2f00      	cmp	r7, #0
 80052b4:	d143      	bne.n	800533e <_malloc_r+0xd6>
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d04b      	beq.n	8005352 <_malloc_r+0xea>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	4639      	mov	r1, r7
 80052be:	4630      	mov	r0, r6
 80052c0:	eb04 0903 	add.w	r9, r4, r3
 80052c4:	f000 fdce 	bl	8005e64 <_sbrk_r>
 80052c8:	4581      	cmp	r9, r0
 80052ca:	d142      	bne.n	8005352 <_malloc_r+0xea>
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	1a6d      	subs	r5, r5, r1
 80052d0:	4629      	mov	r1, r5
 80052d2:	4630      	mov	r0, r6
 80052d4:	f7ff ffa6 	bl	8005224 <sbrk_aligned>
 80052d8:	3001      	adds	r0, #1
 80052da:	d03a      	beq.n	8005352 <_malloc_r+0xea>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	442b      	add	r3, r5
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	f8d8 3000 	ldr.w	r3, [r8]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	bb62      	cbnz	r2, 8005344 <_malloc_r+0xdc>
 80052ea:	f8c8 7000 	str.w	r7, [r8]
 80052ee:	e00f      	b.n	8005310 <_malloc_r+0xa8>
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	1b52      	subs	r2, r2, r5
 80052f4:	d420      	bmi.n	8005338 <_malloc_r+0xd0>
 80052f6:	2a0b      	cmp	r2, #11
 80052f8:	d917      	bls.n	800532a <_malloc_r+0xc2>
 80052fa:	1961      	adds	r1, r4, r5
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	6025      	str	r5, [r4, #0]
 8005300:	bf18      	it	ne
 8005302:	6059      	strne	r1, [r3, #4]
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	bf08      	it	eq
 8005308:	f8c8 1000 	streq.w	r1, [r8]
 800530c:	5162      	str	r2, [r4, r5]
 800530e:	604b      	str	r3, [r1, #4]
 8005310:	4630      	mov	r0, r6
 8005312:	f000 f82f 	bl	8005374 <__malloc_unlock>
 8005316:	f104 000b 	add.w	r0, r4, #11
 800531a:	1d23      	adds	r3, r4, #4
 800531c:	f020 0007 	bic.w	r0, r0, #7
 8005320:	1ac2      	subs	r2, r0, r3
 8005322:	bf1c      	itt	ne
 8005324:	1a1b      	subne	r3, r3, r0
 8005326:	50a3      	strne	r3, [r4, r2]
 8005328:	e7af      	b.n	800528a <_malloc_r+0x22>
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	42a3      	cmp	r3, r4
 800532e:	bf0c      	ite	eq
 8005330:	f8c8 2000 	streq.w	r2, [r8]
 8005334:	605a      	strne	r2, [r3, #4]
 8005336:	e7eb      	b.n	8005310 <_malloc_r+0xa8>
 8005338:	4623      	mov	r3, r4
 800533a:	6864      	ldr	r4, [r4, #4]
 800533c:	e7ae      	b.n	800529c <_malloc_r+0x34>
 800533e:	463c      	mov	r4, r7
 8005340:	687f      	ldr	r7, [r7, #4]
 8005342:	e7b6      	b.n	80052b2 <_malloc_r+0x4a>
 8005344:	461a      	mov	r2, r3
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	42a3      	cmp	r3, r4
 800534a:	d1fb      	bne.n	8005344 <_malloc_r+0xdc>
 800534c:	2300      	movs	r3, #0
 800534e:	6053      	str	r3, [r2, #4]
 8005350:	e7de      	b.n	8005310 <_malloc_r+0xa8>
 8005352:	230c      	movs	r3, #12
 8005354:	6033      	str	r3, [r6, #0]
 8005356:	4630      	mov	r0, r6
 8005358:	f000 f80c 	bl	8005374 <__malloc_unlock>
 800535c:	e794      	b.n	8005288 <_malloc_r+0x20>
 800535e:	6005      	str	r5, [r0, #0]
 8005360:	e7d6      	b.n	8005310 <_malloc_r+0xa8>
 8005362:	bf00      	nop
 8005364:	20000274 	.word	0x20000274

08005368 <__malloc_lock>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__malloc_lock+0x8>)
 800536a:	f7ff bf0e 	b.w	800518a <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	2000026c 	.word	0x2000026c

08005374 <__malloc_unlock>:
 8005374:	4801      	ldr	r0, [pc, #4]	@ (800537c <__malloc_unlock+0x8>)
 8005376:	f7ff bf09 	b.w	800518c <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	2000026c 	.word	0x2000026c

08005380 <__ssputs_r>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	688e      	ldr	r6, [r1, #8]
 8005386:	461f      	mov	r7, r3
 8005388:	42be      	cmp	r6, r7
 800538a:	680b      	ldr	r3, [r1, #0]
 800538c:	4682      	mov	sl, r0
 800538e:	460c      	mov	r4, r1
 8005390:	4690      	mov	r8, r2
 8005392:	d82d      	bhi.n	80053f0 <__ssputs_r+0x70>
 8005394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005398:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800539c:	d026      	beq.n	80053ec <__ssputs_r+0x6c>
 800539e:	6965      	ldr	r5, [r4, #20]
 80053a0:	6909      	ldr	r1, [r1, #16]
 80053a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053a6:	eba3 0901 	sub.w	r9, r3, r1
 80053aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053ae:	1c7b      	adds	r3, r7, #1
 80053b0:	444b      	add	r3, r9
 80053b2:	106d      	asrs	r5, r5, #1
 80053b4:	429d      	cmp	r5, r3
 80053b6:	bf38      	it	cc
 80053b8:	461d      	movcc	r5, r3
 80053ba:	0553      	lsls	r3, r2, #21
 80053bc:	d527      	bpl.n	800540e <__ssputs_r+0x8e>
 80053be:	4629      	mov	r1, r5
 80053c0:	f7ff ff52 	bl	8005268 <_malloc_r>
 80053c4:	4606      	mov	r6, r0
 80053c6:	b360      	cbz	r0, 8005422 <__ssputs_r+0xa2>
 80053c8:	6921      	ldr	r1, [r4, #16]
 80053ca:	464a      	mov	r2, r9
 80053cc:	f000 fd5a 	bl	8005e84 <memcpy>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	6126      	str	r6, [r4, #16]
 80053de:	6165      	str	r5, [r4, #20]
 80053e0:	444e      	add	r6, r9
 80053e2:	eba5 0509 	sub.w	r5, r5, r9
 80053e6:	6026      	str	r6, [r4, #0]
 80053e8:	60a5      	str	r5, [r4, #8]
 80053ea:	463e      	mov	r6, r7
 80053ec:	42be      	cmp	r6, r7
 80053ee:	d900      	bls.n	80053f2 <__ssputs_r+0x72>
 80053f0:	463e      	mov	r6, r7
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4641      	mov	r1, r8
 80053f8:	f000 fcf8 	bl	8005dec <memmove>
 80053fc:	68a3      	ldr	r3, [r4, #8]
 80053fe:	1b9b      	subs	r3, r3, r6
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4433      	add	r3, r6
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	2000      	movs	r0, #0
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	462a      	mov	r2, r5
 8005410:	f000 fd46 	bl	8005ea0 <_realloc_r>
 8005414:	4606      	mov	r6, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d1e0      	bne.n	80053dc <__ssputs_r+0x5c>
 800541a:	6921      	ldr	r1, [r4, #16]
 800541c:	4650      	mov	r0, sl
 800541e:	f7ff feb7 	bl	8005190 <_free_r>
 8005422:	230c      	movs	r3, #12
 8005424:	f8ca 3000 	str.w	r3, [sl]
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	e7e9      	b.n	800540a <__ssputs_r+0x8a>
	...

08005438 <_svfiprintf_r>:
 8005438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543c:	4698      	mov	r8, r3
 800543e:	898b      	ldrh	r3, [r1, #12]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	b09d      	sub	sp, #116	@ 0x74
 8005444:	4607      	mov	r7, r0
 8005446:	460d      	mov	r5, r1
 8005448:	4614      	mov	r4, r2
 800544a:	d510      	bpl.n	800546e <_svfiprintf_r+0x36>
 800544c:	690b      	ldr	r3, [r1, #16]
 800544e:	b973      	cbnz	r3, 800546e <_svfiprintf_r+0x36>
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	f7ff ff09 	bl	8005268 <_malloc_r>
 8005456:	6028      	str	r0, [r5, #0]
 8005458:	6128      	str	r0, [r5, #16]
 800545a:	b930      	cbnz	r0, 800546a <_svfiprintf_r+0x32>
 800545c:	230c      	movs	r3, #12
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	b01d      	add	sp, #116	@ 0x74
 8005466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546a:	2340      	movs	r3, #64	@ 0x40
 800546c:	616b      	str	r3, [r5, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	9309      	str	r3, [sp, #36]	@ 0x24
 8005472:	2320      	movs	r3, #32
 8005474:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005478:	f8cd 800c 	str.w	r8, [sp, #12]
 800547c:	2330      	movs	r3, #48	@ 0x30
 800547e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800561c <_svfiprintf_r+0x1e4>
 8005482:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005486:	f04f 0901 	mov.w	r9, #1
 800548a:	4623      	mov	r3, r4
 800548c:	469a      	mov	sl, r3
 800548e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005492:	b10a      	cbz	r2, 8005498 <_svfiprintf_r+0x60>
 8005494:	2a25      	cmp	r2, #37	@ 0x25
 8005496:	d1f9      	bne.n	800548c <_svfiprintf_r+0x54>
 8005498:	ebba 0b04 	subs.w	fp, sl, r4
 800549c:	d00b      	beq.n	80054b6 <_svfiprintf_r+0x7e>
 800549e:	465b      	mov	r3, fp
 80054a0:	4622      	mov	r2, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ff6b 	bl	8005380 <__ssputs_r>
 80054aa:	3001      	adds	r0, #1
 80054ac:	f000 80a7 	beq.w	80055fe <_svfiprintf_r+0x1c6>
 80054b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054b2:	445a      	add	r2, fp
 80054b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054b6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 809f 	beq.w	80055fe <_svfiprintf_r+0x1c6>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ca:	f10a 0a01 	add.w	sl, sl, #1
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80054d8:	4654      	mov	r4, sl
 80054da:	2205      	movs	r2, #5
 80054dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e0:	484e      	ldr	r0, [pc, #312]	@ (800561c <_svfiprintf_r+0x1e4>)
 80054e2:	f7fa fe7d 	bl	80001e0 <memchr>
 80054e6:	9a04      	ldr	r2, [sp, #16]
 80054e8:	b9d8      	cbnz	r0, 8005522 <_svfiprintf_r+0xea>
 80054ea:	06d0      	lsls	r0, r2, #27
 80054ec:	bf44      	itt	mi
 80054ee:	2320      	movmi	r3, #32
 80054f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054f4:	0711      	lsls	r1, r2, #28
 80054f6:	bf44      	itt	mi
 80054f8:	232b      	movmi	r3, #43	@ 0x2b
 80054fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b2a      	cmp	r3, #42	@ 0x2a
 8005504:	d015      	beq.n	8005532 <_svfiprintf_r+0xfa>
 8005506:	9a07      	ldr	r2, [sp, #28]
 8005508:	4654      	mov	r4, sl
 800550a:	2000      	movs	r0, #0
 800550c:	f04f 0c0a 	mov.w	ip, #10
 8005510:	4621      	mov	r1, r4
 8005512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005516:	3b30      	subs	r3, #48	@ 0x30
 8005518:	2b09      	cmp	r3, #9
 800551a:	d94b      	bls.n	80055b4 <_svfiprintf_r+0x17c>
 800551c:	b1b0      	cbz	r0, 800554c <_svfiprintf_r+0x114>
 800551e:	9207      	str	r2, [sp, #28]
 8005520:	e014      	b.n	800554c <_svfiprintf_r+0x114>
 8005522:	eba0 0308 	sub.w	r3, r0, r8
 8005526:	fa09 f303 	lsl.w	r3, r9, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	46a2      	mov	sl, r4
 8005530:	e7d2      	b.n	80054d8 <_svfiprintf_r+0xa0>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	9103      	str	r1, [sp, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfbb      	ittet	lt
 800553e:	425b      	neglt	r3, r3
 8005540:	f042 0202 	orrlt.w	r2, r2, #2
 8005544:	9307      	strge	r3, [sp, #28]
 8005546:	9307      	strlt	r3, [sp, #28]
 8005548:	bfb8      	it	lt
 800554a:	9204      	strlt	r2, [sp, #16]
 800554c:	7823      	ldrb	r3, [r4, #0]
 800554e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005550:	d10a      	bne.n	8005568 <_svfiprintf_r+0x130>
 8005552:	7863      	ldrb	r3, [r4, #1]
 8005554:	2b2a      	cmp	r3, #42	@ 0x2a
 8005556:	d132      	bne.n	80055be <_svfiprintf_r+0x186>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	9203      	str	r2, [sp, #12]
 8005560:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005564:	3402      	adds	r4, #2
 8005566:	9305      	str	r3, [sp, #20]
 8005568:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800562c <_svfiprintf_r+0x1f4>
 800556c:	7821      	ldrb	r1, [r4, #0]
 800556e:	2203      	movs	r2, #3
 8005570:	4650      	mov	r0, sl
 8005572:	f7fa fe35 	bl	80001e0 <memchr>
 8005576:	b138      	cbz	r0, 8005588 <_svfiprintf_r+0x150>
 8005578:	9b04      	ldr	r3, [sp, #16]
 800557a:	eba0 000a 	sub.w	r0, r0, sl
 800557e:	2240      	movs	r2, #64	@ 0x40
 8005580:	4082      	lsls	r2, r0
 8005582:	4313      	orrs	r3, r2
 8005584:	3401      	adds	r4, #1
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558c:	4824      	ldr	r0, [pc, #144]	@ (8005620 <_svfiprintf_r+0x1e8>)
 800558e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005592:	2206      	movs	r2, #6
 8005594:	f7fa fe24 	bl	80001e0 <memchr>
 8005598:	2800      	cmp	r0, #0
 800559a:	d036      	beq.n	800560a <_svfiprintf_r+0x1d2>
 800559c:	4b21      	ldr	r3, [pc, #132]	@ (8005624 <_svfiprintf_r+0x1ec>)
 800559e:	bb1b      	cbnz	r3, 80055e8 <_svfiprintf_r+0x1b0>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	3307      	adds	r3, #7
 80055a4:	f023 0307 	bic.w	r3, r3, #7
 80055a8:	3308      	adds	r3, #8
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ae:	4433      	add	r3, r6
 80055b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b2:	e76a      	b.n	800548a <_svfiprintf_r+0x52>
 80055b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b8:	460c      	mov	r4, r1
 80055ba:	2001      	movs	r0, #1
 80055bc:	e7a8      	b.n	8005510 <_svfiprintf_r+0xd8>
 80055be:	2300      	movs	r3, #0
 80055c0:	3401      	adds	r4, #1
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	4619      	mov	r1, r3
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4620      	mov	r0, r4
 80055cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d0:	3a30      	subs	r2, #48	@ 0x30
 80055d2:	2a09      	cmp	r2, #9
 80055d4:	d903      	bls.n	80055de <_svfiprintf_r+0x1a6>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c6      	beq.n	8005568 <_svfiprintf_r+0x130>
 80055da:	9105      	str	r1, [sp, #20]
 80055dc:	e7c4      	b.n	8005568 <_svfiprintf_r+0x130>
 80055de:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e2:	4604      	mov	r4, r0
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7f0      	b.n	80055ca <_svfiprintf_r+0x192>
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005628 <_svfiprintf_r+0x1f0>)
 80055f0:	a904      	add	r1, sp, #16
 80055f2:	4638      	mov	r0, r7
 80055f4:	f3af 8000 	nop.w
 80055f8:	1c42      	adds	r2, r0, #1
 80055fa:	4606      	mov	r6, r0
 80055fc:	d1d6      	bne.n	80055ac <_svfiprintf_r+0x174>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	065b      	lsls	r3, r3, #25
 8005602:	f53f af2d 	bmi.w	8005460 <_svfiprintf_r+0x28>
 8005606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005608:	e72c      	b.n	8005464 <_svfiprintf_r+0x2c>
 800560a:	ab03      	add	r3, sp, #12
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	462a      	mov	r2, r5
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <_svfiprintf_r+0x1f0>)
 8005612:	a904      	add	r1, sp, #16
 8005614:	4638      	mov	r0, r7
 8005616:	f000 f9bb 	bl	8005990 <_printf_i>
 800561a:	e7ed      	b.n	80055f8 <_svfiprintf_r+0x1c0>
 800561c:	08005fb0 	.word	0x08005fb0
 8005620:	08005fba 	.word	0x08005fba
 8005624:	00000000 	.word	0x00000000
 8005628:	08005381 	.word	0x08005381
 800562c:	08005fb6 	.word	0x08005fb6

08005630 <__sfputc_r>:
 8005630:	6893      	ldr	r3, [r2, #8]
 8005632:	3b01      	subs	r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	b410      	push	{r4}
 8005638:	6093      	str	r3, [r2, #8]
 800563a:	da08      	bge.n	800564e <__sfputc_r+0x1e>
 800563c:	6994      	ldr	r4, [r2, #24]
 800563e:	42a3      	cmp	r3, r4
 8005640:	db01      	blt.n	8005646 <__sfputc_r+0x16>
 8005642:	290a      	cmp	r1, #10
 8005644:	d103      	bne.n	800564e <__sfputc_r+0x1e>
 8005646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800564a:	f7ff bc90 	b.w	8004f6e <__swbuf_r>
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	1c58      	adds	r0, r3, #1
 8005652:	6010      	str	r0, [r2, #0]
 8005654:	7019      	strb	r1, [r3, #0]
 8005656:	4608      	mov	r0, r1
 8005658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565c:	4770      	bx	lr

0800565e <__sfputs_r>:
 800565e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005660:	4606      	mov	r6, r0
 8005662:	460f      	mov	r7, r1
 8005664:	4614      	mov	r4, r2
 8005666:	18d5      	adds	r5, r2, r3
 8005668:	42ac      	cmp	r4, r5
 800566a:	d101      	bne.n	8005670 <__sfputs_r+0x12>
 800566c:	2000      	movs	r0, #0
 800566e:	e007      	b.n	8005680 <__sfputs_r+0x22>
 8005670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005674:	463a      	mov	r2, r7
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ffda 	bl	8005630 <__sfputc_r>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d1f3      	bne.n	8005668 <__sfputs_r+0xa>
 8005680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005684 <_vfiprintf_r>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	460d      	mov	r5, r1
 800568a:	b09d      	sub	sp, #116	@ 0x74
 800568c:	4614      	mov	r4, r2
 800568e:	4698      	mov	r8, r3
 8005690:	4606      	mov	r6, r0
 8005692:	b118      	cbz	r0, 800569c <_vfiprintf_r+0x18>
 8005694:	6a03      	ldr	r3, [r0, #32]
 8005696:	b90b      	cbnz	r3, 800569c <_vfiprintf_r+0x18>
 8005698:	f7ff fb60 	bl	8004d5c <__sinit>
 800569c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800569e:	07d9      	lsls	r1, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_vfiprintf_r+0x2a>
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	059a      	lsls	r2, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_vfiprintf_r+0x2a>
 80056a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056aa:	f7ff fd6e 	bl	800518a <__retarget_lock_acquire_recursive>
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	d501      	bpl.n	80056b8 <_vfiprintf_r+0x34>
 80056b4:	692b      	ldr	r3, [r5, #16]
 80056b6:	b99b      	cbnz	r3, 80056e0 <_vfiprintf_r+0x5c>
 80056b8:	4629      	mov	r1, r5
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff fc96 	bl	8004fec <__swsetup_r>
 80056c0:	b170      	cbz	r0, 80056e0 <_vfiprintf_r+0x5c>
 80056c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056c4:	07dc      	lsls	r4, r3, #31
 80056c6:	d504      	bpl.n	80056d2 <_vfiprintf_r+0x4e>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	b01d      	add	sp, #116	@ 0x74
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	0598      	lsls	r0, r3, #22
 80056d6:	d4f7      	bmi.n	80056c8 <_vfiprintf_r+0x44>
 80056d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056da:	f7ff fd57 	bl	800518c <__retarget_lock_release_recursive>
 80056de:	e7f3      	b.n	80056c8 <_vfiprintf_r+0x44>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e4:	2320      	movs	r3, #32
 80056e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ee:	2330      	movs	r3, #48	@ 0x30
 80056f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058a0 <_vfiprintf_r+0x21c>
 80056f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056f8:	f04f 0901 	mov.w	r9, #1
 80056fc:	4623      	mov	r3, r4
 80056fe:	469a      	mov	sl, r3
 8005700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005704:	b10a      	cbz	r2, 800570a <_vfiprintf_r+0x86>
 8005706:	2a25      	cmp	r2, #37	@ 0x25
 8005708:	d1f9      	bne.n	80056fe <_vfiprintf_r+0x7a>
 800570a:	ebba 0b04 	subs.w	fp, sl, r4
 800570e:	d00b      	beq.n	8005728 <_vfiprintf_r+0xa4>
 8005710:	465b      	mov	r3, fp
 8005712:	4622      	mov	r2, r4
 8005714:	4629      	mov	r1, r5
 8005716:	4630      	mov	r0, r6
 8005718:	f7ff ffa1 	bl	800565e <__sfputs_r>
 800571c:	3001      	adds	r0, #1
 800571e:	f000 80a7 	beq.w	8005870 <_vfiprintf_r+0x1ec>
 8005722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005724:	445a      	add	r2, fp
 8005726:	9209      	str	r2, [sp, #36]	@ 0x24
 8005728:	f89a 3000 	ldrb.w	r3, [sl]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 809f 	beq.w	8005870 <_vfiprintf_r+0x1ec>
 8005732:	2300      	movs	r3, #0
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800573c:	f10a 0a01 	add.w	sl, sl, #1
 8005740:	9304      	str	r3, [sp, #16]
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005748:	931a      	str	r3, [sp, #104]	@ 0x68
 800574a:	4654      	mov	r4, sl
 800574c:	2205      	movs	r2, #5
 800574e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005752:	4853      	ldr	r0, [pc, #332]	@ (80058a0 <_vfiprintf_r+0x21c>)
 8005754:	f7fa fd44 	bl	80001e0 <memchr>
 8005758:	9a04      	ldr	r2, [sp, #16]
 800575a:	b9d8      	cbnz	r0, 8005794 <_vfiprintf_r+0x110>
 800575c:	06d1      	lsls	r1, r2, #27
 800575e:	bf44      	itt	mi
 8005760:	2320      	movmi	r3, #32
 8005762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005766:	0713      	lsls	r3, r2, #28
 8005768:	bf44      	itt	mi
 800576a:	232b      	movmi	r3, #43	@ 0x2b
 800576c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005770:	f89a 3000 	ldrb.w	r3, [sl]
 8005774:	2b2a      	cmp	r3, #42	@ 0x2a
 8005776:	d015      	beq.n	80057a4 <_vfiprintf_r+0x120>
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	4654      	mov	r4, sl
 800577c:	2000      	movs	r0, #0
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4621      	mov	r1, r4
 8005784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005788:	3b30      	subs	r3, #48	@ 0x30
 800578a:	2b09      	cmp	r3, #9
 800578c:	d94b      	bls.n	8005826 <_vfiprintf_r+0x1a2>
 800578e:	b1b0      	cbz	r0, 80057be <_vfiprintf_r+0x13a>
 8005790:	9207      	str	r2, [sp, #28]
 8005792:	e014      	b.n	80057be <_vfiprintf_r+0x13a>
 8005794:	eba0 0308 	sub.w	r3, r0, r8
 8005798:	fa09 f303 	lsl.w	r3, r9, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	46a2      	mov	sl, r4
 80057a2:	e7d2      	b.n	800574a <_vfiprintf_r+0xc6>
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	1d19      	adds	r1, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	9103      	str	r1, [sp, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbb      	ittet	lt
 80057b0:	425b      	neglt	r3, r3
 80057b2:	f042 0202 	orrlt.w	r2, r2, #2
 80057b6:	9307      	strge	r3, [sp, #28]
 80057b8:	9307      	strlt	r3, [sp, #28]
 80057ba:	bfb8      	it	lt
 80057bc:	9204      	strlt	r2, [sp, #16]
 80057be:	7823      	ldrb	r3, [r4, #0]
 80057c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c2:	d10a      	bne.n	80057da <_vfiprintf_r+0x156>
 80057c4:	7863      	ldrb	r3, [r4, #1]
 80057c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c8:	d132      	bne.n	8005830 <_vfiprintf_r+0x1ac>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	9203      	str	r2, [sp, #12]
 80057d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d6:	3402      	adds	r4, #2
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058b0 <_vfiprintf_r+0x22c>
 80057de:	7821      	ldrb	r1, [r4, #0]
 80057e0:	2203      	movs	r2, #3
 80057e2:	4650      	mov	r0, sl
 80057e4:	f7fa fcfc 	bl	80001e0 <memchr>
 80057e8:	b138      	cbz	r0, 80057fa <_vfiprintf_r+0x176>
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	eba0 000a 	sub.w	r0, r0, sl
 80057f0:	2240      	movs	r2, #64	@ 0x40
 80057f2:	4082      	lsls	r2, r0
 80057f4:	4313      	orrs	r3, r2
 80057f6:	3401      	adds	r4, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4829      	ldr	r0, [pc, #164]	@ (80058a4 <_vfiprintf_r+0x220>)
 8005800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005804:	2206      	movs	r2, #6
 8005806:	f7fa fceb 	bl	80001e0 <memchr>
 800580a:	2800      	cmp	r0, #0
 800580c:	d03f      	beq.n	800588e <_vfiprintf_r+0x20a>
 800580e:	4b26      	ldr	r3, [pc, #152]	@ (80058a8 <_vfiprintf_r+0x224>)
 8005810:	bb1b      	cbnz	r3, 800585a <_vfiprintf_r+0x1d6>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	3308      	adds	r3, #8
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	443b      	add	r3, r7
 8005822:	9309      	str	r3, [sp, #36]	@ 0x24
 8005824:	e76a      	b.n	80056fc <_vfiprintf_r+0x78>
 8005826:	fb0c 3202 	mla	r2, ip, r2, r3
 800582a:	460c      	mov	r4, r1
 800582c:	2001      	movs	r0, #1
 800582e:	e7a8      	b.n	8005782 <_vfiprintf_r+0xfe>
 8005830:	2300      	movs	r3, #0
 8005832:	3401      	adds	r4, #1
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	4619      	mov	r1, r3
 8005838:	f04f 0c0a 	mov.w	ip, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005842:	3a30      	subs	r2, #48	@ 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	d903      	bls.n	8005850 <_vfiprintf_r+0x1cc>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0c6      	beq.n	80057da <_vfiprintf_r+0x156>
 800584c:	9105      	str	r1, [sp, #20]
 800584e:	e7c4      	b.n	80057da <_vfiprintf_r+0x156>
 8005850:	fb0c 2101 	mla	r1, ip, r1, r2
 8005854:	4604      	mov	r4, r0
 8005856:	2301      	movs	r3, #1
 8005858:	e7f0      	b.n	800583c <_vfiprintf_r+0x1b8>
 800585a:	ab03      	add	r3, sp, #12
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	462a      	mov	r2, r5
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <_vfiprintf_r+0x228>)
 8005862:	a904      	add	r1, sp, #16
 8005864:	4630      	mov	r0, r6
 8005866:	f3af 8000 	nop.w
 800586a:	4607      	mov	r7, r0
 800586c:	1c78      	adds	r0, r7, #1
 800586e:	d1d6      	bne.n	800581e <_vfiprintf_r+0x19a>
 8005870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	d405      	bmi.n	8005882 <_vfiprintf_r+0x1fe>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	059a      	lsls	r2, r3, #22
 800587a:	d402      	bmi.n	8005882 <_vfiprintf_r+0x1fe>
 800587c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800587e:	f7ff fc85 	bl	800518c <__retarget_lock_release_recursive>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	065b      	lsls	r3, r3, #25
 8005886:	f53f af1f 	bmi.w	80056c8 <_vfiprintf_r+0x44>
 800588a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800588c:	e71e      	b.n	80056cc <_vfiprintf_r+0x48>
 800588e:	ab03      	add	r3, sp, #12
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	462a      	mov	r2, r5
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <_vfiprintf_r+0x228>)
 8005896:	a904      	add	r1, sp, #16
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f879 	bl	8005990 <_printf_i>
 800589e:	e7e4      	b.n	800586a <_vfiprintf_r+0x1e6>
 80058a0:	08005fb0 	.word	0x08005fb0
 80058a4:	08005fba 	.word	0x08005fba
 80058a8:	00000000 	.word	0x00000000
 80058ac:	0800565f 	.word	0x0800565f
 80058b0:	08005fb6 	.word	0x08005fb6

080058b4 <_printf_common>:
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	4616      	mov	r6, r2
 80058ba:	4698      	mov	r8, r3
 80058bc:	688a      	ldr	r2, [r1, #8]
 80058be:	690b      	ldr	r3, [r1, #16]
 80058c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfb8      	it	lt
 80058c8:	4613      	movlt	r3, r2
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058d0:	4607      	mov	r7, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b10a      	cbz	r2, 80058da <_printf_common+0x26>
 80058d6:	3301      	adds	r3, #1
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	0699      	lsls	r1, r3, #26
 80058de:	bf42      	ittt	mi
 80058e0:	6833      	ldrmi	r3, [r6, #0]
 80058e2:	3302      	addmi	r3, #2
 80058e4:	6033      	strmi	r3, [r6, #0]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	f015 0506 	ands.w	r5, r5, #6
 80058ec:	d106      	bne.n	80058fc <_printf_common+0x48>
 80058ee:	f104 0a19 	add.w	sl, r4, #25
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	6832      	ldr	r2, [r6, #0]
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dc26      	bgt.n	800594a <_printf_common+0x96>
 80058fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	3b00      	subs	r3, #0
 8005904:	bf18      	it	ne
 8005906:	2301      	movne	r3, #1
 8005908:	0692      	lsls	r2, r2, #26
 800590a:	d42b      	bmi.n	8005964 <_printf_common+0xb0>
 800590c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005910:	4641      	mov	r1, r8
 8005912:	4638      	mov	r0, r7
 8005914:	47c8      	blx	r9
 8005916:	3001      	adds	r0, #1
 8005918:	d01e      	beq.n	8005958 <_printf_common+0xa4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6922      	ldr	r2, [r4, #16]
 800591e:	f003 0306 	and.w	r3, r3, #6
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf02      	ittt	eq
 8005926:	68e5      	ldreq	r5, [r4, #12]
 8005928:	6833      	ldreq	r3, [r6, #0]
 800592a:	1aed      	subeq	r5, r5, r3
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	bf0c      	ite	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	2500      	movne	r5, #0
 8005936:	4293      	cmp	r3, r2
 8005938:	bfc4      	itt	gt
 800593a:	1a9b      	subgt	r3, r3, r2
 800593c:	18ed      	addgt	r5, r5, r3
 800593e:	2600      	movs	r6, #0
 8005940:	341a      	adds	r4, #26
 8005942:	42b5      	cmp	r5, r6
 8005944:	d11a      	bne.n	800597c <_printf_common+0xc8>
 8005946:	2000      	movs	r0, #0
 8005948:	e008      	b.n	800595c <_printf_common+0xa8>
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4641      	mov	r1, r8
 8005950:	4638      	mov	r0, r7
 8005952:	47c8      	blx	r9
 8005954:	3001      	adds	r0, #1
 8005956:	d103      	bne.n	8005960 <_printf_common+0xac>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	3501      	adds	r5, #1
 8005962:	e7c6      	b.n	80058f2 <_printf_common+0x3e>
 8005964:	18e1      	adds	r1, r4, r3
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	2030      	movs	r0, #48	@ 0x30
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800596e:	4422      	add	r2, r4
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005978:	3302      	adds	r3, #2
 800597a:	e7c7      	b.n	800590c <_printf_common+0x58>
 800597c:	2301      	movs	r3, #1
 800597e:	4622      	mov	r2, r4
 8005980:	4641      	mov	r1, r8
 8005982:	4638      	mov	r0, r7
 8005984:	47c8      	blx	r9
 8005986:	3001      	adds	r0, #1
 8005988:	d0e6      	beq.n	8005958 <_printf_common+0xa4>
 800598a:	3601      	adds	r6, #1
 800598c:	e7d9      	b.n	8005942 <_printf_common+0x8e>
	...

08005990 <_printf_i>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	7e0f      	ldrb	r7, [r1, #24]
 8005996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005998:	2f78      	cmp	r7, #120	@ 0x78
 800599a:	4691      	mov	r9, r2
 800599c:	4680      	mov	r8, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	469a      	mov	sl, r3
 80059a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059a6:	d807      	bhi.n	80059b8 <_printf_i+0x28>
 80059a8:	2f62      	cmp	r7, #98	@ 0x62
 80059aa:	d80a      	bhi.n	80059c2 <_printf_i+0x32>
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	f000 80d2 	beq.w	8005b56 <_printf_i+0x1c6>
 80059b2:	2f58      	cmp	r7, #88	@ 0x58
 80059b4:	f000 80b9 	beq.w	8005b2a <_printf_i+0x19a>
 80059b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059c0:	e03a      	b.n	8005a38 <_printf_i+0xa8>
 80059c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059c6:	2b15      	cmp	r3, #21
 80059c8:	d8f6      	bhi.n	80059b8 <_printf_i+0x28>
 80059ca:	a101      	add	r1, pc, #4	@ (adr r1, 80059d0 <_printf_i+0x40>)
 80059cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	080059b9 	.word	0x080059b9
 80059dc:	080059b9 	.word	0x080059b9
 80059e0:	080059b9 	.word	0x080059b9
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	080059b9 	.word	0x080059b9
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	08005b3d 	.word	0x08005b3d
 8005a00:	08005a67 	.word	0x08005a67
 8005a04:	08005af7 	.word	0x08005af7
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b5f 	.word	0x08005b5f
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	08005a67 	.word	0x08005a67
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005aff 	.word	0x08005aff
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6032      	str	r2, [r6, #0]
 8005a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e09d      	b.n	8005b78 <_printf_i+0x1e8>
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1d19      	adds	r1, r3, #4
 8005a42:	6031      	str	r1, [r6, #0]
 8005a44:	0606      	lsls	r6, r0, #24
 8005a46:	d501      	bpl.n	8005a4c <_printf_i+0xbc>
 8005a48:	681d      	ldr	r5, [r3, #0]
 8005a4a:	e003      	b.n	8005a54 <_printf_i+0xc4>
 8005a4c:	0645      	lsls	r5, r0, #25
 8005a4e:	d5fb      	bpl.n	8005a48 <_printf_i+0xb8>
 8005a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	da03      	bge.n	8005a60 <_printf_i+0xd0>
 8005a58:	232d      	movs	r3, #45	@ 0x2d
 8005a5a:	426d      	negs	r5, r5
 8005a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a60:	4859      	ldr	r0, [pc, #356]	@ (8005bc8 <_printf_i+0x238>)
 8005a62:	230a      	movs	r3, #10
 8005a64:	e011      	b.n	8005a8a <_printf_i+0xfa>
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	6833      	ldr	r3, [r6, #0]
 8005a6a:	0608      	lsls	r0, r1, #24
 8005a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a70:	d402      	bmi.n	8005a78 <_printf_i+0xe8>
 8005a72:	0649      	lsls	r1, r1, #25
 8005a74:	bf48      	it	mi
 8005a76:	b2ad      	uxthmi	r5, r5
 8005a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a7a:	4853      	ldr	r0, [pc, #332]	@ (8005bc8 <_printf_i+0x238>)
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	bf14      	ite	ne
 8005a80:	230a      	movne	r3, #10
 8005a82:	2308      	moveq	r3, #8
 8005a84:	2100      	movs	r1, #0
 8005a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a8a:	6866      	ldr	r6, [r4, #4]
 8005a8c:	60a6      	str	r6, [r4, #8]
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	bfa2      	ittt	ge
 8005a92:	6821      	ldrge	r1, [r4, #0]
 8005a94:	f021 0104 	bicge.w	r1, r1, #4
 8005a98:	6021      	strge	r1, [r4, #0]
 8005a9a:	b90d      	cbnz	r5, 8005aa0 <_printf_i+0x110>
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	d04b      	beq.n	8005b38 <_printf_i+0x1a8>
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aaa:	5dc7      	ldrb	r7, [r0, r7]
 8005aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ab0:	462f      	mov	r7, r5
 8005ab2:	42bb      	cmp	r3, r7
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	d9f4      	bls.n	8005aa2 <_printf_i+0x112>
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d10b      	bne.n	8005ad4 <_printf_i+0x144>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	07df      	lsls	r7, r3, #31
 8005ac0:	d508      	bpl.n	8005ad4 <_printf_i+0x144>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	6861      	ldr	r1, [r4, #4]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	bfde      	ittt	le
 8005aca:	2330      	movle	r3, #48	@ 0x30
 8005acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ad0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ad4:	1b92      	subs	r2, r2, r6
 8005ad6:	6122      	str	r2, [r4, #16]
 8005ad8:	f8cd a000 	str.w	sl, [sp]
 8005adc:	464b      	mov	r3, r9
 8005ade:	aa03      	add	r2, sp, #12
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f7ff fee6 	bl	80058b4 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d14a      	bne.n	8005b82 <_printf_i+0x1f2>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	b004      	add	sp, #16
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	f043 0320 	orr.w	r3, r3, #32
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	4833      	ldr	r0, [pc, #204]	@ (8005bcc <_printf_i+0x23c>)
 8005b00:	2778      	movs	r7, #120	@ 0x78
 8005b02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	6831      	ldr	r1, [r6, #0]
 8005b0a:	061f      	lsls	r7, r3, #24
 8005b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b10:	d402      	bmi.n	8005b18 <_printf_i+0x188>
 8005b12:	065f      	lsls	r7, r3, #25
 8005b14:	bf48      	it	mi
 8005b16:	b2ad      	uxthmi	r5, r5
 8005b18:	6031      	str	r1, [r6, #0]
 8005b1a:	07d9      	lsls	r1, r3, #31
 8005b1c:	bf44      	itt	mi
 8005b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b22:	6023      	strmi	r3, [r4, #0]
 8005b24:	b11d      	cbz	r5, 8005b2e <_printf_i+0x19e>
 8005b26:	2310      	movs	r3, #16
 8005b28:	e7ac      	b.n	8005a84 <_printf_i+0xf4>
 8005b2a:	4827      	ldr	r0, [pc, #156]	@ (8005bc8 <_printf_i+0x238>)
 8005b2c:	e7e9      	b.n	8005b02 <_printf_i+0x172>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f023 0320 	bic.w	r3, r3, #32
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	e7f6      	b.n	8005b26 <_printf_i+0x196>
 8005b38:	4616      	mov	r6, r2
 8005b3a:	e7bd      	b.n	8005ab8 <_printf_i+0x128>
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	6961      	ldr	r1, [r4, #20]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	062e      	lsls	r6, r5, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1c0>
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1c6>
 8005b50:	0668      	lsls	r0, r5, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1bc>
 8005b54:	8019      	strh	r1, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4616      	mov	r6, r2
 8005b5c:	e7bc      	b.n	8005ad8 <_printf_i+0x148>
 8005b5e:	6833      	ldr	r3, [r6, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	6032      	str	r2, [r6, #0]
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fa fb38 	bl	80001e0 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1e6>
 8005b72:	1b80      	subs	r0, r0, r6
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b80:	e7aa      	b.n	8005ad8 <_printf_i+0x148>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ad      	beq.n	8005aec <_printf_i+0x15c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x22e>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a6      	b.n	8005af0 <_printf_i+0x160>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09d      	beq.n	8005aec <_printf_i+0x15c>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x212>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x206>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x222>
 8005bc6:	bf00      	nop
 8005bc8:	08005fc1 	.word	0x08005fc1
 8005bcc:	08005fd2 	.word	0x08005fd2

08005bd0 <__sflush_r>:
 8005bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	0716      	lsls	r6, r2, #28
 8005bda:	4605      	mov	r5, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	d454      	bmi.n	8005c8a <__sflush_r+0xba>
 8005be0:	684b      	ldr	r3, [r1, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dc02      	bgt.n	8005bec <__sflush_r+0x1c>
 8005be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd48      	ble.n	8005c7e <__sflush_r+0xae>
 8005bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d045      	beq.n	8005c7e <__sflush_r+0xae>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bf8:	682f      	ldr	r7, [r5, #0]
 8005bfa:	6a21      	ldr	r1, [r4, #32]
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	d030      	beq.n	8005c62 <__sflush_r+0x92>
 8005c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	0759      	lsls	r1, r3, #29
 8005c06:	d505      	bpl.n	8005c14 <__sflush_r+0x44>
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	1ad2      	subs	r2, r2, r3
 8005c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c0e:	b10b      	cbz	r3, 8005c14 <__sflush_r+0x44>
 8005c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c18:	6a21      	ldr	r1, [r4, #32]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b0      	blx	r6
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	d106      	bne.n	8005c32 <__sflush_r+0x62>
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	291d      	cmp	r1, #29
 8005c28:	d82b      	bhi.n	8005c82 <__sflush_r+0xb2>
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <__sflush_r+0x104>)
 8005c2c:	410a      	asrs	r2, r1
 8005c2e:	07d6      	lsls	r6, r2, #31
 8005c30:	d427      	bmi.n	8005c82 <__sflush_r+0xb2>
 8005c32:	2200      	movs	r2, #0
 8005c34:	6062      	str	r2, [r4, #4]
 8005c36:	04d9      	lsls	r1, r3, #19
 8005c38:	6922      	ldr	r2, [r4, #16]
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	d504      	bpl.n	8005c48 <__sflush_r+0x78>
 8005c3e:	1c42      	adds	r2, r0, #1
 8005c40:	d101      	bne.n	8005c46 <__sflush_r+0x76>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b903      	cbnz	r3, 8005c48 <__sflush_r+0x78>
 8005c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c4a:	602f      	str	r7, [r5, #0]
 8005c4c:	b1b9      	cbz	r1, 8005c7e <__sflush_r+0xae>
 8005c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d002      	beq.n	8005c5c <__sflush_r+0x8c>
 8005c56:	4628      	mov	r0, r5
 8005c58:	f7ff fa9a 	bl	8005190 <_free_r>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c60:	e00d      	b.n	8005c7e <__sflush_r+0xae>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b0      	blx	r6
 8005c68:	4602      	mov	r2, r0
 8005c6a:	1c50      	adds	r0, r2, #1
 8005c6c:	d1c9      	bne.n	8005c02 <__sflush_r+0x32>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0c6      	beq.n	8005c02 <__sflush_r+0x32>
 8005c74:	2b1d      	cmp	r3, #29
 8005c76:	d001      	beq.n	8005c7c <__sflush_r+0xac>
 8005c78:	2b16      	cmp	r3, #22
 8005c7a:	d11e      	bne.n	8005cba <__sflush_r+0xea>
 8005c7c:	602f      	str	r7, [r5, #0]
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e022      	b.n	8005cc8 <__sflush_r+0xf8>
 8005c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	e01b      	b.n	8005cc2 <__sflush_r+0xf2>
 8005c8a:	690f      	ldr	r7, [r1, #16]
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	d0f6      	beq.n	8005c7e <__sflush_r+0xae>
 8005c90:	0793      	lsls	r3, r2, #30
 8005c92:	680e      	ldr	r6, [r1, #0]
 8005c94:	bf08      	it	eq
 8005c96:	694b      	ldreq	r3, [r1, #20]
 8005c98:	600f      	str	r7, [r1, #0]
 8005c9a:	bf18      	it	ne
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	eba6 0807 	sub.w	r8, r6, r7
 8005ca2:	608b      	str	r3, [r1, #8]
 8005ca4:	f1b8 0f00 	cmp.w	r8, #0
 8005ca8:	dde9      	ble.n	8005c7e <__sflush_r+0xae>
 8005caa:	6a21      	ldr	r1, [r4, #32]
 8005cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cae:	4643      	mov	r3, r8
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b0      	blx	r6
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	dc08      	bgt.n	8005ccc <__sflush_r+0xfc>
 8005cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ccc:	4407      	add	r7, r0
 8005cce:	eba8 0800 	sub.w	r8, r8, r0
 8005cd2:	e7e7      	b.n	8005ca4 <__sflush_r+0xd4>
 8005cd4:	dfbffffe 	.word	0xdfbffffe

08005cd8 <_fflush_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	690b      	ldr	r3, [r1, #16]
 8005cdc:	4605      	mov	r5, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_fflush_r+0x10>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	b118      	cbz	r0, 8005cf2 <_fflush_r+0x1a>
 8005cea:	6a03      	ldr	r3, [r0, #32]
 8005cec:	b90b      	cbnz	r3, 8005cf2 <_fflush_r+0x1a>
 8005cee:	f7ff f835 	bl	8004d5c <__sinit>
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f3      	beq.n	8005ce2 <_fflush_r+0xa>
 8005cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cfc:	07d0      	lsls	r0, r2, #31
 8005cfe:	d404      	bmi.n	8005d0a <_fflush_r+0x32>
 8005d00:	0599      	lsls	r1, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_fflush_r+0x32>
 8005d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d06:	f7ff fa40 	bl	800518a <__retarget_lock_acquire_recursive>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f7ff ff5f 	bl	8005bd0 <__sflush_r>
 8005d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d14:	07da      	lsls	r2, r3, #31
 8005d16:	4605      	mov	r5, r0
 8005d18:	d4e4      	bmi.n	8005ce4 <_fflush_r+0xc>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d4e1      	bmi.n	8005ce4 <_fflush_r+0xc>
 8005d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d22:	f7ff fa33 	bl	800518c <__retarget_lock_release_recursive>
 8005d26:	e7dd      	b.n	8005ce4 <_fflush_r+0xc>

08005d28 <__swhatbuf_r>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	2900      	cmp	r1, #0
 8005d32:	b096      	sub	sp, #88	@ 0x58
 8005d34:	4615      	mov	r5, r2
 8005d36:	461e      	mov	r6, r3
 8005d38:	da0d      	bge.n	8005d56 <__swhatbuf_r+0x2e>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	bf14      	ite	ne
 8005d46:	2340      	movne	r3, #64	@ 0x40
 8005d48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	6031      	str	r1, [r6, #0]
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	b016      	add	sp, #88	@ 0x58
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
 8005d56:	466a      	mov	r2, sp
 8005d58:	f000 f862 	bl	8005e20 <_fstat_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	dbec      	blt.n	8005d3a <__swhatbuf_r+0x12>
 8005d60:	9901      	ldr	r1, [sp, #4]
 8005d62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d6a:	4259      	negs	r1, r3
 8005d6c:	4159      	adcs	r1, r3
 8005d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d72:	e7eb      	b.n	8005d4c <__swhatbuf_r+0x24>

08005d74 <__smakebuf_r>:
 8005d74:	898b      	ldrh	r3, [r1, #12]
 8005d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d78:	079d      	lsls	r5, r3, #30
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	d507      	bpl.n	8005d90 <__smakebuf_r+0x1c>
 8005d80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	b003      	add	sp, #12
 8005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d90:	ab01      	add	r3, sp, #4
 8005d92:	466a      	mov	r2, sp
 8005d94:	f7ff ffc8 	bl	8005d28 <__swhatbuf_r>
 8005d98:	9f00      	ldr	r7, [sp, #0]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff fa62 	bl	8005268 <_malloc_r>
 8005da4:	b948      	cbnz	r0, 8005dba <__smakebuf_r+0x46>
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	059a      	lsls	r2, r3, #22
 8005dac:	d4ee      	bmi.n	8005d8c <__smakebuf_r+0x18>
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	e7e2      	b.n	8005d80 <__smakebuf_r+0xc>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	6020      	str	r0, [r4, #0]
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	9b01      	ldr	r3, [sp, #4]
 8005dc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005dca:	b15b      	cbz	r3, 8005de4 <__smakebuf_r+0x70>
 8005dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 f837 	bl	8005e44 <_isatty_r>
 8005dd6:	b128      	cbz	r0, 8005de4 <__smakebuf_r+0x70>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	431d      	orrs	r5, r3
 8005de8:	81a5      	strh	r5, [r4, #12]
 8005dea:	e7cf      	b.n	8005d8c <__smakebuf_r+0x18>

08005dec <memmove>:
 8005dec:	4288      	cmp	r0, r1
 8005dee:	b510      	push	{r4, lr}
 8005df0:	eb01 0402 	add.w	r4, r1, r2
 8005df4:	d902      	bls.n	8005dfc <memmove+0x10>
 8005df6:	4284      	cmp	r4, r0
 8005df8:	4623      	mov	r3, r4
 8005dfa:	d807      	bhi.n	8005e0c <memmove+0x20>
 8005dfc:	1e43      	subs	r3, r0, #1
 8005dfe:	42a1      	cmp	r1, r4
 8005e00:	d008      	beq.n	8005e14 <memmove+0x28>
 8005e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e0a:	e7f8      	b.n	8005dfe <memmove+0x12>
 8005e0c:	4402      	add	r2, r0
 8005e0e:	4601      	mov	r1, r0
 8005e10:	428a      	cmp	r2, r1
 8005e12:	d100      	bne.n	8005e16 <memmove+0x2a>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e1e:	e7f7      	b.n	8005e10 <memmove+0x24>

08005e20 <_fstat_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	@ (8005e40 <_fstat_r+0x20>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f7fa ff88 	bl	8000d42 <_fstat>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d102      	bne.n	8005e3c <_fstat_r+0x1c>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	b103      	cbz	r3, 8005e3c <_fstat_r+0x1c>
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000268 	.word	0x20000268

08005e44 <_isatty_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	@ (8005e60 <_isatty_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fa ff87 	bl	8000d62 <_isatty>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_isatty_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_isatty_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000268 	.word	0x20000268

08005e64 <_sbrk_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d06      	ldr	r5, [pc, #24]	@ (8005e80 <_sbrk_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7fa ff90 	bl	8000d94 <_sbrk>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_sbrk_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_sbrk_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	20000268 	.word	0x20000268

08005e84 <memcpy>:
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e8c:	d100      	bne.n	8005e90 <memcpy+0xc>
 8005e8e:	4770      	bx	lr
 8005e90:	b510      	push	{r4, lr}
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	d1f9      	bne.n	8005e92 <memcpy+0xe>
 8005e9e:	bd10      	pop	{r4, pc}

08005ea0 <_realloc_r>:
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	b921      	cbnz	r1, 8005eb6 <_realloc_r+0x16>
 8005eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	f7ff b9d9 	b.w	8005268 <_malloc_r>
 8005eb6:	b92a      	cbnz	r2, 8005ec4 <_realloc_r+0x24>
 8005eb8:	f7ff f96a 	bl	8005190 <_free_r>
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec4:	f000 f81a 	bl	8005efc <_malloc_usable_size_r>
 8005ec8:	4285      	cmp	r5, r0
 8005eca:	4606      	mov	r6, r0
 8005ecc:	d802      	bhi.n	8005ed4 <_realloc_r+0x34>
 8005ece:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ed2:	d8f4      	bhi.n	8005ebe <_realloc_r+0x1e>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f7ff f9c6 	bl	8005268 <_malloc_r>
 8005edc:	4607      	mov	r7, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d0ec      	beq.n	8005ebc <_realloc_r+0x1c>
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	bf28      	it	cs
 8005eea:	4632      	movcs	r2, r6
 8005eec:	f7ff ffca 	bl	8005e84 <memcpy>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	f7ff f94c 	bl	8005190 <_free_r>
 8005ef8:	463c      	mov	r4, r7
 8005efa:	e7e0      	b.n	8005ebe <_realloc_r+0x1e>

08005efc <_malloc_usable_size_r>:
 8005efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f00:	1f18      	subs	r0, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfbc      	itt	lt
 8005f06:	580b      	ldrlt	r3, [r1, r0]
 8005f08:	18c0      	addlt	r0, r0, r3
 8005f0a:	4770      	bx	lr

08005f0c <_init>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr

08005f18 <_fini>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr
